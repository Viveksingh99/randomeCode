"use client";
import { FaArrowLeft } from "react-icons/fa";
import { FaRegCalendar } from "react-icons/fa";
import { FaCaretDown } from "react-icons/fa6";
import { MdCameraAlt } from "react-icons/md";
import { useAppDispatch, useAppSelector } from "@/lib/store";
import { useEffect, useState } from "react";
import { getdeleteCompanion, getupdateCompanion, getupdateProfile } from "@/lib/authSlice";
import { FaAngleDown } from "react-icons/fa";
import { Offcanvas } from "react-bootstrap";
import BottomSheet from "@/components/Common/BottomSheet";
import MobileDatePicker from "@/components/Common/MobileDatePicker";

import { OffCanvasCountry_Mob_code } from "../Signup/OffCanvasMobCode";
import { formHeader } from "@/components/Common";

const ComProfile = ({ show, hide, companionData }: any) => {
  const dispatch = useAppDispatch();
  const [isDobOpen, setIsDobOpen] = useState(false);
  const [openExpiryDate, setopenExpiryDate] = useState(false);
  const [activeGender, setActiveGender] = useState("Male");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [nationality, setNationality] = useState("");
  const [openNationality, setopenNationality] = useState(false);
  const [passportNumber, setPassportNumber] = useState("");
  const [issuingCountry, setIssuingCountry] = useState("");
  const [expiryDate, setExpiryDate] = useState("");
  const [email, setEmail] = useState("");
  const [mobileCode, setMobileCode] = useState("");
  const [openMobileCode, setopenMobileCode] = useState(false);
  const [mobileNumber, setmobileNumber] = useState("");
  const [dateOfBirth, setDateOfBirth] = useState("");
  const [openIssuingCountry, setopenIssuingCountry] = useState(false);
  const userdata = useAppSelector((state: any) => state?.auth?.userData);

console.log(companionData, 'companionData')
  useEffect(() => {
    if (show && companionData) {
      setFirstName(companionData?.firstName || "");
      setLastName(companionData?.lastName || "");
      setDateOfBirth(companionData?.dateOfBirth || "");
      setNationality(companionData?.nationality || "");
      setEmail(companionData?.emailAddress || "");
      setMobileCode(companionData?.mobileCode || "");
      setmobileNumber(companionData?.mobileNumber || "");
    }
  }, [show, companionData]);

  const toggleGender = (gender: any) => {
    setActiveGender(gender);
  };

  const handledeleteCompanion = () => {
    const updatedProfile = {
        paxInfoID: userdata?.paxInfoID,
        "companionID": companionData?.companionID,
        "personKey": userdata?.personKey
    }
    dispatch(getdeleteCompanion(updatedProfile));
  };

  const handle = () => {
    const update = {
        "paxInfoID": 0,
        "companionInfo": {
            "companionID": "84fedf74-60d4-4317-b4e8-5504305e0fab",
            "companionType": "1",
            "title": "Mr",
            "firstName": "Raja",
            "lastName": "singh",
            "gender": "Male",
            "dateOfBirth": "1999-02-22",
            "nationality": "AS",
            "documentInfo": [
                {
                    "docState": "2",
                    "companionDocsID": "",
                    "docType": "1",
                    "docNationality": "AS",
                    "docNumber": "544erere",
                    "docIssueddate": "2024-02-02",
                    "docExpirydate": "2030-02-20",
                    "issuedCountryCode": "DZ"
                }
            ]
        },
        "personKey": "Nzc0MzI0"
    }
    dispatch(getupdateCompanion(update));
  }



  return (
    <>
      <Offcanvas show={show} onHide={hide}>
        <Offcanvas.Header className="profile-bg">
          <div className="myprofile">
            <FaArrowLeft onClick={hide} />
            Personal details
          </div>
          {/* <div className="logout" onClick={handleProfils}>Save</div> */}
        </Offcanvas.Header>
        <Offcanvas.Body>
          <div className="profile-form-login-page">
            <form>
              <div className="row">
                <div className="col-6 ctpr">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                    />
                    <label>First Name</label>
                  </div>
                </div>
                <div className="col-6 ctpl">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                    />
                    <label>Last Name</label>
                  </div>
                </div>

                <div className="col-6 ctpr">
                  <div className="input-div gender-btn">
                    <div
                      className={`gender-name ${
                        activeGender === "Male" ? "active" : ""
                      }`}
                      onClick={() => toggleGender("Male")}
                    >
                      Male
                    </div>
                    <div
                      className={`gender-name ${
                        activeGender === "Female" ? "active" : ""
                      }`}
                      onClick={() => toggleGender("Female")}
                    >
                      Female
                    </div>
                  </div>
                </div>

                <div className="col-6 ctpl">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={dateOfBirth}
                      onClick={() => setIsDobOpen(true)}
                      readOnly
                    />
                    <span className="f-icon">
                      <FaRegCalendar />
                    </span>
                    <label>Date Of Birth</label>
                  </div>
                </div>

                <div className="col-12">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={nationality}
                      onClick={() => setopenNationality(true)}
                    />
                    <span className="f-icon">
                      <FaCaretDown />
                    </span>
                    <label>Nationality</label>
                  </div>
                </div>

                <p>Travel documents</p>

                <div className="col-12">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={passportNumber}
                      onChange={(e) => setPassportNumber(e.target.value)}
                    />
                    <span className="f-icon">
                      <MdCameraAlt />
                    </span>
                    <label>Passport Number</label>
                  </div>
                </div>

                <div className="col-6 ctpr">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      readOnly
                      value={issuingCountry}
                      onClick={() => setopenIssuingCountry(true)}
                    />
                    <label>Issuing Country</label>
                  </div>
                </div>

                {/* <div className="col-6 ctpl">
                <div className="input-div ">
                  <input
                    type="text"
                    className="form-control"
                    placeholder=" "
                    required
                    value={issueDate}
                    onChange={(e) => setIssueDate(e.target.value)}
                  />
                  <span className="f-icon">
                    <FaRegCalendar />
                  </span>
                  <label>Issuing date</label>
                </div>
              </div> */}

                <div className="col-6">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={expiryDate}
                      onClick={() => setopenExpiryDate(true)}
                      readOnly
                    />
                    <span className="f-icon">
                      <FaRegCalendar />
                    </span>
                    <label>Expiry date</label>
                  </div>
                </div>

                <p>Contact details</p>

                <div className="col-12">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                    />
                    <label>Email</label>
                  </div>
                </div>

                <div className="col-4">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={mobileCode}
                      onClick={() => setopenMobileCode(true)}
                    />
                    <span className="f-icon">
                      <FaAngleDown />
                    </span>
                    {/* <label>Email</label> */}
                  </div>
                </div>

                <div className="col-8">
                  <div className="input-div ">
                    <input
                      type="text"
                      className="form-control"
                      placeholder=" "
                      required
                      value={mobileNumber}
                      onChange={(e) => setmobileNumber(e.target.value)}
                    />
                    {/* <span className="f-icon">
                    <FaRegCalendar />
                  </span> */}
                    <label>Phone number</label>
                  </div>
                </div>
                <div className="col-12">
                  <div className="save-btn">
                    Save
                  </div>
                </div>
              </div>
            </form>
            <div><p className="text-red-700" onClick={handledeleteCompanion}>Delete Companion</p></div>
          </div>
        </Offcanvas.Body>
      </Offcanvas>
      <BottomSheet
        show={isDobOpen}
        hide={() => setIsDobOpen(false)}
        header={formHeader("Date of birth", () => setIsDobOpen(false))}
        children={
          <MobileDatePicker
            setSelectedDate={setDateOfBirth}
            showValue={isDobOpen || dateOfBirth}
          />
        }
      />
      <BottomSheet
        show={openExpiryDate}
        hide={() => setopenExpiryDate(false)}
        header={formHeader("Expiry Date", () => setopenExpiryDate(false))}
        children={
          <MobileDatePicker
            setSelectedDate={setExpiryDate}
            showValue={openExpiryDate || expiryDate}
          />
        }
      />
      {openIssuingCountry && (
        <OffCanvasCountry_Mob_code
          title="Issuing Country"
          show={openIssuingCountry}
          onHide={() => setopenIssuingCountry(false)}
          selectedValue={issuingCountry}
          setSelectedValue={setIssuingCountry}
          id="countryName"
        />
      )}
      {openNationality && (
        <OffCanvasCountry_Mob_code
          title="Issuing Country"
          show={openNationality}
          onHide={() => setopenNationality(false)}
          selectedValue={nationality}
          setSelectedValue={setNationality}
          id="countryName"
        />
      )}
      {openMobileCode && (
        <OffCanvasCountry_Mob_code
          title="Issuing Country"
          show={openMobileCode}
          onHide={() => setopenMobileCode(false)}
          selectedValue={mobileCode}
          setSelectedValue={setMobileCode}
          id="countryCode"
        />
      )}
    </>
  );
};

export default ComProfile;
==========================================================================================================================================================================


import Offcanvas from "react-bootstrap/Offcanvas";
import "./Logout.scss";
import { FaArrowLeft } from "react-icons/fa";
import { IoIosArrowForward } from "react-icons/io";
import Image from "next/image";
import { MdAddCircleOutline } from "react-icons/md";
import Cookies from "js-cookie";
import { redirect } from "next/navigation";
import { useAppDispatch } from "@/lib/store";
import { clearUserData, getpassengerDetail } from "@/lib/authSlice";
import { useAppSelector } from "@/lib/store";
import { useEffect, useState } from "react";
import Profile from "../profile/Profile";
import Changepass from "../changePassword/Changepass";
import Club from "../flyoneclub/Club";
import AddFriends from "../Friends&Family/AddFriends";
import { MdArrowForwardIos } from "react-icons/md";
import ComProfile from "../ComProfile/ComProfile";

const Logout = ({ showLogout, handleCloselogout }: any) => {
  const userdata = useAppSelector((state: any) => state?.auth?.userData);
  const userCompanion = useAppSelector(
    (state: any) => state?.auth?.companionData
  );
  const dispatch = useAppDispatch();
  const companionInfo = userCompanion?.companionData?.companionInfo;
  const [showProfile, setshowProfile] = useState(false);
  const [showchangePass, setshowchangePass] = useState(false);
  const [showClub, setshowClub] = useState(false);
  const [showAddFriends, setshowAddFriends] = useState(false);
  const handleCloseProfile = () => setshowProfile(false);
  const handleShowProfile = () => setshowProfile(true);
  const handleClosechangePass = () => setshowchangePass(false);
  const handleShowchangePass = () => setshowchangePass(true);
  const handleCloseClub = () => setshowClub(false);
  const handleShowcClub = () => setshowClub(true);
  const handleCloseAddFriends = () => setshowAddFriends(false);
  const handleShowAddFriends = () => setshowAddFriends(true);
  const [showComProfile, setshowComProfile] = useState(false);
  const [selectedCompanion, setSelectedCompanion] = useState(null);

  const handleShowCompanionProfile = (companion: any) => {
    setSelectedCompanion(companion);
    setshowComProfile(true);
  };
  const handleLogout = () => {
    Cookies.remove("COOKIE_TOKEN", { path: "/" });
    localStorage.clear();
    Object.keys(Cookies.get()).forEach((cookie) => {
      Cookies.remove(cookie, { path: "/" });
    });
    dispatch(clearUserData());
    handleCloselogout();
    redirect("/");
  };

  useEffect(() => {
    const passengerDetails = {
      paxInfoID: userdata?.paxInfoID,
      isFromService: true,
      accountNumber: userdata?.accountNumber,
      personKey: userdata?.personKey,
    };

    if (userdata) {
      dispatch(getpassengerDetail(passengerDetails));
    }
  }, [userdata, dispatch, showLogout]);

  return (
    <>
      <Offcanvas show={showLogout} onHide={handleCloselogout}>
        <Offcanvas.Header className="profile-bg">
          <div className="myprofile">
            <FaArrowLeft onClick={handleCloselogout} /> My Profile
          </div>
          <div
            className="logout"
            data-bs-dismiss="offcanvas"
            aria-label="Close"
            onClick={handleLogout}
          >
            Logout
          </div>
        </Offcanvas.Header>
        <Offcanvas.Body>
          <div className="prfile-info-div">
            <ul>
              <li className="profile-name" onClick={handleShowProfile}>
                {" "}
                {`${userdata?.firstName} ${userdata?.lastName}`}{" "}
                <IoIosArrowForward />{" "}
              </li>
              <li className="" onClick={handleShowchangePass}>
                {" "}
                <span>
                  <Image src="/Icon/lock.svg" height={20} width={20} alt="" />{" "}
                  Password &amp; Security{" "}
                </span>{" "}
                <IoIosArrowForward />{" "}
              </li>
              {/* {userdata?.clubInfo ? (
                ''
              ) : ( */}
              <li className="" onClick={handleShowcClub}>
                <span>
                  <Image
                    src="/Icon/mimchild.svg"
                    height={100}
                    width={100}
                    alt=""
                  />
                  Flyone Club
                </span>
                <IoIosArrowForward />
              </li>
              {/* )} */}
            </ul>
            <div className="profile-info-box">
              {" "}
              <span>{companionInfo?.length} Friends &amp; Family</span>
              <span className="d-flex gap-2" onClick={handleShowAddFriends}>
                Add <MdAddCircleOutline />
              </span>{" "}
            </div>
          </div>
          <div>
            {companionInfo?.length > 0 ? (
              <ul className="companionBox">
                {companionInfo?.map((companion: any) => (
                  <li
                    key={companion?.companionID}
                    onClick={() => handleShowCompanionProfile(companion)}
                  >
                    <h2>{`${companion?.firstName} ${companion?.lastName}`}</h2>
                    {companion?.documentInfo.map((doc: any, index: any) => (
                      <div key={index} className="companionBoxinfo">
                        <p>
                          <span>
                            passport: <strong>{doc.docNumber}</strong>
                          </span>
                          <span>
                            Exp date: <strong>{doc.docExpirydate}</strong>
                          </span>
                        </p>
                        <p>
                          <MdArrowForwardIos />
                        </p>
                      </div>
                    ))}
                  </li>
                ))}
              </ul>
            ) : (
              <p></p>
            )}
          </div>
        </Offcanvas.Body>
      </Offcanvas>
      <Profile
        showProfile={showProfile}
        handleCloseProfile={handleCloseProfile}
      />
      <Changepass
        showchangePass={showchangePass}
        handleClosechangePass={handleClosechangePass}
      />
      <Club showClub={showClub} handleCloseClub={handleCloseClub} />
      <AddFriends
        showAddFriends={showAddFriends}
        handleCloseAddFriends={handleCloseAddFriends}
      />
      {selectedCompanion && (
        <ComProfile
          show={showComProfile}
          hide={() => setshowComProfile(false)}
          companionData={selectedCompanion}
        />
      )}
    </>
  );
};

export default Logout;
===================================================================================================================================================
export const getupdateCompanion =
  (updateProfils: any) => async (dispatch: Function) => {
    try {
      const res = await updateCompanion(updateProfils);
      const { data } = res;
      if (data) {
        console.log("Data:", data);
      } else {
        const [errorMsg] = data.result.msgs;
        console.error("Error details:", errorMsg);
      }
    } catch (error) {
      console.error("Error details:", error);
    }
  };

  export const getdeleteCompanion =
  (updateProfils: any) => async (dispatch: Function) => {
    try {
      const res = await deleteCompanion(updateProfils);
      const { data } = res;
      if (data) {
        console.log("Data:", data);
      } else {
        const [errorMsg] = data.result.msgs;
        console.error("Error details:", errorMsg);
      }
    } catch (error) {
      console.error("Error details:", error);
    }
  };
  ================================================================================================================
export const updateCompanion = async (data: any) => {
  try {
    const API_URL = "api/profile/update-companion";
    return await axiosInstance.post(API_URL, data);
  } catch (error) {
    throw error;
  }
};

export const deleteCompanion = async (data: any) => {
  try {
    const API_URL = "api/profile/delete-companion";
    return await axiosInstance.post(API_URL, data);
  } catch (error) {
    throw error;
  }
};