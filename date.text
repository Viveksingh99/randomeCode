"use client";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { Card, Spinner } from "react-bootstrap";
import { useRef, useEffect, useState, useMemo } from "react";
import moment from "moment";
import { forEach, map, findIndex } from "lodash";
import {
  setShowPageLoader,
  updateFlightSearchQuery,
} from "@/lib/componentSlice";
import { useAppDispatch, useAppSelector } from "@/lib/store";
import { createSearchPayload } from "@/utils/utilsFunction";
import { fetchFlights, schedulFlights } from "@/lib/flightSlice";

const DateScheduler = ({ availableflightsDate, id }: any) => {
  const { depCity, arrCity, deepDate, arrDate } =
    useAppSelector((state) => state?.component?.flightSearchQuery) || {};
  const PaxData = useAppSelector((state) => state?.pax?.paxDetails?.PaxData);
  const sliderRef = useRef<Slider | null>(null);
  const dispatch = useAppDispatch();

  const [allDays, setAllDays] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFetching, setIsFetching] = useState(false);

  const settings = {
    slidesToShow: 4.5,
    slidesToScroll: 1,
    autoplay: false,
    arrows: true,
    infinite: false,
    afterChange: async (currentSlide: number) => {
      if (!isFetching && currentSlide + settings.slidesToShow >= allDays.length) {
        await fetchMoreDates("after");
      }
      if (!isFetching && currentSlide === 0) {
        await fetchMoreDates("before");
      }
    },
  };

  const fetchMoreDates = async (direction: "before" | "after") => {
    try {
      setIsFetching(true);
      dispatch(setShowPageLoader(true));

      let referenceDate;
      if (direction === "after") {
        const lastDay = allDays[allDays.length - 1];
        referenceDate = moment(`${lastDay.year}-${lastDay.month}-${lastDay.date}`).format("YYYY-MM-DD");
      } else {
        const firstDay = allDays[0];
        referenceDate = moment(`${firstDay.year}-${firstDay.month}-${firstDay.date}`).format("YYYY-MM-DD");
      }

      const newDatePayload = createSearchPayload(depCity, arrCity, referenceDate, arrDate, PaxData);
      const res = await dispatch(schedulFlights(newDatePayload));

      if (res?.data?.result?.isSuccess) {
        const newFlightDates = res.data.result.availableflightsDate;

        setAllDays((prevDays) => {
          const newDays: any[] = [];
          map(newFlightDates?.month, (month: any) => {
            forEach(month?.days, (day: any) => {
              newDays.push({
                date: day.date,
                month: month.month,
                year: newFlightDates?.year,
                price: day.price,
              });
            });
          });

          return direction === "before" ? [...newDays, ...prevDays] : [...prevDays, ...newDays];
        });
      }
    } catch (error) {
      console.error("Error fetching more dates:", error);
    } finally {
      dispatch(setShowPageLoader(false));
      setIsFetching(false);
    }
  };

  const formatDate = (dateStr: any, monthNum: any, year: any) => {
    const date = moment(`${year}-${monthNum}-${dateStr}`, "YYYY-MM-DD");
    return date.format("ddd DD, MMM");
  };

  useEffect(() => {
    const tempAllDays: any[] = [];

    map(availableflightsDate?.month, (month: any) => {
      forEach(month?.days, (day: any) => {
        tempAllDays.push({
          date: day.date,
          month: month.month,
          year: availableflightsDate?.year,
          price: day.price,
        });
      });
    });

    setAllDays(tempAllDays);
    setIsLoading(false);

    const centerDate = (selectedDate: any) => {
      const selectedIndex = findIndex(tempAllDays, (day) =>
        moment(`${day.year}-${day.month}-${day.date}`).isSame(selectedDate, "day")
      );
      if (selectedIndex >= 0) {
        const centerIndex = selectedIndex - Math.floor(4.5 / 2);
        sliderRef.current.slickGoTo(centerIndex < 0 ? 0 : centerIndex);
      }
    };

    if (deepDate) centerDate(deepDate);
    if (arrDate) centerDate(arrDate);
  }, [availableflightsDate, deepDate, arrDate]);

  const filteredDays = useMemo(() => {
    return allDays.filter((day) => {
      const formattedDate = moment(
        `${day.year}-${day.month}-${day.date}`
      ).format("YYYY-MM-DD");
      if (id === "inBound" && deepDate) {
        return moment(formattedDate).isSameOrAfter(deepDate, "day");
      }
      return true;
    });
  }, [allDays, deepDate, id, arrDate]);

  const renderedDays = useMemo(
    () =>
      map(filteredDays, (day, index) => {
        const formattedDate = moment(
          `${day.year}-${day.month}-${day.date}`
        ).format("YYYY-MM-DD");
        const isSelected =
          (id === "inBound" && arrDate === formattedDate) ||
          (id === "outBound" && deepDate === formattedDate);

        const isAvailable = day.price !== "0";
        const cardClassNames = [
          "cursor-pointer",
          isSelected && "!bg-[#21409A] !text-[#FFFFFF]",
          !isAvailable && "cursor-not-allowed",
        ]
          .filter(Boolean)
          .join(" ");

        return (
          <div key={index} style={{ padding: "0 15px" }}>
            <Card
              className={`!mr-1 !p-1 ${cardClassNames} ${
                day?.price === "0" ? "!cursor-not-allowed" : ""
              }`}
              onClick={async () => {
                if (isAvailable) {
                  dispatch(setShowPageLoader(true));
                  let formattedDate = moment(
                    `${day.year}-${day.month}-${day.date}`
                  ).format("YYYY-MM-DD");

                  try {
                    if (id === "outBound") {
                      await dispatch(
                        updateFlightSearchQuery({ deepDate: formattedDate })
                      );

                      if (
                        moment(formattedDate).isSameOrAfter(arrDate, "day")
                      ) {
                        const incrementedReturnDate = moment(
                          formattedDate
                        ).add(1, "days").format("YYYY-MM-DD");
                        const res = await dispatch(
                          fetchFlights(
                            createSearchPayload(
                              depCity,
                              arrCity,
                              formattedDate,
                              incrementedReturnDate,
                              PaxData
                            )
                          )
                        );
                        if (res?.data?.result?.isSuccess) {
                          dispatch(setShowPageLoader(false));
                        }
                      } else {
                        const res = await dispatch(
                          fetchFlights(
                            createSearchPayload(
                              depCity,
                              arrCity,
                              formattedDate,
                              arrDate,
                              PaxData
                            )
                          )
                        );
                        if (res?.data?.result?.isSuccess) {
                          dispatch(setShowPageLoader(false));
                        }
                      }
                    } else {
                      if (
                        moment(deepDate).isSameOrAfter(formattedDate, "day")
                      ) {
                        formattedDate = moment(deepDate)
                          .add(1, "days")
                          .format("YYYY-MM-DD");
                      }
                      await dispatch(
                        updateFlightSearchQuery({ arrDate: formattedDate })
                      );

                      const res = await dispatch(
                        fetchFlights(
                          createSearchPayload(
                            depCity,
                            arrCity,
                            deepDate,
                            formattedDate,
                            PaxData
                          )
                        )
                      );
                      if (res?.data?.result?.isSuccess) {
                        dispatch(setShowPageLoader(false));
                      }
                    }

                    if (sliderRef.current) {
                      const selectedIndex = findIndex(allDays, (day) =>
                        moment(
                          `${day.year}-${day.month}-${day.date}`
                        ).isSame(formattedDate, "day")
                      );
                      if (selectedIndex >= 0) {
                        const centerIndex = selectedIndex - Math.floor(4.5 / 2);
                        sliderRef.current.slickGoTo(
                          centerIndex < 0 ? 0 : centerIndex
                        );
                      }
                    }
                  } catch (error) {
                    dispatch(setShowPageLoader(false));
                    console.error("Error during flight search dispatch", error);
                  }
                }
              }}
            >
              <div style={{ textAlign: "center", padding: 0, margin: 0 }}>
                <p style={{ fontSize: "10px", padding: 0, margin: 0 }}>
                  {formatDate(day.date, day.month, day.year)}
                </p>
                <p style={{ fontSize: "13px", padding: 0, margin: 0 }}>
                  {isAvailable ? `â‚¬ ${day.price}` : "No flights"}
                </p>
              </div>
            </Card>
          </div>
        );
      }),
    [filteredDays, arrDate, deepDate, id, depCity, arrCity, PaxData]
  );

  if (isLoading) {
    return (
      <div className=" flex justify-center !pb-4">
        <Spinner animation="border" variant="primary" />
      </div>
    );
  }

  return (
    <Slider ref={sliderRef} {...settings} className="my-slider mb-3">
      {renderedDays}
    </Slider>
  );
};

export default DateScheduler;
