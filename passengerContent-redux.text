/* eslint-disable linebreak-style */
import { execute } from "../helpers/ApiInterface";

// Interface for Passenger Info
interface IPassengerInfo {
  passengerKey: string;
  paxType: string | number;
  title: string;
  firstName: string;
  surName: string;
  passportExpDate: string;
  passportIssuedDate: string;
  passportNo: string;
  dateOfBirth: string;
  gender: string;
  ffNo?: string;
  nationalityCode: string;
  passportCountryCode?: string;
  isPaxNameChangeable?: boolean;
  resultMsg?: string;
  associatedPaxKey?: string;
}

// Interface for Billing Info
interface IBillingInfo {
  address1?: string;
  address2?: string;
  cityCode?: string;
  countryCode?: string;
  postCode?: string;
  mobileNo?: string;
  email: string;
  isSendNotification?: boolean;
  ccEmail?: string;
  ccPhoneNo?: string;
}

// Interface for Send Passenger Data Request
interface ISendPassengerDataRequest {
  token: string;
  paxInfoId: number;
  passengersInfo: IPassengerInfo[] | any;
  billingInfo: IBillingInfo;
}

// Interface for API Response
interface IApiResponse {
  result: {
    isSuccess: boolean;
    msgs: Array<any>;
  };
  flightInfo: Array<any>;
  passengersInfo: Array<any>;
  flightAddon: Array<any>;
  reservationInfo: Array<any>;
}

// Action Types
export const SEND_PASSENGER_DATA_SUCCESS = 'booking/SEND_PASSENGER_DATA_SUCCESS';
export const SEND_PASSENGER_DATA_FAILURE = 'booking/SEND_PASSENGER_DATA_FAILURE';

// Thunk Action Creator for Sending Passenger Data
export const sendPassengerData = (passengerData: ISendPassengerDataRequest) => async (dispatch: Function) => {
  try {
    // Make API request
    const res = await execute<IApiResponse>(
      'POST',
      'api/booking/passengers',
      {
        token: passengerData.token,
        paxInfoId: passengerData.paxInfoId,
        passengersInfo: passengerData.passengersInfo,
        billingInfo: passengerData.billingInfo,
      }
    );

    const data = res.data as IApiResponse;
    console.log(data, 'passengerData');

    // Check success status and dispatch appropriate action
    const responseData = {
      status: data.result.isSuccess ? 'success' : 'failed',
      message: data.result.msgs || [],
    };

    dispatch({
      type: SEND_PASSENGER_DATA_SUCCESS,
      data: responseData,
      isFetching: false,
    });
  } catch (error) {
    console.error("Failed to send passenger data", error);

    // Dispatch failure action if API call fails
    dispatch({
      type: SEND_PASSENGER_DATA_FAILURE,
      error: error.message || "Something went wrong",
      isFetching: false,
    });
  }
};
