/* eslint-disable no-unused-expressions */
/* eslint-disable no-shadow */
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable linebreak-style */
import React, { useState, Fragment, useEffect } from 'react';
import { connect } from 'react-redux';
import {
  Row, Col, Button, Modal, Nav, Tab,
  Accordion, Form, Alert, FormLabel,
  Dropdown, Spinner, Table,
} from 'react-bootstrap';
import moment from 'moment';
import Cookies from 'js-cookie';
import * as Scroll from 'react-scroll';
import Cleave from 'cleave.js/react';
import { BounceLoader } from 'react-spinners';
import serialize from 'form-serialize';
import { useTranslation } from 'react-i18next';
import {
  map, isEmpty, isNull, groupBy,
  // find,
  // filter,
} from 'lodash';
import { IAppState } from '../../redux/initialState';
import { getCheckinFlight, setCheckinSearch } from '../../redux/checkIn.redux';
import {
  userLogin, userRegistration, CheckUserlogin, authConnect, resetSignupDetails, // loginAsGuest,
  userSocialRegistration, setPaxInfoUpdatdData, logout,
} from '../../redux/auth.redux';
import { resetVoucher } from '../../redux/payment.redux';
import {
  updatePaxDetails, deleteProfile, changePassword, forgotPassword,
  changeEmail, addPassengerDoc, addCompanion, updateCompanion, getpaxDetails,
  AddBookingToProfile, socialMediaSignup,
} from '../../redux/profile.redux';
import styles from './styles.scss';
// import FoDropDown from '../FlyoneSelector';
import {
  getformInfo, getAirportNameByCode, formatCurrency, getB2BCookie,
} from '../../helpers/utilities'; // getAirportNameByCode
import {
  CURRENT_LANG, DEFAULT_CURRENCY_CODE, ERROR_CODE,
  REFUND_TYPE, CANCEL_ERROR_CODE, OAUTH_CLIENT_REDIRECT_URI, IS_OAUTH_LOGIN, WORKFLOW,
  SOCIAL_USERINFO, ISUSER_LOGGED, USER_DATA, WORKFLOW_TYPE,
} from '../../constants/common';
import { fetchCountryName } from '../../redux/routes.redux';
import mobileCodes from '../../constants/mobileCode';
import i18next from '../../i18n';
// import { disabled } from '../Addons/styles.scss';
import BundleList from '../../constants/fareBundleListNew';
import CheckinSaveData from '../CheckIn/CheckinSaveData';
import stylesPanel from '../SidePanel/styles.scss';

const { Router } = require('../../next/router');

const { scroller } = Scroll;

function ModalContent(props: any) {
  const {
    modalBody, dispatch, checkinFlowProps, fromCMS, onHide,
    onContinue, changePaxPriceInfo, userData, onClose, passenger, hndlPrcslctmodal,
    modData, flight, handlePriceSlct, exchangeRate, selectedCurrencyCode, setSelectedFare, handlePriceSelection
  } = props;
  let ModalBodyContent: any = '';
  switch (modalBody) {
    case 'SeatSuggestion':
      ModalBodyContent = (
        <SeatSelection onClose={onClose} onContinue={onContinue} passenger={passenger} rows={modData} flight={flight} />
      );
      break;
    case 'invalidDateSelection':
      ModalBodyContent = (
        <InvalidDateSelectionModalbody
          onHide={onHide}
        />
      );
      break;
    case 'invalidB2BProfile':
      ModalBodyContent = <InvalidB2BProfile />;
      break;
    case 'addCompanion': {
      const { modData, countryList, loaderAction } = props;
      ModalBodyContent = (
        <AddCompanionModalbody
          dispatch={dispatch}
          profData={modData}
          onHide={onHide}
          countryList={countryList}
          loaderEnable={loaderAction}
        />
      );
    }
      break;
    case 'freeBg': {
      const { modData, onHide } = props;
      ModalBodyContent = <SmallBagMod companion={modData} onHide={onHide} />;
    }
      break;
    case 'ConfirmData': {
      const {
        onSelectStep,
        setIsCallApi,
        handleCheckinSaveModelShow,
        travelDocDetail,
      } = props;
      ModalBodyContent = (
        <div className={stylesPanel.sidePanelContainer}>
          <CheckinSaveData
            onSelectStep={onSelectStep}
            setIsCallApi={setIsCallApi}
            handleCheckinSaveModelShow={handleCheckinSaveModelShow}
            dispatch={dispatch}
            travelDocDetail={travelDocDetail}
          />
        </div>
      );
    }
      break;


    case 'leaveMessageModal': {
      const { onHide } = props;
      userData !== null ? ModalBodyContent = <LeaveMessageModal firstName={userData.firstName} onHide={onHide} /> : ModalBodyContent = <LeaveMessageModal firstName="" onHide={onHide} />;
    }
      break;
    case 'ShowCompanion': {
      const { modData } = props;
      ModalBodyContent = <ShowCompanionModalbody companion={modData} />;
    }
      break;
    case 'ShowVoucherList': {
      const { modData, setselectdVoucher } = props;
      ModalBodyContent = (
        <VoucherListModal
          dispatch={dispatch}
          voucherInfo={modData}
          setselectdVoucher={setselectdVoucher}
        />
      );
    }
      break;
    case 'ShowAccontStmnt': {
      const { modData } = props;
      ModalBodyContent = <AccountStatemntModal accData={modData} key="ShowAccontStmnt" />;
    }
      break;
    case 'ShowDocument': {
      const { modData } = props;
      ModalBodyContent = <ShowDocumentDetail doc={modData} />;
    }
      break;
    case 'yourProfile': {
      const { modData, countryList, loaderAction } = props;
      ModalBodyContent = (
        <YourProfileModalbody
          dispatch={dispatch}
          profData={modData}
          onHide={onHide}
          countryList={countryList}
          loaderEnable={loaderAction}
          key="yourProfile"
        />
      );
    }
      break;
    case 'EditCmp': {
      const { modData, countryList, loaderAction } = props;
      ModalBodyContent = (
        <EditCmpModalbody
          dispatch={dispatch}
          profData={modData}
          onHide={onHide}
          countryList={countryList}
          loaderEnable={loaderAction}
        />
      );
    }
      break;
    case 'FindMybookingCheckin':
      ModalBodyContent = (
        <FindMybookingCheckinModalBody
          setModalTitle={props.setModalTitle}
          setModalSize={props.setModalSize}
          checkinFlowProps={checkinFlowProps}
          fromCMS={fromCMS}
          dispatch={dispatch}
          routes={props.routes}
          ip={props.ipAddress}
          userAgent={props.userAgent}
          selectedCurrencyCode={props.selectedCurrencyCode}
          userData={userData}
        />
      );
      break;
    case 'ChooseCancelFlight': {
      const { modData } = props;
      ModalBodyContent = (
        <ChooseCancelModalBody
          setModalTitle={props.setModalTitle}
          setModalSize={props.setModalSize}
          flightInfo={modData}
          dispatch={dispatch}
          routes={props.routes}
          onContinue={props.onContinue}
        />
      );
    }
      break;
    case 'FindMybookingModal':
      ModalBodyContent = (
        <FindMybookingTabModalBody
          setModalTitle={props.setModalTitle}
          setModalSize={props.setModalSize}
          checkinFlowProps={checkinFlowProps}
          fromCMS={fromCMS}
          dispatch={dispatch}
          routes={props.routes}
          ip={props.ipAddress}
          userAgent={props.userAgent}
          selectedCurrencyCode={props.selectedCurrencyCode}
          userData={userData}
        />
      );
      break;
    case 'FindMybooking':
      ModalBodyContent = <FindMybookingModalbody onContinue={onContinue} />;
      break;
    case 'AddbookingModal': {
      const { modData } = props;
      ModalBodyContent = <AddbookingModalbody userInfo={modData} dispatch={dispatch} />;
    }
      break;
    case 'SubscribeNewsletter':
      ModalBodyContent = <SubscribeNewsletterModalbody />;
      break;
    case 'CancelModalSuccess':
      ModalBodyContent = <BookingCancelSuccess onContinue={onContinue} />;
      break;
    case 'ModalActionSuccess': {
      const { modData } = props;
      ModalBodyContent = <ModalActionSuccess onContinue={onContinue} sucsMsg={modData} />;
    }
      break;
    case 'SocialMediaRegistration': {
      const { modData, isPrefill, socialLoginInfo } = props;
      ModalBodyContent = (
        <SocialMediaRegistration
          onContinue={onContinue}
          sucsMsg={modData}
          isPrefill={isPrefill}
          socialLoginInfo={socialLoginInfo}
          dispatch={dispatch}
        />
      );
    }
      break;
    case 'SignIn':
    case 'SignUp': {
      const {
        selectedTab, signupDetails, isUserRegd, proceedAsGuest,
        isSocialLogin, socialInfomation, actionState,
        isLoggedInFailed, loginFailureText,
        countryList, handleForgotPassword, handelSocialSignupGendershow,
        isPrefill, socialLoginInfo,
      } = props;
      ModalBodyContent = (
        <SignUpLgoinModalbody
          dispatch={dispatch}
          selectedTabL={selectedTab}
          proceedAsGuest={proceedAsGuest}
          signupData={signupDetails}
          isRegd={isUserRegd}
          isLoggedInFailed={isLoggedInFailed}
          loginFailureText={loginFailureText}
          countryList={countryList}
          onHide={onHide}
          handleForgotPassword={handleForgotPassword}
          handelSocialSignupGendershow={handelSocialSignupGendershow}
          isSocialLogin={isSocialLogin}
          socialInfomation={socialInfomation}
          actionState={actionState}
          isPrefill={isPrefill}
          socialLoginInfo={socialLoginInfo}
        // setLoginSelTabId={setLoginSelTabId}
        // setIsPrefill={setIsPrefill}
        />
      );
    }
      break;
    case 'ForgotPassword':
      ModalBodyContent = (
        <ForgotPasswordModalBody
          {...props}
          dispatch={dispatch}
          onHide={onHide}
        />
      );
      break;
    case 'ResetPassword':
      ModalBodyContent = <ResetPasswordModal />;
      break;
    case 'ChangeEmail':
      ModalBodyContent = <ChangeEmailModal {...props} />;
      break;
    case 'ChangePassword':
      ModalBodyContent = <ChangePasswordModal {...props} />;
      break;
    case 'SocialLogin': {
      const {
        handelSocialSignupGendershow,
      } = props;
      ModalBodyContent = (
        <SocialLoginModal
          {...props}
          onHide={onHide}
          handelSocialSignupGendershow={handelSocialSignupGendershow}
        />
      );
    }
      break;
    case 'PaymentFailure': {
      const { onClose } = props;
      ModalBodyContent = <PaymentFailureModalbody onClose={onClose} />;
    }
      break;
    case 'BookingFailure': {
      const { onClose, modData } = props;
      ModalBodyContent = <BookingFailureModalbody failureReason={modData} onClose={onClose} />;
    }
      break;
    case 'ChangeName': {
      const { exchangeRate, selectedCurrencyCode } = props;
      ModalBodyContent = (
        <ChangeNameModalbody
          exchangeRate={exchangeRate}
          selectedCurrencyCode={selectedCurrencyCode}
          onContinue={onContinue}
          changePaxPriceInfo={changePaxPriceInfo}
        />
      );
    }
      break;
    case 'ChangeFlight': {
      const { priceChange, exchangeRate, selectedCurrencyCode } = props;
      ModalBodyContent = (
        <ChangeFlightModalbody
          exchangeRate={exchangeRate}
          selectedCurrencyCode={selectedCurrencyCode}
          onHide={onHide}
          onContinue={onContinue}
          priceChange={priceChange}
        />
      );
    }
      break;
    case 'MakeChanges': {
      const {
        isChangeFlightAllowed, isOtherAgentPNR, isCancelFlightAllowed, isChangePaxAllowed, multipleFOP,
      } = props;
      ModalBodyContent = (
        <MakeChangesModalbody
          isChangeFlightAllowed={isChangeFlightAllowed}
          isCancelFlightAllowed={isCancelFlightAllowed}
          isChangePaxAllowed={isChangePaxAllowed}
          isOtherAgentPNR={isOtherAgentPNR}
          onContinue={props.onContinue}
          multipleFOP={multipleFOP}
        />
      );
    }
      break;
    case 'RemoveModal': {
      const {
        removeModalIcon, removeModalTitle, removeModalCnt, removeModalLinkyes, isItemDeleted,
      } = props;
      ModalBodyContent = (
        <RemoveModalbody
          onHide={onHide}
          isItemDeleted={isItemDeleted}
          {...{
            removeModalIcon, removeModalTitle, removeModalCnt, removeModalLinkyes,
          }}
        />
      );
    }
      break;
    case 'ResetPswdRdrtModal': {
      const {
        removeModalIcon, removeModalTitle, removeModalCnt,
      } = props;
      ModalBodyContent = (
        <ResetPswrdRedirect
          onHide={onHide}
          {...{
            removeModalIcon, removeModalTitle, removeModalCnt,
          }}
        />
      );
    }
      break;
    case 'CancelFlight': {
      const {
        currency, modData, routes, cancelFlightKeys,
        exchangeRate, selectedCurrencyCode, refundData,
      } = props;
      ModalBodyContent = (
        <CancelFlightModal
          refundData={refundData}
          CancelFlightKeys={cancelFlightKeys}
          PNRData={modData}
          routes={routes}
          currency={currency}
          onContinue={onContinue}
          onHide={onHide}
          exchangeRate={exchangeRate}
          selectedCurrencyCode={selectedCurrencyCode}
        />
      );
    }
      break;
    case 'CancelModalFailed': {
      const { modData } = props;
      ModalBodyContent = <CancelFlightFailedModal result={modData} onHide={onHide} />;
    }

      break;
    case 'WelcomeBack': {
      const { isLoggingIn, modData } = props;
      ModalBodyContent = <WelcomeBackModal isLoggingIn={isLoggingIn} profData={modData} />;
    }
      break;
    case 'addTravelDoc':
      ModalBodyContent = <AddTravelDoc {...props} key="addtravelDoc" />;
      // ModalBodyContent = <ShowDocumentDetail doc={modData} />;
      break;
    case 'SelectionError': {
      const { SelectionError, countryList } = props;
      ModalBodyContent = (
        <SeatBaggageSelectionError
          SelectionError={SelectionError}
          onHide={onHide}
          onContinue={onContinue}
          countryList={countryList}
        />
      );
    }
      break;
    case 'SessionEnd': {
      const { returnTo, userData } = props;
      ModalBodyContent = <SessionEndModalbody dispatch={dispatch} returnTo={returnTo} userData={userData} />;
    }
      break;
    case 'UpgradeFare': {
      const { modData } = props;
      ModalBodyContent = (
        <Farechange
          flightKey={modData.flightKey}
          fareInfo={modData.fareInfo}
          cabinClassCode={modData.cabinClassCode}
          cashbackPriceInfo={modData.cashbackPriceInfo}
          brandSel={modData.brndSel}
          showPrice={modData.showPrice}
          onHide={onHide}
          brndPrc={modData.brndPrce}
          brndUpPrce={modData.brndUpPrce}
          prceSelct={handlePriceSlct}
          handlePriceSelection={handlePriceSelection}
          hndlPrcslctmodal={hndlPrcslctmodal}
          clubSelected={modData.clubSelected}
          exchangeRate={exchangeRate}
          selectedCurrencyCode={selectedCurrencyCode}
          setSelectedFare={setSelectedFare}
        />
      );
    }
      break;
    case 'SessionExpiresIN': {
      const { returnTo, modData } = props;
      ModalBodyContent = (
        <SessionExpiresINModalbody
          modData={modData}
          dispatch={dispatch}
          returnTo={returnTo}
          onHide={onHide}
        />
      );
    }
      break;
    case 'FlightSelectionError': {
      const { modData } = props;
      ModalBodyContent = <FlightSelectionError modData={modData} onHide={onHide} />;
    }
      break;
    case 'AddonAvailabilityError':
    case 'AddonSelectionError':
    case 'CheckinAddonAvailabilityError': {
      const { modData, modalTitle, onClose } = props;
      ModalBodyContent = (
        <AddonSelectionError
          modalBody={modalBody}
          modalTitle={modalTitle}
          errorMsgs={modData}
          onClose={onClose}
          onHide={onHide}
        />
      );
    }
      break;
    case 'PaymentValidation': ModalBodyContent = <PaymentValidation onHide={onHide} />;
      break;
    case 'SearchFormInvalid': ModalBodyContent = <SearchFormInvalid onHide={onHide} />;
      break;
    case 'AddSameBaggage':
      ModalBodyContent = (
        <AddSameBaggageModalbody
          onHide={onHide}
          onContinue={onContinue}
        />
      );
      break;
    case 'ForgotPassSentEmail':
      ModalBodyContent = (
        <ForgotPassSentEmailModalbody />
      );
      break;
    case 'ErrorMessage': {
      const { modData, modalTitle, onClose } = props;
      ModalBodyContent = (
        <ErrorMessage
          modalBody={modalBody}
          modalTitle={modalTitle}
          errorMsgs={modData}
          onClose={onClose}
          onHide={onHide}
        />
      );
    }
      break;
    case 'ConfirmPaxDetails': {
      const { modData, modalTitle, onClose } = props;
      ModalBodyContent = (
        <ConfirmPaxDetails
          modalBody={modalBody}
          modalTitle={modalTitle}
          paxDetails={modData}
          onContinue={onContinue}
          onClose={onClose}
        />
      );
    }
      break;
    case 'DownloadBPModal': {
      const { modData, modalTitle, onClose } = props;
      ModalBodyContent = (
        <DownloadBoadingPass
          modalBody={modalBody}
          modData={modData}
          modalTitle={modalTitle}
          onContinue={onContinue}
          onClose={onClose}
        />
      );
    }
      break;
    case '10Kg': {
      ModalBodyContent = (
        <Bag10Kg onhide={onHide} />
      );
    }
      break;
    case '20Kg': {
      ModalBodyContent = (
        <Bag20Kg onhide={onHide} />
      );
    }
      break;
    case '30Kg': {
      ModalBodyContent = (
        <Bag30Kg onhide={onHide} />
      );
    }
      break;
    case 'priorBg': {
      ModalBodyContent = (
        <PriortModl onhide={onHide} />
      );
    }
      break;
    default: ModalBodyContent = '';
  }
  return (ModalBodyContent);
}

const Bag10Kg = ({ onhide }: any) => (
  <>
    <div
      style={{
        fontSize: '25px', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
      }}
      onClick={() => onhide()}
    >
      x
    </div>
    <div className="row">
      <div className="col-sm-3">
        <i className={`${styles.imMedBg} ${styles.imgSmlkgInf}`} />
      </div>
      <div className="col-sm-9 mt-3">
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>Your checked-in Bag must be dropped off at the bag drop desk before entering security</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>You can add a Checked-in bag up to 2 hours before your flight scheduled departure time</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>The weight of checked pieces of baggage cannot be combined and each piece is considered as such.</p>
        </div>
      </div>
    </div>
  </>
);

const Bag20Kg = ({ onhide }: any) => (
  <>
    <div
      style={{
        fontSize: '25px', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
      }}
      onClick={() => onhide()}
    >
      x
    </div>
    <div className="row">
      <div className="col-sm-3">
        <i className={`${styles.imLgBg} ${styles.imgSmlkgInf}`} />
      </div>
      <div className="col-sm-9 mt-3">
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>Your checked-in Bag must be dropped off at the bag drop desk before entering security</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>You can add a Checked-in bag up to 2 hours before your flight scheduled departure time</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>The weight of checked pieces of baggage cannot be combined and each piece is considered as such.</p>
        </div>
      </div>
    </div>
  </>
);

const Bag30Kg = ({ onhide }: any) => (
  <>
    <div
      style={{
        fontSize: '25px', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
      }}
      onClick={() => onhide()}
    >
      x
    </div>
    <div className="row">
      <div className="col-sm-3">
        <i className={`${styles.imMxBg} ${styles.imgSmlkgInf}`} />
      </div>
      <div className="col-sm-9 mt-3">
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>Your checked-in Bag must be dropped off at the bag drop desk before entering security</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>You can add a Checked-in bag up to 2 hours before your flight scheduled departure time</p>
        </div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <i className={`${styles.imCheckIco} mt-1`} />
          <p style={{ marginBottom: '5px', fontSize: '14px', marginLeft: '5px' }}>The weight of checked pieces of baggage cannot be combined and each piece is considered as such.</p>
        </div>
      </div>
    </div>
  </>
);

export const LeaveMessageModal = ({ firstName, onHide }: any) => (
  <>
    <div className="dialog-wrapper">
      <div
        style={{
          fontSize: '25px', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
        }}
        onClick={() => onHide()}
      >
        x
      </div>
      <div className="dialog">
        <div className="top">
          <i className="fo-icon icon-fo-user" />
          {firstName !== '' ? (
            <b>
              <p>
                {' '}
                {firstName}
                , before you go... did you know?
              </p>
            </b>
          ) : <b><p>Before you go... did you know?</p></b>}
        </div>
        <div className="dialog-body">
          <div className="icon-box">
            <i className="leavemessageicon" />
          </div>
          <div className="dialog-content">
            <p style={{ fontSize: '14px' }}>
              Prices may increase the closer you are to the departure date.
              <br />
              Make sure you secure this price now!
              {' '}
            </p>
            <div className="dialog-button" onClick={() => onHide()}>
              I'LL FINISH MY BOOKING NOW!
            </div>
          </div>
        </div>
      </div>
    </div>
  </>
);

const PriortModl = ({ onhide }: any) => (
  <>
    <div
      style={{
        fontSize: '25px', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
      }}
      onClick={() => onhide()}
    >
      x
    </div>
    <div>
      <p className="m-0" style={{ fontSize: '18px', fontWeight: 600 }}>Cabin Bags</p>
      <p className="m-0 mb-3" style={{ fontSize: '14px' }}>Make sure your luggage does not exceed the dimensions 40x30x20 cm (backpack) and 50x40x25 cm (suitcase).</p>
    </div>
    <div className="row mb-3">
      <div className="col-sm-3">
        <p className="text-center" style={{ fontSize: '14px', fontWeight: 600 }}>Small Bagpack</p>
        <p
          className="p-0 m-1 text-center position-absolute"
          style={{
            fontSize: '15px', rotate: '270deg', left: '-15px', top: '100px',
          }}
        >
          40 cm
        </p>
        <div className="d-flex align-items-center position-relative justify-content-center">
          <div className={`px-2 ${styles.bagHeight} position-relative`}>
            <div className={`p-0 m-0 ${styles.bagWidth}`}>
              <i className="im-small1-bg" />
            </div>
            <p className="p-0 mt-1 mb-0 mx-0 text-center" style={{ fontSize: '15px' }}>25 cm</p>
          </div>
        </div>
      </div>
      <div className="col-sm-3">
        <div className="d-flex align-items-center position-relative justify-content-center">
          {/* <div className={`px-2 ${styles.bagHeight} position-relative`}>
              <div className={`p-0 m-0 ${styles.bagWidth}`}> */}
          <i className="im-small2-bg" />
          {/* </div>
            </div> */}
        </div>
      </div>
      {/* <div>
        <p>The backpack must fit under the seat in front of you.</p>
        </div> */}
      <div className="col-sm-3">
        <p className="text-center" style={{ fontSize: '14px', fontWeight: 600 }}>10 Kg cabin bag</p>
        <p
          className="p-0 m-1 text-center position-absolute"
          style={{
            fontSize: '15px', rotate: '270deg', left: '-15px', top: '100px',
          }}
        >
          40 cm
        </p>
        <div className="d-flex align-items-center position-relative justify-content-center">
          <div className={`px-2 ${styles.bagHeight} position-relative`}>
            <div className={`p-0 m-0 ${styles.bagWidth}`}>
              <i className={`${styles.imMedBg}  ${styles.imgSmlkgPrior}`} />
            </div>
            <p className="p-0 mt-1 mb-0 mx-0 text-center" style={{ fontSize: '15px' }}>25 cm</p>
          </div>
        </div>
      </div>
      <div className="col-sm-3">
        <div className="d-flex align-items-center position-relative justify-content-center">
          {/* <div className={`px-2 ${styles.bagHeight} position-relative`}>
              <div className={`p-0 m-0 ${styles.bagWidth}`}> */}
          <i className="im-upper-bg" />
          {/* </div>
            </div> */}
        </div>
      </div>
      {/* <div>
        <p>The suitcase must fit in the overhead compartment.</p>
        </div> */}
      <div className="row justify-content-center" style={{ width: '100%', margin: '10px 0px 0px 0px' }}>
        <div className="col-sm-6">
          {/* <i className="im-avail-white" /> */}
          <p className="col-sm-12 m-0 pl-2 p-1" style={{ background: '#e8e9ef' }}>The backpack must fit under the seat in front of you.</p>
        </div>
        <div className="col-sm-6">
          {/* <i className="im-avail-white" /> */}
          <p className="col-sm-12 m-0 pl-2 p-1" style={{ background: '#e8e9ef' }}>The suitcase must fit in the overhead compartment.</p>
        </div>
      </div>
    </div>
  </>
);

const SmallBagMod = (props: any) => {
  const { onHide } = props;
  return (
    <div>
      <p style={{
        fontSize: '20px', fontWeight: 500, display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0',
      }}
      >
        <span style={{ fontWeight: 700 }}>Small Bag</span>
        <small
          onClick={() => onHide()}
          style={{
            fontSize: '100%', cursor: 'pointer', position: 'absolute', right: '20px', top: '10px', lineHeight: '20px',
          }}
        >
          X
        </small>
      </p>
      <p style={{ fontSize: '12px', fontWeight: 500, color: 'black' }}>Make sure your backpack does not exceed the dimensions 40x30x20 cm. It must fit under the seat in front of you</p>
      <div className="row">
        <div className="col-sm-5 p-2 d-flex flex-column">
          <p className="text-center" style={{ fontSize: '14px', fontWeight: 600 }}>Small Bagpack</p>
          <div className="d-flex align-items-center position-relative justify-content-center">
            <p className="p-0 mr-2 text-center position-absolute" style={{ fontSize: '15px', rotate: '270deg', left: '-25px' }}>40 cm</p>
            <div className={`px-2 ${styles.bagHeight} position-relative`}>
              <div className={`p-0 m-0 ${styles.bagWidth}`}>
                <i className="im-small1-bg" />
              </div>
              <p className="p-0 mt-1 mb-0 mx-0 text-center" style={{ fontSize: '15px' }}>25 cm</p>
            </div>
          </div>
        </div>
        <div className="col-sm-7 p-2 d-flex flex-column">
          <div className="d-flex align-items-center position-relative justify-content-center">
            {/* <div className={`px-2 ${styles.bagHeight} position-relative`}> */}
            {/* <div className={`p-0 m-0 ${styles.bagWidth}`}> */}
            <i className="im-small-bg-pop" />
            {/* </div> */}
            {/* </div> */}
          </div>
        </div>
      </div>
      <div>
        <p
          style={{
            fontSize: '10.5px', border: '2px solid rgb(136 144 167)', background: 'rgb(224 230 247)', borderRadius: '1px',
          }}
          className="p-1 mt-4"
        >
          <i className="im-alert-icon" />
          If you bring a second bag or if your bag is big to fit under the seat, you will be charged a fee of up to 70€ or local currency equivalent at the boarding gate.
        </p>
      </div>
    </div>
  );
};
const SeatSelection = (props: any) => {
  const {
    onClose, passenger, rows, onContinue, flight,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="autoseats">
      <h6>
        <span>{`${flight.depCityName}`}</span>
        {' '}
        <div />
        {' '}
        <span>{`${flight.arrCityName}`}</span>
      </h6>
      {passenger.map((pass: any) => (
        <div className="seat-selection">
          {/* <span>{pass.passengerKey}</span> <span>{rows[pass.passengerKey][0].seatNumber}</span>              */}
          <span>
            {pass.passengerKey.slice(0, pass.passengerKey.length - 1)}
            {' '}
            {pass.passengerKey[pass.passengerKey.length - 1]}
          </span>
          {' '}
          {' - '}
          {' '}
          <span>{rows[pass.passengerKey][0].seatNumber}</span>
        </div>
      ))}
      <div className="seat-selection-buttons">
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} onClick={() => { onContinue(rows, false); }}>{t('SeatPage.lblAcceptAutoseatAssignment')}</Button>
        <Button type="button" className="dontaccept" onClick={() => { onClose(rows, false); }}>{t('SeatPage.lblRejectAutoseatAssignment')}</Button>
      </div>
    </div>
  );
};

const Farechange = (props: any) => {
  const { t } = useTranslation();
  const {
    brandSel, onHide, prceSelct, brndPrc, brndUpPrce, clubSelected, setSelectedFare, handlePriceSelection,
    flightKey, fareInfo, cabinClassCode, cashbackPriceInfo, showPrice, hndlPrcslctmodal,
    // exchangeRate, selectedCurrencyCode
  } = props;
  console.log(brndUpPrce, 'hhahahahaha');
console.log(cabinClassCode, 'kakkakaakak');
  console.log(clubSelected, flightKey, fareInfo.flightOfferKey, cabinClassCode, 'withDiscount', cashbackPriceInfo,'viviviviviviv')
  console.log(fareInfo.flightOfferKey, flightKey, 'showPriceshowPrice', hndlPrcslctmodal, clubSelected,cabinClassCode, prceSelct);
  console.log(brndPrc, brndUpPrce, 'showPriceshowPrice', cashbackPriceInfo, handlePriceSelection);
  const { Standard, Loyal, Advanced } = BundleList;
  const upGreatedPrice = (brndUpPrce.priceInfo.total - brndPrc.priceInfo.total).toFixed(2);
  const brndTitle: any = {
    ST: ['Standard', 'Loyal'],
    LO: ['Loyal', 'Advanced'],
  };
  const brandSlct: any = {
    ST: [Standard, Loyal],
    LO: [Loyal, Advanced],
  };

  const brndIco: any = {
    ST: ['im-standard-new-fare', 'im-loyal-up'],
    LO: ['im-loyal-new-fare', 'im-advanced-up'],
  };

  return (
    <>
      <div className={`${styles.brndModHead} d-flex justify-content-between`}>
        <p>
          {`Upgrade to ${brndTitle[brandSel][1]} Fare for only`}
          &nbsp;
          <span className="brnd-up-fare">
            € +
            {
              // formatCurrency(
              //   (adultFare.amount + adultFare.tax - totPerPaxDiscAmount),
              //   currencyCode,
              //   exchangeRate,
              //   selectedCurrencyCode,
              // )
              upGreatedPrice
            }
          </span>
        </p>
        <span onClick={onHide} className="brnd-up-cls">x</span>
      </div>
      <p className={`row ${styles.brndAvltd}`}>
        <div className="col-sm-6" />
        <div className="col-sm-6 row">
          <div className="col-sm-5 d-flex justify-content-center py-2 mr-2">
            <i className={brndIco[brandSel][0]} />
            {brndTitle[brandSel][0]}
          </div>
          <div className="col-sm-5 d-flex justify-content-center py-2">
            <i className={brndIco[brandSel][1]} />
            {brndTitle[brandSel][1]}
          </div>
        </div>
      </p>
      <ul className={styles.brndFacList}>
        {
          map(brandSlct[brandSel][0], (bList: any, index: number) => {
            const {
              name, hasIcon, iconName, size, isAvail,
            } = bList;
            let fareList: any = '';
            fareList = (
              <p className="row mb-0">
                <div className="col-sm-6 fac-inf">
                  <i className={`${styles.imgIconXs} ${iconName} size-${size} py-2 mr-1`} />
                  <strong className="py-2">{t(name)}</strong>
                </div>
                <div className="col-sm-6 row fac-avl">
                  <strong className={`col-sm-5 d-flex justify-content-center mr-2 align-items-center size-sm py-2 ${styles.brandoptin}`}>
                    {isAvail ? <i className="im-avail" /> : '$'}
                  </strong>
                  <strong className={`col-sm-5 d-flex justify-content-center mr-1 align-items-center size-sm py-2 ${styles.brandoptin}`}>
                    {brandSlct[brandSel][1][index].isAvail ? <i className="im-avail" /> : '$'}
                  </strong>
                </div>
              </p>
            );
            return (
              <li key={`-${index}`} className={`${hasIcon ? 'hasIcon' : ''} p-0`}>
                {fareList}
              </li>
            );
          })
        }
      </ul>
      <p className="row mt-3 m-1 d-flex justify-content-end">
        <div className="col-sm-8 row">
          {
            showPrice === 'withDiscount' ? (
              <>
              <div className="col-sm-6 d-flex justify-content-center align-items-center current-brand" onClick={() => handlePriceSelection(clubSelected, flightKey, fareInfo.flightOfferKey, cabinClassCode, 'withDiscount', cashbackPriceInfo)}>
                {'Continue with'}
                <br />
                {`${brndTitle[brandSel][0]} Fare`}
              </div>
              <Button style={{ lineHeight: '1', fontSize: '13px' }} className="col-sm-6" onClick={() => { handlePriceSelection(clubSelected, brndUpPrce.flightKeyRefs[0], brndUpPrce.flightOfferKey, brndUpPrce.cabin[0].cabinClassCode, 'withDiscount', brndUpPrce.priceInfo.cashbackPriceInfo); setSelectedFare('LO'); }}>{`Select ${brndTitle[brandSel][1]} Fare`}</Button>
              </>
            ) : (
              <>
              <div className="col-sm-6 d-flex justify-content-center align-items-center current-brand" onClick={() => handlePriceSelection(clubSelected, flightKey, fareInfo.flightOfferKey, cabinClassCode, 'withoutDiscount', cashbackPriceInfo)}>
                {'Continue with'}
                <br />
                {`${brndTitle[brandSel][0]} Fare`}
              </div>
              <Button style={{ lineHeight: '1', fontSize: '13px' }} className="col-sm-6" onClick={() => { handlePriceSelection(clubSelected, brndUpPrce.flightKeyRefs[0], brndUpPrce.flightOfferKey, brndUpPrce.cabin[0].cabinClassCode, 'withoutDiscount', brndUpPrce.priceInfo.cashbackPriceInfo); setSelectedFare('LO'); }}>{`Select ${brndTitle[brandSel][1]} Fare`}</Button>
              </>
            )
          }
        </div>
      </p>
    </>
  );
};

function InvalidDateSelectionModalbody(props: any) {
  const { t } = useTranslation();
  const { onHide } = props;
  return (
    <>
      <div>
        <h2 className="text-center">{t('NetWorkMap.lblInvldDateSlctn')}</h2>
        <p>{t('NetWorkMap.lblDptFlgtDtNotExced')}</p>
        <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt20} ${styles.mb30}`}>
          <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} onClick={onHide} block>
            {t('NetWorkMap.lblChange')}
          </Button>
        </div>
      </div>
    </>
  );
}

function ConfirmPaxDetails(props: any) {
  const {
    paxDetails, modalTitle, onContinue, onClose,
  } = props;
  const { t } = useTranslation();
  return (
    <>
      <div>
        <h2 className="text-center">{t(modalTitle)}</h2>
        {
          map(groupBy(paxDetails, 'paxType'), (pax: any, key: string) => (
            <>
              <div className={`${styles.boxContent} ${styles.mt10} ${styles.paymentConfirmation}`}>
                <div className={`${styles.boxHeader} ${styles.noPadTopBot} ${styles.boxListHead}`}>
                  <ul className={styles.textBold}>
                    <li>
                      <i className={`${styles.foIcon} ${styles.iconFoUser2} ${styles.roundIcon}`} />
                      &nbsp;
                      {key}
                    </li>
                  </ul>
                </div>
                <div className={`${styles.boxBody} ${styles.boxListBody}`}>
                  {
                    map(pax, p => (
                      <ul>
                        <li>{p.passengerKey}</li>
                        <li>{`${p.title} ${p.firstName} ${p.lastName}`}</li>
                      </ul>
                    ))
                  }
                </div>
              </div>
            </>
          ))
        }
        <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexJustifySpacebetween}`}>
          <Button
            className={`${styles.btn} ${styles.btnContinue}`}
            onClick={onClose}
          >
            {t('FlightResult.lblEdit')}
          </Button>
          <Button
            className={`${styles.btn} ${styles.btnContinue}`}
            onClick={onContinue}
          >
            {t('SeatPage.lblCnfrm')}
          </Button>
        </Row>
      </div>
    </>
  );
}

function DownloadBoadingPass(props: any) {
  const { modData } = props;
  const { t } = useTranslation();
  const { files, pax } = modData;
  let basePath: string;
  switch (process.env.API_ENV) {
    case 'production': basePath = 'flyonepdf';
      break;
    default: basePath = 'flyonepdf-preprod';
  }
  return (
    <div className="downldBpPax">
      {
        !isEmpty(files) && map(files, (vlist: any, index: number) => {
          const [paxName] = pax.filter((plist: any) => plist.paxKey === vlist.passengerKey);
          const fileName = `https://storage.googleapis.com/${basePath}/${vlist.fileName}`;
          return (
            <ul key={`${vlist.passengerKey}_${index}`}>
              <li>
                <i className="fo-icon icon-fo-user2 round-icon" />
                {!isEmpty(paxName) ? paxName.contactName : vlist.passengerKey}
              </li>
              <li>
                <a
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn btn-primary"
                  href={fileName}
                  download
                >
                  {t('BookingOverview.lblDwnladBPText')}
                </a>
              </li>
            </ul>
          );
        })
      }
    </div>
  );
}

function AccountStatemntModal(props: any) {
  const { accData } = props;
  const { t } = useTranslation();
  return (
    <Table className="custom-table1" responsive>
      <thead>
        <tr>
          <th>
            {t('PaymentPP.lblTransactn')}
          </th>
          <th>
            {t('PaymentPP.lblDate')}
          </th>
          <th>
            {t('PaymentPP.lblAmount')}
          </th>
          <th>
            {t('PaymentPP.lblCurrency')}
          </th>
          <th>
            {t('PaymentPP.lblOrgnlAmount')}
          </th>
          <th>
            {t('PaymentPP.lblOrgnlCurrncy')}
          </th>
        </tr>
      </thead>
      <tbody>
        {
          !isNull(accData) && accData.length > 0
            ? map(accData, (vlist: any, index: number) => {
              const {
                amount, createdDate, currency, originalAmount,
                originalCurrency, reference, note,
              } = vlist;
              return (
                <tr className="td-txt-blue" key={`acc_${reference}_${index}`}>
                  <td>
                    {reference !== '' ? reference : '-'}
                    {' '}
                    {!isEmpty(note) && note.toUpperCase() === 'CASHBACK' ? '(Cashback)' : ''}
                    {' '}
                  </td>
                  <td>{typeof createdDate !== 'undefined' ? moment(createdDate).format('DD MMM YYYY') : '-'}</td>
                  <td>{amount}</td>
                  <td>{currency}</td>
                  <td>{originalAmount}</td>
                  <td>{originalCurrency}</td>
                </tr>
              );
            })
            : ''
        }
      </tbody>
    </Table>
  );
}
function VoucherListModal(props: any) {
  const { voucherInfo, setselectdVoucher, dispatch } = props;
  const { voucherHistory: voucherData, isProfile } = voucherInfo;
  const { t } = useTranslation();
  const voucherStatus = (status: any) => {
    let promoStatTxt = '';
    switch (status) {
      case 0: promoStatTxt = 'Voucher.lblErrInvalid';
        break;
      case 1: promoStatTxt = 'Voucher.lblValid';
        break;
      case 2: promoStatTxt = 'Voucher.lblRedeemed';
        break;
      case 4: promoStatTxt = 'Voucher.lblExpired';
        break;
      case 6: case 7: promoStatTxt = 'Voucher.lblErrUnRedeem';
        break;
      default: promoStatTxt = '';
    }
    return promoStatTxt;
  };
  const isExpiredDate = (dateText: string) => moment(dateText).isBefore(moment(), 'day');
  // const isInValidDate = (dateText: string) => {
  //   return dateText === '' || includes(['0001-01-01', '9999-12-31', '1900-01-01'], dateText);
  // };

  const onSelectVoucher = (vCode: any) => {
    dispatch(resetVoucher()).then(() => {
      setselectdVoucher(vCode);
    });
  };

  return (
    <Table className="custom-table1" responsive>
      <thead>
        <tr>
          <th>
            {t('PaymentPP.lblVouchrRefrnc')}
          </th>
          <th>
            {t('PaymentPP.lblAmountAvail')}
          </th>
          <th>
            {t('PaymentPP.lblCurrency')}
          </th>
          <th>
            {t('PaymentPP.lblSatus')}
          </th>
          <th>
            {t('PaymentPP.lblCreatnDate')}
          </th>
          <th>
            {t('PaymentPP.lblExpireDate')}
          </th>
          {
            isProfile
              ? <Fragment />
              : (
                <th />
              )
          }
        </tr>
      </thead>
      <tbody>
        {
          !isNull(voucherData) && voucherData.length > 0
            ? map(voucherData, (vlist: any) => {
              const {
                availableAmount, currencyCode, voucherCode, expiryDate,
                createdDate,
                status,
              } = vlist;
              return (
                <tr className="td-txt-blue" key={`${voucherCode}_${availableAmount}`}>
                  <td>{voucherCode}</td>
                  <td>{availableAmount}</td>
                  <td>{currencyCode}</td>
                  <td>{t(voucherStatus(status))}</td>
                  <td>{typeof createdDate !== 'undefined' ? moment(createdDate).format('DD MMM YYYY') : '-'}</td>
                  <td>{typeof expiryDate !== 'undefined' ? moment(expiryDate).format('DD MMM YYYY') : '-'}</td>
                  {
                    isProfile
                      ? <Fragment />
                      : (
                        <td>
                          <Button className={`${isExpiredDate(expiryDate) ? 'btn-disabled' : ''} useVouvherbtn`} size="sm" disabled={isExpiredDate(expiryDate)} onClick={() => onSelectVoucher(voucherCode)}>use this</Button>
                        </td>
                      )
                  }
                </tr>
              );
            })
            : ''
        }
      </tbody>
    </Table>
  );
}

function InvalidB2BProfile() {
  const { t } = useTranslation();
  const redirect = () => {
    window.location.href = `${process.env.AGENT_ENTRY_PATH}`;
  };
  return (
    <div className="sessionend_modal">
      <p>Login Invalid</p>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt20} ${styles.mb30}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} onClick={redirect} block>{t('FlightResult.lblRetry')}</Button>
      </div>
    </div>
  );
}

function CompanionForm(props: any) {
  const {
    companionType: CTYPE, paxInfoID, dispatch, onHide, countryList,
    loaderEnable, personKey,
  } = props;
  const [title, settitle] = useState('');
  const [gender, setGender] = useState('');
  const [fname, setName] = useState('');
  const [lname, setLName] = useState('');
  const [cdob, setCdob] = useState('');
  const [cdocn, setCdocn] = useState('');
  const [cdoce, setCdoce] = useState('');
  const { t } = useTranslation();
  const [validated, setValidated] = useState(false);
  const [nationality, setaNationalaity] = useState('');
  const [inationality, setiNationalaity] = useState('');
  const [cdocisuDate, setCdocisuDate] = useState('');
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);
  // const [isaNationalityErr, setisaNationalityErr] = useState(false);
  // const [isiNationalityErr, setisiNationalityErr] = useState(false);
  const [isButtonLoading, setIsButtonLoading] = useState(false);
  const [showDocuments, setShowDocuments] = useState(true);
  let obj: any = [];

  useEffect(() => {
    settitle((gender === 'Female') ? 'Mrs' : 'Mr');
  }, [gender]);

  const nameHandler = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value, id } = target;
    switch (id) {
      case 'firstName':
        if (!regex.test(value)) {
          setName(value.slice(0, -1));
        } else {
          setName(value);
        }
        break;
      case 'lastName':
        if (!regex.test(value)) {
          setLName(value.slice(0, -1));
        } else {
          setLName(value);
        }
        break;
      default: break;
    }
  };

  const handleDocNum = (ev: any) => {
    const { target } = ev;
    const regex = /^[0-9a-zA-Z]+$/;
    const { value } = target;

    if (!regex.test(value)) {
      setCdocn(value.slice(0, -1));
    }
  };

  const passangerHandler = (event: any) => {
    event.preventDefault();
    event.stopPropagation();
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { companionInfo } = obj;
    const {
      companionType,
      title: tt,
      firstName,
      lastName,
      gender: gg,
      dateOfBirth,
      nationality: nn,
      documentInfo,
    } = companionInfo;
    const docArray = [];
    docArray.push({
      docState: documentInfo.docState,
      companionDocsID: documentInfo.companionDocsID,
      docType: documentInfo.docType,
      docNationality: documentInfo.docNationality,
      docNumber: documentInfo.docNumber,
      docIssueddate: moment(documentInfo.docIssueddate, 'DD-MM-YYYY').format('YYYY-MM-DD'),
      docExpirydate: moment(documentInfo.docExpirydate, 'DD-MM-YYYY').format('YYYY-MM-DD'),
      issuedCountryCode: documentInfo.issuedCountryCode,
    });

    if (form.checkValidity() && (companionInfo.nationality !== '0' && companionInfo.nationality !== '') && (documentInfo.issuedCountryCode !== '0' && documentInfo.issuedCountryCode !== '')) {
      setIsButtonLoading(true);
      // eslint-disable-next-line no-const-assign
      dispatch(addCompanion({
        paxInfoID,
        personKey,
        companionInfo: {
          companionType,
          title: tt,
          firstName,
          lastName,
          gender: gg,
          dateOfBirth: moment(dateOfBirth, 'DD-MM-YYYY').format('YYYY-MM-DD'),
          nationality: nn,
          documentInfo: docArray,
        },
        // eslint-disable-next-line no-unused-expressions
      })).then((result: any) => {
        if (result.isSuccess) {
          loaderEnable(true);
          dispatch(getpaxDetails()).then(() => {
            loaderEnable(false);
          });
          onHide();
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });

      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      // if (companionInfo.nationality === '0' || companionInfo.nationality === '') {
      //   setisaNationalityErr(true);
      // } else {
      //   setisaNationalityErr(false);
      // }
      // if (documentInfo.issuedCountryCode === '0' || documentInfo.issuedCountryCode === '') {
      //   setisiNationalityErr(true);
      // } else {
      //   setisiNationalityErr(false);
      // }
      setIsButtonLoading(false);
      event.preventDefault();
      event.stopPropagation();
    }

    setValidated(true);
  };

  useEffect(() => {
    dispatch(fetchCountryName());
  }, []);
  const BindCountryList = () => {
    const countryOption: any = [];
    map(countryList, (cList: any) => {
      countryOption.push(<option value={cList.countryCode}>{cList.countryName}</option>);
    });
    return countryOption;
  };

  return (
    <Form noValidate validated={validated} onSubmit={(e: any) => passangerHandler(e)}>
      <Row className={`${styles.mt20} ${styles.labelInline}`}>
        <Form.Control autoComplete="off" type="hidden" value={title} name="companionInfo[title]" />
        <Form.Control type="hidden" value={CTYPE} name="companionInfo[companionType]"></Form.Control>
        <Form.Control type="hidden" value={paxInfoID} name="paxInfoID"></Form.Control>
        <Form.Control type="hidden" value={personKey} name="personKey"></Form.Control>
        <Col xs sm="3">
          <Form.Group className="floating_label">
            <label>{t('Passengers.lblGndr')}</label>
            <Form.Control required as="select" value={gender} name="companionInfo[gender]" onChange={(ev: any) => { setGender(ev.target.value); }}>
              <option value="Male">{t('PaymentPage.lblMale')}</option>
              <option value="Female">{t('PaymentPage.lblFemale')}</option>
            </Form.Control>
          </Form.Group>
        </Col>
        <Col sm="9">
          <Row>
            <Col xs="12" sm="6">
              <Form.Group>
                <div className={styles.inlineGroup}>
                  <Form.Control
                    type="text"
                    required
                    autoComplete="new-firstName"
                    value={fname}
                    maxLength={32}
                    id="firstName"
                    name="companionInfo[firstName]"
                    onChange={nameHandler}
                    className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`}
                  />
                  <Form.Label>{t('FlightResult.lblFirstName')}</Form.Label>
                </div>
              </Form.Group>
            </Col>
            <Col xs="12" sm="6">
              <Form.Group>
                <div className={styles.inlineGroup}>
                  <Form.Control
                    required
                    autoComplete="new-lastName"
                    type="text"
                    value={lname}
                    maxLength={32}
                    id="lastName"
                    name="companionInfo[lastName]"
                    onChange={nameHandler}
                    className={`${styles.formControl} ${lname.length > 0 ? styles.hasContent : ''}`}
                  />
                  <Form.Label>{t('FlightResult.lblLastName')}</Form.Label>
                </div>
              </Form.Group>
            </Col>
          </Row>
        </Col>
      </Row>
      <Row className="label-inline">
        <Col xs="12" sm="6">
          <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender}`}>
            <div className={`${styles.inlineGroup} ${setCdob < setCdocisuDate ? '' : 'form-error'}`}>
              <Cleave
                required
                options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }}
                name="companionInfo[dateOfBirth]"
                placeholder="DD-MM-YYYY"
                value={cdob}
                onChange={(value: any) => { setCdob(value.target.value); }}
                className={`${styles.formControl} ${styles.hasContent}`}
              />
              <Form.Label>{t('CheckIn.lblDOB')}</Form.Label>
              {/* <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} /> */}
            </div>
          </Form.Group>
        </Col>
        <Col xs="12" sm="6">
          <Form.Group className="floating_label">
            <label>{t('PassengersPP.lblNationality')}</label>
            <Form.Control
              defaultValue={nationality}
              autoComplete="off"
              as="select"
              required
              name="companionInfo[nationality]"
              onChange={(ev: any) => {
                setaNationalaity(ev.target.value);
              }}
            >
              <option value="">{t('FlightResult.lblSelect')}</option>
              {BindCountryList()}
            </Form.Control>
          </Form.Group>
        </Col>
      </Row>
      <Accordion defaultActiveKey="0">
        <Accordion.Toggle className={styles.link} as={Button} variant="link" onClick={() => { setShowDocuments(!showDocuments); }} eventKey="0">
          {t('PassengersPP.lblShowDctDtls')}
          &nbsp;
          <i className={`${styles.foIcon} ${showDocuments ? styles.iconArrowDropUp : styles.iconArrowDropDown}`} />
        </Accordion.Toggle>
        <Accordion.Collapse eventKey="0">
          <div className="">
            <div className="col-xs-12 no-pad">
              <Row className={`${styles.labelInline}`}>
                <Form.Control type="hidden" value="1" name="companionInfo[documentInfo][docState]" />
                <Col xs="12" sm="6">
                  <Form.Group className="floating_label">
                    <label>{t('PassengersPP.lblPaxDocIssueCountry')}</label>
                    <Form.Control
                      defaultValue={inationality}
                      autoComplete="off"
                      as="select"
                      required
                      name="companionInfo[documentInfo][issuedCountryCode]"
                      onChange={(ev: any) => {
                        setiNationalaity(ev.target.value);
                      }}
                    >
                      <option value="">{t('FlightResult.lblSelect')}</option>
                      {BindCountryList()}
                    </Form.Control>
                  </Form.Group>
                  <Form.Control value={nationality} type="hidden" name="companionInfo[documentInfo][docNationality]" />
                </Col>
                <Col xs="12" sm="6">
                  <Form.Group className="floating_label">
                    <label>{t('CheckIn.lblTyeoftrvldocmt')}</label>
                    <Form.Control required as="select" name="companionInfo[documentInfo][docType]">
                      <option value="Passport">Passport</option>
                    </Form.Control>
                  </Form.Group>
                </Col>
              </Row>
              <div className="row label-inline">
                <Col xs="12" sm="6">
                  <Form.Group bsPrefix={styles.formGroup}>
                    <div className={styles.inlineGroup}>
                      <Form.Control autoComplete="new-docNumber" required type="text" name="companionInfo[documentInfo][docNumber]" value={cdocn} onChange={(value: any) => { setCdocn(value.target.value); handleDocNum(value); }} className={`${styles.formControl} ${cdocn.length > 0 ? styles.hasContent : ''}`} />
                      <Form.Label>{t('PassengersPP.lblPaxDocNumber')}</Form.Label>
                    </div>
                  </Form.Group>
                </Col>
                <Col xs="12" sm="6">
                  <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender} issue-date`}>
                    <div className={`${styles.inlineGroup}`}>
                      <Cleave
                        required
                        options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }}
                        name="companionInfo[documentInfo][docIssueddate]"
                        placeholder="DD-MM-YYYY"
                        value={cdocisuDate}
                        onChange={(value: any) => { setCdocisuDate(value.target.value); }}
                        className={`${styles.formControl} ${styles.hasContent}`}
                      />
                      <Form.Label>
                        {t('PassengersPP.lblPaxDocIssueDate')}
                      </Form.Label>
                      {/* <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} /> */}
                    </div>
                  </Form.Group>
                </Col>
              </div>
              <div className="row label-inline">
                <Col xs="12" sm="6">
                  <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender}`}>
                    <div className={styles.inlineGroup}>
                      <Cleave
                        required
                        options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }}
                        name="companionInfo[documentInfo][docExpirydate]"
                        placeholder="DD-MM-YYYY"
                        value={cdoce}
                        onChange={(value: any) => { setCdoce(value.target.value); }}
                        className={`${styles.formControl} ${styles.hasContent}`}
                      />
                      <Form.Label>
                        {t('CheckIn.lblExydate')}
                      </Form.Label>
                      {/* <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} /> */}
                    </div>
                  </Form.Group>
                </Col>
              </div>
            </div>
            <div className={styles.clearfix} />
          </div>
        </Accordion.Collapse>
      </Accordion>
      <div className={`d-none ${styles.mt20} ${styles.mb20}`}>
        <Button variant="link" className={`${styles.addDocsBtn} ${styles.clrLink}`}>
          <i className={`${styles.foIcon} ${styles.iconPlus}`} />
          &nbsp;
          {t('PassengersPP.lblAddDocmts')}
        </Button>
      </div>
      <Form.Group className={`${styles.formGroup} ${styles.mb30} ${styles.mt20}`}>
        <Form.Check className={styles.customCheckbox} id={`adddocschk${CTYPE}`}>
          <Form.Check.Input type="checkbox" name="check" required />
          <Form.Check.Label>
            {t('PassengersPP.lblClkngCnfmAgFONEPPcy')}
            &nbsp;
            <a rel="noopener noreferrer" target="_blank" href={`https://www.flyone.eu/${typeof Cookies.get(CURRENT_LANG) !== 'undefined' ? Cookies.get(CURRENT_LANG) : 'en' ? Cookies.get(CURRENT_LANG) : 'en'}/Privacy-policy`}>
              {t('PassengersPP.lblPrvcyNote')}
            </a>
          </Form.Check.Label>
        </Form.Check>
      </Form.Group>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        {
          hasError ? errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>) : <></>
        }
        <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>{t('Services.lblCancel')}</Button>
        <Button
          type="submit"
          disabled={isButtonLoading}
          className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
        >
          {t('PassengersPP.lblSave')}
          {
            isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
          }
        </Button>
      </div>
    </Form>
  );
}

function AddCompanionModalbody(props: any) {
  const {
    profData, dispatch, onHide, countryList, loaderEnable,
  } = props;
  const { paxInfoID, personKey } = profData;
  const { t } = useTranslation();
  return (
    <Tab.Container id="add_companions" defaultActiveKey="add_companions_friends">
      <div className="custom-tab2 mb-30">
        <Nav variant="tabs" className={styles.navTabs}>
          <Nav.Item className={styles.navItem}>
            <Nav.Link eventKey="add_companions_friends">{t('PassengersPP.lblFriends')}</Nav.Link>
          </Nav.Item>
          <Nav.Item className={styles.navItem}>
            <Nav.Link eventKey="add_companions_family">{t('PassengersPP.lblFamily')}</Nav.Link>
          </Nav.Item>
        </Nav>
      </div>
      <Tab.Content>
        <Tab.Pane eventKey="add_companions_friends">
          <h4>{t('PassengersPP.lblActDtls')}</h4>
          <CompanionForm
            paxInfoID={paxInfoID}
            companionType="1"
            dispatch={dispatch}
            onHide={onHide}
            countryList={countryList}
            loaderEnable={loaderEnable}
            key="friends"
            personKey={personKey}
          />
        </Tab.Pane>
        <Tab.Pane eventKey="add_companions_family">
          <h4>
            {t('PassengersPP.lblActDtls')}
          </h4>
          <CompanionForm
            paxInfoID={paxInfoID}
            companionType="2"
            dispatch={dispatch}
            onHide={onHide}
            countryList={countryList}
            loaderEnable={loaderEnable}
            key="family"
            personKey={personKey}
          />
        </Tab.Pane>
      </Tab.Content>
    </Tab.Container>
  );
}

function ShowCompanionModalbody(props: any) {
  const { companion } = props;
  const { t } = useTranslation();
  return (
    <div className="view_comp_details">
      <p>
        <span>
          {t('BoardingPass.lblName')}
          :
        </span>
        {' '}
        {`${companion.title}. ${companion.firstName} ${companion.lastName}`}
      </p>
      <p>
        <span>
          {t('CheckIn.lblDOB')}
          :
        </span>
        {' '}
        {moment(companion.dateOfBirth, 'YYYY-MM-DD').format('DD-MM-YYYY')}
      </p>
      <p>
        <span>
          {t('Baggage.lblGndr')}
          :
        </span>
        {' '}
        {(companion.gender === 'Female') ? t('PaymentPage.lblFemale') : t('PaymentPage.lblMale')}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblNationality')}
          :
        </span>
        {' '}
        {companion.nationality}
      </p>
      {/* <p>{companion.docType}</p> */}
      <h4>
        {t('PassengersPP.lblDctDtls')}
      </h4>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocNumber')}
          :
        </span>
        {' '}
        {!isNull(companion.documentInfo) && companion.documentInfo[0].docNumber ? companion.documentInfo[0].docNumber : ''}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocIssueCountry')}
          :
        </span>
        {' '}
        {!isNull(companion.documentInfo) && companion.documentInfo[0].issuedCountryCode ? companion.documentInfo[0].issuedCountryCode : ''}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocIssueDate')}
          :
        </span>
        {' '}
        {!isNull(companion.documentInfo) && companion.documentInfo[0].docIssueddate ? moment(companion.documentInfo[0].docIssueddate, 'YYYY-MM-DD').format('DD-MM-YYYY') : ''}
      </p>
      <p>
        <span>
          {t('CheckIn.lblExydate')}
          :
        </span>
        {' '}
        {!isNull(companion.documentInfo) && companion.documentInfo[0].docExpirydate ? moment(companion.documentInfo[0].docExpirydate, 'YYYY-MM-DD').format('DD-MM-YYYY') : ''}
      </p>
    </div>
  );
}

function EditCmpModalbody(props: any) {
  const {
    profData, dispatch, onHide, countryList, loaderEnable,
  } = props;
  const { cpList, paxInfoID, personKey } = profData;
  // const [email, setEmail] = useState('');
  // const [compId, setCompId] = useState(profData.companionID || '');
  const [title, settitle] = useState(cpList && cpList.title !== 'undefined' ? cpList.title : 'Mr');
  const [gender, setGender] = useState(cpList.gender || '');
  const [fname, setName] = useState(cpList.firstName || '');
  const [lname, setLName] = useState(cpList.lastName || '');
  const [compNationality, setCompNationality] = useState(!isNull(cpList.nationality) ? cpList.nationality : '');
  // const [compNationality, setCompNationality] = useState(cpList.nationality || '');
  const [cdob, setCdob] = useState(cpList.dateOfBirth ? moment(cpList.dateOfBirth, 'YYYY-MM-DD').format('DD-MM-YYYY') : '');
  const [cdocn, setCdocn] = useState(!isNull(cpList.documentInfo) ? cpList.documentInfo[0].docNumber : '');
  const [cdoce, setCdoce] = useState(!isNull(cpList.documentInfo) && cpList.documentInfo[0].docExpirydate ? moment(cpList.documentInfo[0].docExpirydate, 'YYYY-MM-DD').format('DD-MM-YYYY') : '');
  const [cdocIsuDate, setCdocIsuDate] = useState(!isNull(cpList.documentInfo) && cpList.documentInfo[0].docIssueddate ? moment(cpList.documentInfo[0].docIssueddate, 'YYYY-MM-DD').format('DD-MM-YYYY') : '');

  const [cdocType, setcdocType] = useState(!isNull(cpList.documentInfo) ? cpList.documentInfo[0].docType : '');
  const [compDocIsuContry, setCompDocIsuContry] = useState(!isNull(cpList.documentInfo) ? cpList.documentInfo[0].issuedCountryCode : '');
  const [showDocuments, setShowDocuments] = useState(true);

  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);
  const [isButtonLoading, setIsButtonLoading] = useState(false);
  const { t } = useTranslation();
  const [validated, setValidated] = useState(false);
  let obj: any = [];

  useEffect(() => {
    if (gender !== '' && gender !== 'undefined') {
      settitle((gender === 'Female') ? 'Mrs' : 'Mr');
    }
  }, [gender]);
  const passangerHandler = (event: any) => {
    event.preventDefault();
    event.stopPropagation();
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });

    const { companionInfo } = obj;
    const { documentInfo } = companionInfo;
    const NewCompInfo = {
      companionID: companionInfo.companionID,
      companionType: companionInfo.companionType,
      title: companionInfo.title,
      firstName: companionInfo.firstName,
      lastName: companionInfo.lastName,
      gender: companionInfo.gender,
      dateOfBirth: companionInfo.dateOfBirth ? moment(companionInfo.dateOfBirth, 'DD-MM-YYYY').format('YYYY-MM-DD') : '',
      nationality: companionInfo.nationality,
      documentInfo: [
        {
          docState: documentInfo.docState || '',
          companionDocsID: documentInfo.companionDocsID || '',
          docType: documentInfo.docType || '',
          docNationality: documentInfo.docNationality || '',
          docNumber: documentInfo.docNumber || '',
          docIssueddate: documentInfo.docIssueddate !== 'undefined' ? moment(documentInfo.docIssueddate, 'DD-MM-YYYY').format('YYYY-MM-DD') : '',
          docExpirydate: documentInfo.docExpirydate !== 'undefined' ? moment(documentInfo.docExpirydate, 'DD-MM-YYYY').format('YYYY-MM-DD') : '',
          issuedCountryCode: documentInfo.issuedCountryCode || '',
        },
      ],
    };
    if (form.checkValidity() && (NewCompInfo.nationality !== '0' && NewCompInfo.nationality !== '') && (documentInfo.issuedCountryCode !== '0' && documentInfo.issuedCountryCode !== '')) {
      setIsButtonLoading(true);
      // eslint-disable-next-line no-const-assign
      dispatch(updateCompanion({
        paxInfoID, companionInfo: NewCompInfo, personKey,
      })).then((result: any) => {
        if (result.isSuccess) {
          loaderEnable(true);
          dispatch(getpaxDetails()).then(() => {
            loaderEnable(false);
          });
          onHide();
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      setIsButtonLoading(false);
      event.preventDefault();
      event.stopPropagation();
    }

    // const errField = document.querySelectorAll('.form-control:invalid');
    // if (errField.length > 0) {
    //   const curErrField = errField[0].getAttribute('name');
    //   scroller.scrollTo(
    //     curErrField !== null ? curErrField.toString() : '',
    //     {
    //       duration: 800,
    //       delay: 100,
    //       smooth: true,
    //       offset: -200,
    //     },
    //   );
    // }
    setValidated(true);
  };
  const handleEName = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value } = target;

    if (!regex.test(value)) {
      setName(value.slice(0, -1));
    }
  };
  const handleELastName = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value } = target;
    if (!regex.test(value)) {
      setLName(value.slice(0, -1));
    }
  };

  const handleEDocNum = (ev: any) => {
    const { target } = ev;
    const regex = /^[0-9a-zA-Z]+$/;
    const { value } = target;

    if (!regex.test(value)) {
      setCdocn(value.slice(0, -1));
    }
  };

  useEffect(() => {
    dispatch(fetchCountryName());
  }, []);
  const BindCountryList = () => {
    const countryOption: any = [];
    map(countryList, (cList: any) => {
      countryOption.push(<option value={cList.countryCode}>{cList.countryName}</option>);
    });
    return countryOption;
  };

  return (
    <Tab.Container id="add_companions" defaultActiveKey="add_companions_friends">
      <Tab.Content>
        <Tab.Pane eventKey="add_companions_friends">
          <h4>{t('PassengersPP.lblActDtls')}</h4>
          <Form noValidate validated={validated} onSubmit={(e: any) => passangerHandler(e)}>
            <Row className={`${styles.mt20} ${styles.labelInline}`}>
              <Form.Control autoComplete="off" type="hidden" value={title} name="companionInfo[title]" />
              <Form.Control autoComplete="off" type="hidden" value={cpList.companionID || ''} name="companionInfo[companionID]" />
              <Form.Control autoComplete="off" type="hidden" value={cpList.companionType || ''} name="companionInfo[companionType]" />
              <Form.Control autoComplete="off" type="hidden" value={!isNull(cpList.documentInfo) ? cpList.documentInfo[0].companionDocsID : ''} name="companionInfo[documentInfo][companionDocsID]" />
              <Form.Control type="hidden" value={paxInfoID} name="paxInfoID" />
              <Form.Control type="hidden" value={personKey} name="personKey" />
              <Col xs sm="3">
                <Form.Group className="floating_label">
                  <label>{t('Passengers.lblGndr')}</label>
                  <Form.Control required as="select" defaultValue={gender !== 'undefined' ? gender : ''} name="companionInfo[gender]" onChange={(ev: any) => { setGender(ev.target.value); }}>
                    <option value="Male">{t('PaymentPage.lblMale')}</option>
                    <option value="Female">{t('PaymentPage.lblFemale')}</option>
                  </Form.Control>
                </Form.Group>
              </Col>
              <Col sm="9">
                <Row>
                  <Col xs="12" sm="6">
                    <Form.Group>
                      <div className={styles.inlineGroup}>
                        <Form.Control autoComplete="new-firstName" required type="text" value={fname} name="companionInfo[firstName]" maxLength={32} onChange={(value: any) => { setName(value.target.value); handleEName(value); }} className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`} />
                        <Form.Label>{t('FlightResult.lblFirstName')}</Form.Label>
                      </div>
                    </Form.Group>
                  </Col>
                  <Col xs="12" sm="6">
                    <Form.Group>
                      <div className={styles.inlineGroup}>
                        <Form.Control autoComplete="new-lastName" required type="text" value={lname} name="companionInfo[lastName]" maxLength={32} onChange={(value: any) => { setLName(value.target.value); handleELastName(value); }} className={`${styles.formControl} ${lname.length > 0 ? styles.hasContent : ''}`} />
                        <Form.Label>{t('FlightResult.lblLastName')}</Form.Label>
                      </div>
                    </Form.Group>
                  </Col>
                </Row>
              </Col>
            </Row>
            <Row className="label-inline">
              <Col xs="12" sm="6">
                <Form.Group>
                  <div className={styles.inlineGroup}>
                    <Cleave options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }} required value={cdob} name="companionInfo[dateOfBirth]" onChange={(value: any) => { setCdob(value.target.value); }} className={`${styles.formControl} ${cdob.length > 0 ? styles.hasContent : ''}`} />
                    <Form.Label>
                      {t('CheckIn.lblDOB')}
                    </Form.Label>
                  </div>
                </Form.Group>
              </Col>
              <Col xs="12" sm="6">
                <Form.Group className="floating_label">
                  <label>{t('PassengersPP.lblNationality')}</label>
                  <Form.Control
                    defaultValue={compNationality}
                    autoComplete="off"
                    as="select"
                    required
                    name="companionInfo[nationality]"
                    onChange={(ev: any) => {
                      setCompNationality(ev.target.value);
                    }}
                  >
                    <option value="">{t('FlightResult.lblSelect')}</option>
                    {BindCountryList()}
                  </Form.Control>
                </Form.Group>
              </Col>
            </Row>
            <Accordion defaultActiveKey="0">
              <Accordion.Toggle className={styles.link} as={Button} variant="link" onClick={() => { setShowDocuments(!showDocuments); }} eventKey="0">
                {t('PassengersPP.lblShowDctDtls')}
                &nbsp;
                <i className={`${styles.foIcon} ${showDocuments ? styles.iconArrowDropUp : styles.iconArrowDropDown}`} />
              </Accordion.Toggle>
              <Accordion.Collapse eventKey="0">
                <div className="">
                  <div className="col-xs-12">
                    <Form.Control type="hidden" value="2" name="companionInfo[documentInfo][docState]" />
                    <Row className={`${styles.labelInline}`}>
                      <Col xs="12" sm="6">
                        <Form.Group className="fodrop-group floating_label">
                          <label>{t('PassengersPP.lblPaxDocIssueCountry')}</label>
                          <Form.Control
                            defaultValue={compDocIsuContry}
                            autoComplete="off"
                            as="select"
                            required
                            name="companionInfo[documentInfo][issuedCountryCode]"
                            onChange={(ev: any) => {
                              setCompDocIsuContry(ev.target.value);
                            }}
                          >
                            <option value="">{t('FlightResult.lblSelect')}</option>
                            {BindCountryList()}
                          </Form.Control>
                          <Form.Control type="hidden" name="companionInfo[documentInfo][docNationality]" value={compNationality} />
                        </Form.Group>
                      </Col>
                      <Col xs="12" sm="6">
                        <Form.Group className="floating_label">
                          <label>{t('CheckIn.lblTyeoftrvldocmt')}</label>
                          <Form.Control required as="select" defaultValue={cdocType !== 'undefined' ? cdocType : 1} onChange={setcdocType} name="companionInfo[documentInfo][docType]">
                            <option value="1">{t('MyFlights.lblPassport')}</option>
                          </Form.Control>
                        </Form.Group>
                      </Col>
                    </Row>
                    <Row className={`${styles.labelInline}`}>
                      <Col xs sm="6">
                        <Form.Group>
                          <div className={styles.inlineGroup}>
                            <Form.Control autoComplete="new-docNumber" required type="text" name="companionInfo[documentInfo][docNumber]" value={cdocn} onChange={(value: any) => { setCdocn(value.target.value); handleEDocNum(value); }} className={`${styles.formControl} ${cdocn && cdocn.length > 0 ? styles.hasContent : ''}`} />
                            <Form.Label>{t('PassengersPP.lblPaxDocNumber')}</Form.Label>
                          </div>
                        </Form.Group>
                      </Col>
                      <Col xs="12" sm="6">
                        <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender}`}>
                          <div className={styles.inlineGroup}>
                            <Cleave options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }} required value={cdocIsuDate} name="companionInfo[documentInfo][docIssueddate]" onChange={(value: any) => { setCdocIsuDate(value.target.value); }} className={`${styles.formControl} ${cdocIsuDate && cdocIsuDate.length > 0 ? styles.hasContent : ''}`} />
                            <Form.Label>
                              {t('PassengersPP.lblPaxDocIssueDate')}
                            </Form.Label>
                            <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} />
                          </div>
                        </Form.Group>
                      </Col>
                    </Row>
                    <Row className={`${styles.labelInline}`}>
                      <Col xs="12" sm="6">
                        <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender}`}>
                          <div className={styles.inlineGroup}>
                            <Cleave options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }} required value={cdoce} name="companionInfo[documentInfo][docExpirydate]" onChange={(value: any) => { setCdoce(value.target.value); }} className={`${styles.formControl} ${cdoce && cdoce.length > 0 ? styles.hasContent : ''}`} />
                            <Form.Label>
                              {t('CheckIn.lblExydate')}
                            </Form.Label>
                            <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} />
                          </div>
                        </Form.Group>
                      </Col>
                    </Row>
                  </div>
                  <div className={styles.clearfix} />
                </div>
              </Accordion.Collapse>
            </Accordion>
            <div className={`d-none ${styles.mt20} ${styles.mb20}`}>
              <Button variant="link" className={`${styles.addDocsBtn} ${styles.clrLink}`}>
                <i className={`${styles.foIcon} ${styles.iconPlus}`} />
                &nbsp;
                {t('PassengersPP.lblAddDocmts')}
              </Button>
            </div>
            <Form.Group className={`${styles.formGroup} ${styles.mb30} ${styles.mt30}`}>
              <Form.Check className={styles.customCheckbox} id="adddocschk">
                <Form.Check.Input type="checkbox" name="check" required />
                <Form.Check.Label>
                  {t('PassengersPP.lblClkngCnfmAgFONEPPcy')}
                  &nbsp;
                  <a rel="noopener noreferrer" target="_blank" href={`https://www.flyone.eu/${typeof Cookies.get(CURRENT_LANG) !== 'undefined' ? Cookies.get(CURRENT_LANG) : 'en' ? Cookies.get(CURRENT_LANG) : 'en'}/Privacy-policy`}>
                    {t('PassengersPP.lblPrvcyNote')}
                  </a>
                </Form.Check.Label>
              </Form.Check>
            </Form.Group>
            <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
              {
                hasError ? errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>) : <></>
              }
              <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>{t('Services.lblCancel')}</Button>
              <Button
                type="submit"
                disabled={isButtonLoading}
                className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
              >
                {t('PassengersPP.lblSave')}
                {
                  isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
                }
              </Button>
            </div>
          </Form>
        </Tab.Pane>
      </Tab.Content>
    </Tab.Container>
  );
}

function AddTravelDoc(props: any) {
  const { modData, loaderAction } = props;
  const [docType, setdocType] = useState(!isEmpty(modData) ? modData[0].docType : '');
  // const [rdocType, setrdocType] = useState(!isEmpty(modData) ? modData[0].docType : '');

  const [docNumber, setdocNumber] = useState(!isEmpty(modData) ? modData[0].docNumber : '');
  const [trvlDocvalidated, setTrvlDocvalidated] = useState(false);
  const [compNationality, setCompNationality] = useState(!isEmpty(modData) ? modData[0].docNationality : '');
  const [compdDocIsuContry, setCompdDocIsuContry] = useState(!isEmpty(modData) ? modData[0].issuedCountryCode : '');
  // const [IsuCountryr, setIsuCountryr] = useState();

  const [docIssuedDate, setdocIssuedDate] = useState(!isEmpty(modData) ? moment(modData[0].docIssueddate, 'YYYY-MM-DD').format('DD-MM-YYYY') : '');
  const [docExpirydate, setdocExpirydate] = useState(!isEmpty(modData) ? moment(modData[0].docExpirydate, 'YYYY-MM-DD').format('DD-MM-YYYY') : '');
  const [isButtonLoading, setIsButtonLoading] = useState(false);
  const { t } = useTranslation();
  let obj: any = [];
  // const dispatch = useDispatch();
  const { dispatch, onHide, countryList } = props;
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);

  const trvlDocHandler = (event: any) => {
    event.preventDefault();
    event.stopPropagation();
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { documentInfos } = obj;

    const trvlDocData = {
      documentInfo: [
        {
          docType: documentInfos.docType,
          docNationality: documentInfos.docNationality,
          docNumber: documentInfos.docNumber,
          docExpirydate: moment(documentInfos.docExpirydate, 'DD-MM-YYYY').format('YYYY-MM-DD'),
          issuedCountryCode: documentInfos.issuedCountryCode,
          docIssueddate: moment(documentInfos.docIssueddate, 'DD-MM-YYYY').format('YYYY-MM-DD'),
        },
      ],
    };
    const regexDateOfBrith = () => {
      const msgs = ['Document Expiry date must greater than Document Issue date'];
      const dateOfIssuedDate = moment(docIssuedDate, 'DD/MM/YYYY');
      const dateOfExpiryDate = moment(docExpirydate, 'DD/MM/YYYY');

      if (dateOfExpiryDate > dateOfIssuedDate) {
        return true;
      }
      setErrorMsg(msgs);
      alert(`${msgs}`);
      return false;
    };
    if (form.checkValidity() && (documentInfos.docType !== '0' && documentInfos.docType !== '') && (documentInfos.docNationality !== '0' && documentInfos.docNationality !== '') && (documentInfos.issuedCountryCode !== '0' && documentInfos.issuedCountryCode !== '') && regexDateOfBrith()) {
      setIsButtonLoading(true);
      dispatch(addPassengerDoc(trvlDocData)).then((result: any) => {
        if (result.isSuccess) {
          loaderAction(true);
          dispatch(getpaxDetails()).then(() => {
            loaderAction(false);
          });
          onHide();
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      setIsButtonLoading(false);
      event.preventDefault();
      event.stopPropagation();
    }
    setTrvlDocvalidated(true);
  };

  const handleDocNum = (ev: any) => {
    const { target } = ev;
    const regex = /^[0-9a-zA-Z]+$/;
    const { value } = target;

    if (!regex.test(value)) {
      setdocNumber(value.slice(0, -1));
    }
  };

  useEffect(() => {
    dispatch(fetchCountryName());
  }, []);

  const BindCountryList = (selectedVal: any) => {
    const countryOption: any = [];
    map(countryList, (cList: any) => {
      countryOption.push(
        <option selected={selectedVal === cList.countryCode} value={cList.countryCode}>
          {cList.countryName}
        </option>,
      );
    });
    return countryOption;
  };

  return (
    <Form noValidate validated={trvlDocvalidated} id="travelDocForm" onSubmit={(ev: any) => trvlDocHandler(ev)}>
      <Row className={styles.labelInline}>
        <Col xs sm="6">
          <Form.Group className="floating_label grey_bg">
            <label>{t('MyFlights.lblDocType')}</label>
            <Form.Control
              required
              as="select"
              placeholder="Document Type"
              name="documentInfos[docType]"
              onChange={(value: any) => {
                setdocType(value.target.value);
              }} // setrdocType(value.target.value);
              defaultValue={docType !== '' ? docType : 1}
            // disabled={docType !== '' && rdocType !== ''}
            >
              <option value="1">
                {t('MyFlights.lblPassport')}
              </option>
            </Form.Control>
            <Form.Control type="hidden" defaultValue={docType !== '' ? docType : 1} name="documentInfos[docType]" />
          </Form.Group>
        </Col>
        <Col xs sm="6">
          <Form.Group className="floating_label">
            <label>{t('PassengersPP.lblNationality')}</label>
            <Form.Control
              defaultValue={compNationality || null}
              autoComplete="off"
              as="select"
              required
              name="documentInfos[docNationality]"
              onChange={(ev: any) => {
                setCompNationality(ev.target.value);
              }}
            >
              <option value="">{t('FlightResult.lblSelect')}</option>
              {BindCountryList(compNationality)}
            </Form.Control>
          </Form.Group>
        </Col>
        <Col xs sm="6">
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control autoComplete="new-docNumber" required type="text" name="documentInfos[docNumber]" value={docNumber} onChange={(value: any) => { setdocNumber(value.target.value); handleDocNum(value); }} className={`${styles.formControl} ${docNumber.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('PassengersPP.lblPaxDocNumber')}</Form.Label>
            </div>
          </Form.Group>
        </Col>
        <Col xs sm="6">
          <Form.Group className="floating_label grey_bg">
            <label>{t('PassengersPP.lblPaxDocIssueCountry')}</label>
            <Form.Control
              defaultValue={compdDocIsuContry}
              autoComplete="off"
              as="select"
              required
              name="documentInfos[issuedCountryCode]"
              onChange={(ev: any) => {
                setCompdDocIsuContry(ev.target.value);
                // setIsuCountryr(ev.target.value);
              }}
            >
              <option value="">{t('FlightResult.lblSelect')}</option>
              {BindCountryList(compdDocIsuContry)}
            </Form.Control>
            <Form.Control type="hidden" defaultValue={compdDocIsuContry} name="documentInfos[issuedCountryCode]" />
          </Form.Group>
        </Col>
        <Col>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Cleave options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }} name="documentInfos[docIssueddate]" required value={docIssuedDate} onChange={(value: any) => { setdocIssuedDate(value.target.value); }} placeholder="DD-MM-YYYY" className={`${styles.formControl} ${styles.hasContent}`} />
              <Form.Label>
                {t('PassengersPP.lblPaxDocIssueDate')}
              </Form.Label>
            </div>
          </Form.Group>
        </Col>
        <Col xs sm="6">
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Cleave options={{ date: true, delimiter: '-', datePattern: ['d', 'm', 'Y'] }} required name="documentInfos[docExpirydate]" value={docExpirydate} onChange={(value: any) => { setdocExpirydate(value.target.value); }} placeholder="DD-MM-YYYY" className={`${styles.formControl} ${styles.hasContent}`} />
              <Form.Label>
                {t('CheckIn.lblExydate')}
              </Form.Label>
            </div>
          </Form.Group>
        </Col>
      </Row>
      <Row className={styles.labelInline}>
        <Col>
          <div className={`${styles.dFlex} ${styles.mt10}`}>
            {
              hasError ? errorMsg.map((error: any) => <Alert variant="danger" className="mb-0">{error.msgText}</Alert>) : <></>
            }
          </div>
          <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>

            <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>{t('Services.lblCancel')}</Button>
            <Button
              type="submit"
              disabled={isButtonLoading}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
            >
              {t('PassengersPP.lblSave')}
              {
                isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
              }
            </Button>
          </div>
        </Col>
      </Row>
    </Form>
  );
}

function ShowDocumentDetail(props: any) {
  const { doc } = props;
  const { t } = useTranslation();
  return (
    <div>
      <p>
        <span>
          {t('PassengersPP.lblNationality')}
          :
        </span>
        {' '}
        {doc[0].docNationality}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocNumber')}
          :
        </span>
        {' '}
        {doc[0].docNumber}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocIssueCountry')}
          :
        </span>
        {' '}
        {doc[0].issuedCountryCode}
      </p>
      <p>
        <span>
          {t('CheckIn.lblExydate')}
          :
        </span>
        {' '}
        {doc[0].docExpirydate}
      </p>
      <p>
        <span>
          {t('PassengersPP.lblPaxDocIssueDate')}
          :
        </span>
        {' '}
        {doc[0].docIssueddate}
      </p>
    </div>
  );
}

function YourProfileModalbody(props: any) {
  const {
    profData, dispatch, onHide, loaderEnable,
    // countryList
  } = props;
  const {
    accountNumber, emailAddress, firstName, // addressInfo,
    lastName, dateOfBirth, mobileCode: mCode, gender, nationality, mobileNumber: mNumber,
    landlineNumber: lNumber, title, createdDate,
    paxInfoID, isSubscribeNewsLetter, clubInfo, documentInfo, personKey,
  } = profData;

  const mobileCode = mCode || '';
  const mobileNumber = mNumber || '';
  const landlineNumber = lNumber || '';

  let docExpirydate = '';
  let docNationality = '';
  let docNumber = '';
  let docType = '';
  let issuedCountryCode = '';
  if (!isEmpty(documentInfo)) {
    const [doc] = documentInfo;
    (
      {
        docExpirydate,
        docNationality,
        docNumber,
        docType,
        issuedCountryCode,
      } = doc
    );
  }

  const [emobileCode, setemobileCode] = useState(mobileCode.split(/\+/g).length <= 1 ? `+${mobileCode}` : mobileCode || '');
  const uNationality = nationality || '';
  const [uspecialOffer, setspecialOffer] = useState(isSubscribeNewsLetter);

  let annualFee = '';
  let clubSetttingsID = '';
  let currencyCode = '';
  let discountAppliesTo = '';
  let discountCode = '';
  let displayCode = '';
  let expiryDate = '';
  let fareDiscount = '';
  let fareType = '';
  let feeDiscount = '';
  let isAmountPaid = '';
  let maximumPax = '';
  let programCode = '';
  let programLevel = '';
  let programName = '';
  let programNumber = '';

  if (!isEmpty(clubInfo)) {
    const [club] = clubInfo;
    (
      {
        annualFee, clubSetttingsID, currencyCode, discountAppliesTo,
        discountCode, displayCode, expiryDate, fareDiscount, fareType,
        feeDiscount, isAmountPaid, maximumPax, programCode, programLevel,
        programName, programNumber,
      } = club
    );
  }

  const isInValidDate = () => dateOfBirth === '0001-01-01' || dateOfBirth === '9999-12-31' || dateOfBirth === '1900-01-01';

  isInValidDate();

  const handleTitle = (genderType: any) => {
    switch (genderType) {
      case 'female':
        return 'mrs';
      case 'male':
        return 'mr';
      default:
        return 'mr';
    }
  };

  const [paxTitle, setPaxTitle] = useState(
    !isEmpty(title) ? title : handleTitle(gender.toLowerCase()),
  );

  const [fname, setfName] = useState(firstName);
  const [lname, setlName] = useState(lastName);
  const [Gender, setGender] = useState(gender.toLowerCase());
  const [dob, setDob] = useState(isInValidDate() ? '' : moment(dateOfBirth, 'YYYY-MM-DD').format('DD-MM-YYYY'));
  const [frmtDob, setfrmtDob] = useState(isInValidDate() ? '' : moment(dateOfBirth, 'YYYY-MM-DD').format('YYYY-MM-DD'));
  const [mobNmbr, setMobNmbr] = useState(mobileNumber || '');
  const [landNmbr, setlandNmbr] = useState(landlineNumber || '');
  const [profUpdatevalidated, setProfUpdateValidated] = useState(false);
  const [uEmailAddress] = useState(emailAddress || '');
  const { t } = useTranslation();
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);
  const [isButtonLoading, setIsButtonLoading] = useState(false);
  const [confmDelAccnt, setConfmDelAccnt] = useState(false);

  const regexDateOfBrith = () => {
    const msgs = ['Date Of Brith Invalid'];
    const currentDate = new Date();
    const dateOfBrithMoment = moment(dob, 'DD/MM/YYYY');
    const dateOfBrithh = new Date(
      dateOfBrithMoment.year(),
      dateOfBrithMoment.month(),
      dateOfBrithMoment.date(),
    );
    if (dateOfBrithh < currentDate) {
      return true;
    }
    setErrorMsg(msgs);
    alert(`${msgs}`);
    return false;
  };

  const handleNumberValidation = (ev: any) => {
    const { target } = ev;
    const { id, value } = target;
    // eslint-disable-next-line default-case
    switch (id) {
      case 'MobNumbr': {
        const regex = /^[0-9]+$/;
        if (!regex.test(value)) {
          setMobNmbr(value.slice(0, -1));
        }
      }
        break;
      // eslint-disable-next-line no-fallthrough
      case 'landNmbr': {
        const regex = /^[0-9]+$/;
        if (!regex.test(value)) {
          setlandNmbr(value.slice(0, -1));
        }
      }
        break;
    }
  };

  const handleName = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value } = target;

    if (!regex.test(value)) {
      setfName(value.slice(0, -1));
    }
  };
  const handleLastName = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value } = target;
    if (!regex.test(value)) {
      setlName(value.slice(0, -1));
    }
  };

  let obj: any = [];

  const updateProfileHandler = (event: any) => {
    event.preventDefault();
    event.stopPropagation();

    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { profileInfo, addressInfo: adInf } = obj;
    let ProfDataFrom: any = [];
    ProfDataFrom = {
      profileInfo: {
        ...profileInfo,
        specialOffer: profileInfo.specialOffer === 'on',
        isSubscribeNewsLetter: profileInfo.specialOffer === 'on',
        addressInfo: adInf,
        documentInfo: !isEmpty(documentInfo) ? [
          ...documentInfo,
        ] : [],
        clubInfo,
      },
    };
    if (form.checkValidity() && (emobileCode !== '0' && emobileCode !== '') && regexDateOfBrith()) {
      setIsButtonLoading(true);
      dispatch(updatePaxDetails(ProfDataFrom)).then((result: any) => {
        if (result.isSuccess) {
          loaderEnable(true);
          dispatch(getpaxDetails()).then((data: any) => {
            const { profileInfo: profileData } = data;
            dispatch(setPaxInfoUpdatdData(profileData)).then(() => {
              loaderEnable(false);
            });
          });
          onHide();
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });
      event.preventDefault();
      event.stopPropagation();
    } else {
      setIsButtonLoading(false);

      const errField = document.querySelectorAll('.form-control:invalid');
      if (errField.length > 0) {
        const curErrField = errField[0].getAttribute('name');
        scroller.scrollTo(
          curErrField !== null ? curErrField.toString() : '',
          {
            duration: 800,
            delay: 100,
            smooth: true,
            offset: -200,
          },
        );
      }
      setProfUpdateValidated(true);
    }
  };

  useEffect(() => {
    dispatch(fetchCountryName());
  }, []);
  const BindMobileCodeList = () => {
    const MobileCodeOption: any = [];
    map(mobileCodes, (McList: any) => {
      MobileCodeOption.push(<option value={McList.dial_code}>{`${McList.name} (${McList.dial_code})`}</option>);
    });
    return MobileCodeOption;
  };

  return (
    <div>
      <h4>{t('PassengersPP.lblActDtls')}</h4>
      <Form noValidate validated={profUpdatevalidated} onSubmit={(ev: any) => updateProfileHandler(ev)} id="profileForm">
        <Form.Control type="hidden" value={paxTitle} name="profileInfo[title]" />
        <Form.Control type="hidden" value={createdDate} name="profileInfo[createdDate]" />
        <Form.Control
          type="hidden"
          value={uNationality}
          name="profileInfo[nationality]"
          className={`${styles.formControl}
          ${uNationality.length > 0 ? styles.hasContent : ''}`}
        />
        <Form.Control type="hidden" value={paxInfoID} name="profileInfo[paxInfoID]" />
        <Form.Control type="hidden" value={personKey} name="profileInfo[personKey]" />
        <div className="row label-inline">
          <div className="col-sm-6">
            <Form.Group className={styles.defaults}>
              <div className={styles.inlineGroup}>
                <Form.Control required type="text" name="profileInfo[emailAddress]" value={uEmailAddress} readOnly className={`${styles.formControl} ${uEmailAddress.length > 0 ? styles.hasContent : ''}`} />
                <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
              </div>
            </Form.Group>
          </div>
          <div className="col-sm-6">
            <Form.Group className={styles.defaults}>
              <div className={styles.inlineGroup}>
                <Form.Control required type="text" name="profileInfo[accountNumber]" value={accountNumber} className={`${styles.formControl} ${accountNumber.length > 0 ? styles.hasContent : ''}`} readOnly />
                <Form.Label>{t('PassengersPP.lblActNbr')}</Form.Label>
              </div>
            </Form.Group>
          </div>
        </div>
        <p className={`${styles.mb20} ${'delete_acnt_btn'} d-none`}>
          <Button variant="link" onClick={() => { setConfmDelAccnt(true); deleteProfile(paxInfoID, personKey); }}>
            {t('PassengersPP.lblDlteact')}
          </Button>
        </p>
        <div className="row mt-20  label-inline">
          <Col xs sm="3">
            <Form.Group className="floating_label grey_bg">
              <label>{t('Passengers.lblGndr')}</label>
              <Form.Control
                required
                as="select"
                defaultValue={Gender}
                name="profileInfo[gender]"
                onChange={(ev: any) => {
                  setGender(ev.target.value);
                  setPaxTitle(handleTitle(ev.target.value));
                }}
                className={`${styles.formControl} ${Gender.length > 0 ? styles.hasContent : ''}`}
              >
                <option value="male">{t('PaymentPage.lblMale')}</option>
                <option value="female">{t('PaymentPage.lblFemale')}</option>
              </Form.Control>
            </Form.Group>
          </Col>
          <div className="col-sm-9">
            <div className="row">
              <Col className="col-sm-6">
                <Form.Group className={styles.defaults}>
                  <div className={styles.inlineGroup}>
                    <Form.Control
                      type="text"
                      autoComplete="new-firstName"
                      required
                      value={fname}
                      maxLength={32}
                      name="profileInfo[firstName]"
                      readOnly
                      onChange={(ev: any) => { setfName(ev.target.value); handleName(ev); }}
                      className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`}
                    />
                    <Form.Label>{t('FlightResult.lblFirstName')}</Form.Label>
                  </div>
                </Form.Group>
              </Col>
              <div className="col-sm-6">
                <Form.Group className={`${styles.formGroup} ${styles.defaults}`}>
                  <div className={`${styles.inlineGroup}`}>
                    <Form.Control
                      autoComplete="new-lastName"
                      required
                      type="text"
                      maxLength={32}
                      name="profileInfo[lastName]"
                      readOnly
                      value={lname || null}
                      onChange={(ev: any) => { setlName(ev.target.value); handleLastName(ev); }}
                      className={`${styles.formControl} ${lname.length > 0 ? styles.hasContent : ''}`}
                    />
                    <Form.Label>{t('FlightResult.lblLastName')}</Form.Label>
                  </div>
                </Form.Group>
              </div>
            </div>
          </div>
        </div>
        <div className="row  mb-20 label-inline">
          <Col xs sm="6">
            <Form.Group bsPrefix={`${styles.formGroup} ${styles.calender}`}>
              <div className={`${styles.inlineGroup}`}>
                <Cleave
                  required
                  options={{
                    date: true,
                    delimiter: '-',
                    datePattern: ['d', 'm', 'Y'],
                  }}
                  placeholder="DD-MM-YYYY"
                  value={dob}
                  onChange={(ev: any) => {
                    setDob(ev.target.value);
                    setfrmtDob(moment(ev.target.value, 'DD-MM-YYYY').format('YYYY-MM-DD'));
                  }}
                  className={`${styles.formControl} ${styles.hasContent}`}
                />
                {<Form.Label>{t('CheckIn.lblDOB')}</Form.Label>}
                <i className={`${styles.foIcon} ${styles.iconFoCalendar}`} />
                <Form.Control
                  required
                  type="hidden"
                  onChange={(ev: any) => {
                    setfrmtDob(moment(ev.target.value, 'DD-MM-YYYY').format('YYYY-MM-DD'));
                  }}
                  value={frmtDob}
                  name="profileInfo[dateOfBirth]"
                />
              </div>
            </Form.Group>
          </Col>
        </div>
        <h4>{t('PaymentPage.lblContactDetails')}</h4>
        <div className="row label-inline">
          <Col xs="12" sm="6">
            <Form.Group className={`${styles.formGroup} floating_label grey_bg`}>
              <label>{t('FlightResult.lblCountryCode')}</label>
              <Form.Control
                defaultValue={emobileCode}
                autoComplete="off"
                as="select"
                required
                name="profileInfo[mobileCode]"
                onChange={(ev: any) => {
                  setemobileCode(ev.target.value);
                }}
              >
                {BindMobileCodeList()}
              </Form.Control>
            </Form.Group>
          </Col>
          <Col xs="12" sm="6">
            <Form.Group bsPrefix={styles.formGroup}>
              <div className={`${styles.inlineGroup}`}>
                <Form.Control autoComplete="new-mobileNumber" required type="text" name="profileInfo[mobileNumber]" id="MobNumbr" maxLength={15} value={mobNmbr || null} onChange={(ev: any) => { setMobNmbr(ev.target.value); handleNumberValidation(ev); }} className={`${styles.formControl} ${mobNmbr.length > 0 ? styles.hasContent : ''}`} />
                <Form.Label>{t('FlightResult.lblMobilePnNumber')}</Form.Label>
              </div>
            </Form.Group>
          </Col>
        </div>
        <Row className={`${styles.mb20} ${styles.labelInline}`}>
          <Col xs="12" sm="6">
            <Form.Group bsPrefix={styles.formGroup}>
              <div className={`${styles.inlineGroup}`}>
                <Form.Control autoComplete="new-landlineNumber" type="text" name="profileInfo[landlineNumber]" id="landNmbr" maxLength={15} value={landNmbr} onChange={(ev: any) => { setlandNmbr(ev.target.value); handleNumberValidation(ev); }} className={`${styles.formControl} ${landNmbr.length > 0 ? styles.hasContent : ''}`} />
                <Form.Label>{t('FlightResult.lblLandLnNumber')}</Form.Label>
              </div>
            </Form.Group>
          </Col>
        </Row>
        <h4>{t('PassengersPP.lblSploffers')}</h4>
        <div className={styles.mb10}>
          <Form.Check
            type="checkbox"
            name="profileInfo[specialOffer]"
            checked={uspecialOffer}
            className={styles.customCheckbox}
            onChange={(ev: any) => setspecialOffer(ev.target.checked)}
            label={(
              <>
                {t('PassengersPP.lblsrbofrNwsltrPvcNte')}
                &nbsp;
                <a rel="noopener noreferrer" target="_blank" href={`https://www.flyone.eu/${typeof Cookies.get(CURRENT_LANG) !== 'undefined' ? Cookies.get(CURRENT_LANG) : 'en' ? Cookies.get(CURRENT_LANG) : 'en'}/Privacy-policy`}>
                  {t('PassengersPP.lblPrvcyNote')}
                </a>
              </>
            )}
            id="subsribe_txt"
          />
        </div>
        <Form.Control type="hidden" value={docType} name="documentInfo[docType]" />
        <Form.Control type="hidden" value={docNationality} name="documentInfo[docNationality]" />
        <Form.Control type="hidden" value={docNumber} name="documentInfo[docNumber]" />
        <Form.Control type="hidden" value={docExpirydate} name="documentInfo[docExpirydate]" />
        <Form.Control type="hidden" value={issuedCountryCode} name="documentInfo[issuedCountryCode]" />
        <Form.Control type="hidden" value={clubSetttingsID} name="clubInfo[clubSetttingsID]" />
        <Form.Control type="hidden" value={programName} name="clubInfo[programName]" />
        <Form.Control type="hidden" value={programCode} name="clubInfo[programCode]" />
        <Form.Control type="hidden" value={programLevel} name="clubInfo[programLevel]" />
        <Form.Control type="hidden" value={programNumber} name="clubInfo[programNumber]" />
        <Form.Control type="hidden" value={displayCode} name="clubInfo[displayCode]" />
        <Form.Control type="hidden" value={fareType} name="clubInfo[fareType]" />
        <Form.Control type="hidden" value={discountCode} name="clubInfo[discountCode]" />
        <Form.Control type="hidden" value={currencyCode} name="clubInfo[currencyCode]" />
        <Form.Control type="hidden" value={fareDiscount} name="clubInfo[fareDiscount]" />
        <Form.Control type="hidden" value={feeDiscount} name="clubInfo[feeDiscount]" />
        <Form.Control type="hidden" value={discountAppliesTo} name="clubInfo[discountAppliesTo]" />
        <Form.Control type="hidden" value={maximumPax} name="clubInfo[maximumPax]" />
        <Form.Control type="hidden" value={expiryDate} name="clubInfo[expiryDate]" />
        <Form.Control type="hidden" value={annualFee} name="clubInfo[annualFee]" />
        <Form.Control type="hidden" value={isAmountPaid} name="clubInfo[isAmountPaid]" />

        <ModalComponent modData="" show={confmDelAccnt} modalSize="smallSize" ModalType="" selectedTab="" modalTitle="" modalBody="RemoveModal" removeModalIcon="im-group-passengers" removeModalLinkyes={() => dispatch(deleteProfile(paxInfoID, personKey)).then(() => { setConfmDelAccnt(false); })} removeModalTitle="PassengersPP.lblSureDelteAcnt" onHide={() => setConfmDelAccnt(false)} />
        <div className={styles.dFlex}>
          {
            hasError ? errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>) : <></>
          }
        </div>
        <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
          <div className={`${styles.dFlex} flex-fill ${styles.flexJustifyEnd} modal_btns`}>
            <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>{t('Services.lblCancel')}</Button>
            <Button
              type="submit"
              disabled={isButtonLoading}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
            >
              {t('PassengersPP.lblSave')}
              {
                isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
              }
            </Button>
          </div>
        </div>
      </Form>
    </div>
  );
}

function ChooseCancelModalBody(props: any) {
  const {
    flightInfo, routes, setModalTitle, setModalSize, onContinue,
  } = props;
  return (
    <div>
      <CancelFlightInfoModalbody
        setModalTitle={setModalTitle}
        setModalSize={setModalSize}
        routes={routes}
        flightInfo={flightInfo}
        confirmCode="confirmCode"
        lastName="lastName"
        onContinue={onContinue}
      />
    </div>
  );
}

function FindMybookingCheckinModalBody(props: any) {
  const {
    checkinFlowProps, fromCMS, dispatch,
    routes, ip, selectedCurrencyCode, userData,
    userAgent,
  } = props;
  const { pnrNumber, lastName: lName } = checkinFlowProps;
  const [confirmCode, setConfirmCode] = useState(pnrNumber || '');
  const [lastName, setLastName] = useState(lName || '');
  const [showFlightCheckin, setShowFlightCheckin] = useState(Boolean);
  const [flightInformation, setFlightInfo] = useState(Array);
  const [loadingCheckInFlight, setLoadingCheckInFlight] = useState(true);
  const [haveErorr, setHaveError] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isShowAddBooking, setIsShowAddBooking] = useState(false);
  const [addBookingShow, setAddBookingShow] = useState(false);

  useEffect(() => {
    dispatch(setCheckinSearch(false));
  }, []);
  const checkInFlightHandler = async () => {
    setIsLoading(true);
    const ckResult = await getCheckinFlight(confirmCode, lastName, ip, userAgent, userData);
    const { result } = ckResult.flightsCheckin;
    dispatch(setCheckinSearch(ckResult.isCheckinSearched));
    if (result.isSuccess) {
      if (!isEmpty(ckResult.flightsCheckin.passengersInfo)
        && ckResult.flightsCheckin.passengersInfo.length > 0
        && !isEmpty(ckResult.flightsCheckin.passengersInfo[0])
        && isEmpty(ckResult.flightsCheckin.passengersInfo[0].email)) {
        setIsShowAddBooking(true);
        setHaveError(!result.isSuccess);
        setIsLoading(false);
      } else {
        setShowFlightCheckin(true);
        setFlightInfo(ckResult.flightsCheckin.flightInfo);
        setLoadingCheckInFlight(ckResult.getCheckinFlightResult);
        setIsLoading(false);
      }
    } else {
      setHaveError(!result.isSuccess);
      if (result.msgs[0].msgText === 'PassangersNotMatched') {
        setErrorMsg(`${t('CheckIn.lblFindBookingName')} ${confirmCode} ${t('CheckIn.lblFindBookingNameLast')}`);
      } else if (result.msgs[0].msgText === 'None') {
        setErrorMsg(`${t('CheckIn.lblFindBookingPnr')} ${confirmCode}`);
      } else {
        setErrorMsg(result.msgs[0].msgText);
      }
      // setErrorMsg(result.msgs[0].msgText);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (fromCMS) {
      if (pnrNumber && lName) {
        dispatch(authConnect()).then(() => {
          checkInFlightHandler();
        });
      }
    }
  }, []);
  useEffect(() => {
    if (addBookingShow) {
      setIsLoading(true);
      const redirectUrl = `/BookingManagement?pnr=${pnrNumber}&lastName=${lastName}&isAdd=1`;
      document.location.href = redirectUrl;
    }
  }, [addBookingShow]);

  const { t } = useTranslation();
  if (isShowAddBooking) {
    return (
      <div>
        <div>
          <Alert variant="danger" className={styles.mb0}>
            {t('CheckIn.lblAddErrorMsg')}
          </Alert>
          <Button
            className="btn-continue mt-20"
            onClick={() => { setAddBookingShow(true); }}
            block
          >
            {t('CheckIn.lblAddBooking')}
          </Button>
        </div>
      </div>
    );
  }
  return (
    <div>
      {
        showFlightCheckin && flightInformation.length > 0
          ? (
            <BookingCheckInModalbody
              routes={routes}
              setModalTitle={props.setModalTitle}
              setModalSize={props.setModalSize}
              flightInfo={flightInformation}
              confirmCode={confirmCode}
              lastName={lastName}
              selectedCurrencyCode={selectedCurrencyCode}
            />
          )
          : (
            <Fragment>
              {
                (loadingCheckInFlight && fromCMS) ? (
                  <>
                    {
                      haveErorr ? (
                        <div>
                          <Alert variant="danger" className={styles.mb0}>
                            {errorMsg}
                          </Alert>
                          <Button
                            className="btn-continue mt-20"
                            onClick={() => {
                              window.location.href = 'https://www.flyone.eu';
                            }}
                            block
                          >
                            {t('Errorpage.lblBcktoHme')}
                          </Button>
                        </div>
                      ) : (
                        <>
                          <Row className={styles.labelInline}>
                            <Col className="text=center preloadeHolder">
                              <BounceLoader
                                size={60}
                                color="#123abc"
                                loading={loadingCheckInFlight}
                              />
                            </Col>
                          </Row>
                        </>
                      )
                    }
                  </>
                ) : (
                  <>
                    {
                      haveErorr ? (
                        <div>
                          <Alert variant="danger" className={styles.mb0}>
                            {errorMsg}
                          </Alert>
                          <Button
                            className="btn-continue mt-20"
                            onClick={() => {
                              window.location.href = 'https://www.flyone.eu';
                            }}
                            block
                          >
                            {t('Errorpage.lblBcktoHme')}
                          </Button>
                        </div>
                      ) : (
                        <>
                          <Row className={styles.labelInline}>
                            <Col>
                              <Form.Group>
                                <div className={styles.inlineGroup}>
                                  <Form.Control type="email" value={confirmCode} onChange={(value: any) => { setConfirmCode(value.target.value); }} className={`${styles.formControl} ${confirmCode.length > 0 ? styles.hasContent : ''}`} />
                                  <Form.Label>{t('CheckIn.lblSmplePnr')}</Form.Label>
                                </div>
                              </Form.Group>
                            </Col>
                          </Row>
                          <Row className={`${styles.labelInline} ${styles.mb10}`}>
                            <Col>
                              <Form.Group>
                                <div className={styles.inlineGroup}>
                                  <Form.Control type="text" value={lastName} onChange={(value: any) => { setLastName(value.target.value); }} className={`${styles.formControl} ${lastName.length > 0 ? styles.hasContent : ''}`} />
                                  <Form.Label>
                                    {t('CheckIn.lblPasngrslstname')}
                                  </Form.Label>
                                </div>
                              </Form.Group>
                            </Col>
                          </Row>
                          <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
                            <Button type="button" disabled={isLoading} className={`${styles.btn} ${styles.btnContinue} btn-spinner`} block onClick={() => checkInFlightHandler()}>
                              {t('CheckIn.lblSearch')}
                              {
                                confirmCode && lastName && isLoading ? <Spinner animation="border" variant="light" /> : ''
                              }
                            </Button>
                          </div>
                          <div className={styles.clearfix} />
                          <div className={`${styles.formClm2} ${styles.mt20} d-none`}>
                            <Form.Group className="text-right">
                              <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>
                                {t('FlightResult.lblLogin')}
                              </Button>
                            </Form.Group>
                          </div>
                        </>
                      )
                    }
                  </>
                )
              }
            </Fragment>
          )
      }
    </div>
  );
}


function FindMybookingTabModalBody(props: any) {
  const {
    checkinFlowProps, fromCMS, dispatch, ip, userAgent, userData, portalType,
  } = props;
  const { pnrNumber, lastName: lName } = checkinFlowProps;
  const [confirmCode, setConfirmCode] = useState(pnrNumber || '');
  const [lastName, setLastName] = useState(lName || '');
  const [flightInformation, setFlightInfo] = useState(Array);
  const [haveErorr, setHaveError] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    dispatch(setCheckinSearch(false));
  }, []);
  const checkMyBookingHandler = async () => {
    setIsLoading(true);
    const ckResult = await getCheckinFlight(confirmCode, lastName, ip, userAgent, userData);
    const { result } = ckResult.flightsCheckin;
    dispatch(setCheckinSearch(ckResult.isCheckinSearched));
    if (result.isSuccess) {
      setFlightInfo(ckResult.flightsCheckin.flightInfo);
      setIsLoading(false);
      // setLoadingCheckInFlight(ckResult.getCheckinFlightResult);
      if (portalType === WORKFLOW_TYPE.B2B) {
        document.location.href = `/BookingManagement?pnr=${confirmCode}&lastName=${lastName}${getB2BCookie()}`;
      } else {
        document.location.href = `/BookingManagement?pnr=${confirmCode}&lastName=${lastName}`;
      }
    } else {
      setIsLoading(false);
      setHaveError(!result.isSuccess);
      setErrorMsg(result.msgs[0].msgText);
    }
  };
  useEffect(() => {
    if (fromCMS) {
      if (pnrNumber && lName) {
        dispatch(authConnect()).then(() => {
          checkMyBookingHandler();
        });
      }
    }
  }, []);

  const { t } = useTranslation();
  return (
    <div>
      {
        flightInformation.length > 0
          ? ''
          : (
            <Fragment>
              {
                (fromCMS) ? (
                  <>
                    {
                      haveErorr ? (
                        <div>
                          <Alert variant="danger" className={styles.mb0}>
                            {errorMsg}
                          </Alert>
                          <Button
                            className="btn-continue mt-20"
                            onClick={() => {
                              window.location.href = 'https://www.flyone.eu';
                            }}
                            block
                          >
                            {t('Errorpage.lblBcktoHme')}
                          </Button>
                        </div>
                      ) : ''
                    }
                  </>
                ) : (
                  <>
                    {
                      haveErorr ? (
                        <div>
                          <Alert variant="danger" className={styles.mb0}>
                            {errorMsg}
                          </Alert>
                          <Button
                            className="btn-continue mt-20"
                            onClick={() => {
                              window.location.href = 'https://www.flyone.eu';
                            }}
                            block
                          >
                            {t('Errorpage.lblBcktoHme')}
                          </Button>
                        </div>
                      ) : (
                        <>
                          <Row className={styles.labelInline}>
                            <Col>
                              <Form.Group>
                                <div className={styles.inlineGroup}>
                                  <Form.Control type="email" value={confirmCode} onChange={(value: any) => { setConfirmCode(value.target.value); }} className={`${styles.formControl} ${confirmCode.length > 0 ? styles.hasContent : ''}`} />
                                  <Form.Label>{t('CheckIn.lblSmplePnr')}</Form.Label>
                                </div>
                              </Form.Group>
                            </Col>
                          </Row>
                          <Row className={`${styles.labelInline} ${styles.mb10}`}>
                            <Col>
                              <Form.Group>
                                <div className={styles.inlineGroup}>
                                  <Form.Control type="text" value={lastName} onChange={(value: any) => { setLastName(value.target.value); }} className={`${styles.formControl} ${lastName.length > 0 ? styles.hasContent : ''}`} />
                                  <Form.Label>
                                    {t('CheckIn.lblPasngrslstname')}
                                  </Form.Label>
                                </div>
                              </Form.Group>
                            </Col>
                          </Row>
                          <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
                            <Button type="button" disabled={isLoading} className={`${styles.btn} ${styles.btnContinue} btn-spinner`} block onClick={() => checkMyBookingHandler()}>
                              {t('CheckIn.lblSearch')}
                              {
                                confirmCode && lastName && isLoading ? <Spinner animation="border" variant="light" /> : ''
                              }
                            </Button>
                          </div>
                          <div className={styles.clearfix} />
                          <div className={`${styles.formClm2} ${styles.mt20} d-none`}>
                            <Form.Group className="text-right">
                              <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>
                                {t('FlightResult.lblLogin')}
                              </Button>
                            </Form.Group>
                          </div>
                        </>
                      )
                    }
                  </>
                )
              }
            </Fragment>
          )
      }
    </div>
  );
}

function AddbookingModalbody(props: any) {
  const { dispatch, userInfo } = props;
  const { pnr: pnrVal, lastName } = userInfo || { lastName: '', pnr: '' };
  const [validated, setValidated] = useState(false);
  const [pnr, setPnr] = useState(!isEmpty(userInfo) && !isEmpty(pnrVal) ? pnrVal : '');
  const [fname, setName] = useState(!isEmpty(userInfo) && !isEmpty(lastName) ? lastName : '');
  const [isFailed, setIsFailed] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [isloading, setIsloading] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');
  // const [lNameTouched, setLNameTouched] = useState(false);
  // const [islNameMatch, setIslNameMatch] = useState(false);

  // const checkPNRLName = (ev: any) => {
  //   const { target } = ev;
  //   const { value } = target;
  //   setIslNameMatch(false);
  //   setLNameTouched(false);
  //   if (value.length !== 0) {
  //     setLNameTouched(true);
  //   }
  //   if (value === userInfo) {
  //     setIslNameMatch(true);
  //   }
  // };
  const AddBookingHandler = (event: any) => {
    setIsFailed(false);
    setIsSuccess(false);
    if (pnr.length === 0 || fname.length === 0 || pnr.length === 0 && fname.length === 0) {
      setIsloading(false);
    } else {
      setIsloading(true);
    }
    const form = event.currentTarget;
    const obj: any = serialize(form, { hash: true });
    if (form.checkValidity()) {
      setIsloading(true);
      dispatch(AddBookingToProfile((obj.pnr).toUpperCase(), obj.fname)).then((result: any) => {
        setIsloading(false);
        if (!result.isSuccess) {
          if (result.msgs[0].msgText === 'PassangersNotMatched') {
            setErrorMsg(`${t('CheckIn.lblFindBookingName')} ${obj.pnr} ${t('CheckIn.lblFindBookingNameLast')}`);
          } else if (result.msgs[0].msgText === 'None') {
            setErrorMsg(`${t('CheckIn.lblFindBookingPnr')} ${obj.pnr}`);
          } else {
            setErrorMsg(result.msgs[0].msgText);
          }
          // const { msgs } = result;
          // setErrorMsg(msgs);
          setIsFailed(true);
        } else {
          setIsSuccess(true);
          window.location.reload();
        }
      });
      // dispatch(userLogin(obj.userdata.email, obj.userdata.password));
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      event.preventDefault();
      event.stopPropagation();
    }
    setValidated(true);
  };
  const { t } = useTranslation();
  return (
    <div>
      <Form id="loginForm" noValidate validated={validated} onSubmit={(ev: any) => AddBookingHandler(ev)}>
        {
          isFailed ? (
            <Row>
              <Col>
                {
                  // errorMsg.map((error:any) => <Alert variant="danger"><FormLabel className={styles.mb0}>{error.msgText}</FormLabel></Alert>)
                  errorMsg && <Alert variant="danger"><FormLabel className={styles.mb0}>{errorMsg}</FormLabel></Alert>
                }
                {/* <Alert variant="danger" className={styles.mb0}>
                  <FormLabel className={styles.mb0}>
                    {t('PassengersPP.lblUnFetchDetls')}
                  </FormLabel>
                </Alert> */}
                <div className={styles.gap} />
              </Col>
            </Row>
          ) : ''
        }
        {
          isSuccess ? (
            <Row>
              <Col>
                <Alert variant="success" className={styles.mb0}>
                  <FormLabel className={styles.mb0}>
                    {t('PassengersPP.lblBookAddSuccess')}
                  </FormLabel>
                </Alert>
                <div className={styles.gap} />
              </Col>
            </Row>
          ) : ''
        }
        <Row className={styles.labelInline}>
          <Col>
            <Form.Group>
              <div className={styles.inlineGroup}>
                <Form.Control
                  type="text"
                  value={pnr}
                  id="Addbkpnr"
                  name="pnr"
                  required
                  onChange={(ev: any) => { setPnr(ev.target.value); }}
                  className={`${styles.formControl} ${pnr.length > 0 ? styles.hasContent : ''}`}
                />
                <Form.Label>{t('PaymentPage.lblCnfrmtnCde')}</Form.Label>
              </div>
            </Form.Group>
          </Col>
        </Row>
        <Row className={`${styles.labelInline} ${styles.mb10}`}>
          <Col>
            <Form.Group>
              <div className={styles.inlineGroup}>
                <Form.Control
                  type="text"
                  value={fname}
                  id="Addbkfname"
                  name="fname"
                  required
                  onChange={(ev: any) => { setName(ev.target.value); }}
                  className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`}
                />
                <Form.Label>
                  {t('CheckIn.lblPasngrslstname')}
                </Form.Label>
              </div>
            </Form.Group>
          </Col>
        </Row>
        <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
          <Button type="submit" className={`${styles.btn} ${styles.btnContinue} btn-spinner`} disabled={isloading} block>
            {t('FlightResult.lblAdd')}
            {
              pnr && fname && isloading ? <Spinner animation="border" variant="light" /> : ''
            }
          </Button>
        </div>
      </Form>
    </div>
  );
}

function FindMybookingModalbody(props: any) {
  const { onContinue } = props;
  const [pnr, setPnr] = useState('');
  const [fname, setName] = useState('');
  const { t } = useTranslation();
  return (
    <div>
      <Row className={styles.labelInline}>
        <Col>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={pnr} onChange={(value: any) => { setPnr(value.target.value); }} className={`${styles.formControl} ${pnr.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('PaymentPage.lblCnfrmtnCde')}</Form.Label>
            </div>
          </Form.Group>
        </Col>
      </Row>
      <Row className={`${styles.labelInline} ${styles.mb10}`}>
        <Col>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={fname} onChange={(value: any) => { setName(value.target.value); }} className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>
                {t('CheckIn.lblPasngrslstname')}
              </Form.Label>
            </div>
          </Form.Group>
        </Col>
      </Row>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={() => onContinue(pnr, fname)}>{t('CheckIn.lblSearch')}</Button>
      </div>
    </div>
  );
}
function BookingCheckInModalbody(props: any) {
  const { t } = useTranslation();
  const { setModalTitle, setModalSize } = props;
  setModalTitle(t('FlightResult.lblChoseFlight'));
  setModalSize('extra_large_popup');

  const { flightInfo } = props;
  const { flights } = flightInfo[0];
  const [flightsDoBooking, setFlightsDoBooking] = useState(Array<any>());
  const [flightDirection, setFlightDirection] = useState(0);

  const selectOnlyThis = (id: any, status: boolean) => {
    const myCheckbox = document.getElementsByName('checkin-checkbox');
    Array.prototype.forEach.call(myCheckbox, el => {
      el.checked = false;
    });
    if (!status) return;
    id.checked = true;
  };

  const flightsCheckinAction = (item: any, status: any) => {
    if (!item.isCheckInAvailable) return;

    if (!status) {
      const flights = flightsDoBooking.filter(x => x.flightKey !== item.flightKey);
      setFlightsDoBooking(flights);
      setFlightDirection(0);
    } else {
      const arrayItems = [];
      arrayItems.push(item);
      setFlightsDoBooking(arrayItems);
      setFlightDirection(item.flightDirection);
    }
    const element = document.getElementById(`checkin-${item.flightKey}`);
    selectOnlyThis(element, status);
  };

  const handlerCheckinFlights = (flightsDoBooking: any) => {
    const flightsQuery = [];

    for (let i = 0; i < flightsDoBooking.length; i++) {
      const item = flightsDoBooking[i];

      for (let j = 0; j < item.segments.length; j++) {
        flightsQuery.push(`${item.flightKey}~${item.segments[j].segmentKey}`);
      }
    }
    const flights = flightsQuery.join('&flights=');
    const redirectUrl = `/Checkin?pnrNumber=${props.confirmCode}&lastName=${props.lastName}&flights=${flights}&direction=${flightDirection}`;
    document.location.href = redirectUrl;
  };

  return (
    <div className="checkin_choose_flight">
      {
        flights.map((flight: any) => {
          const data = getformInfo(flight);
          const {
            depCity,
            depDate,
            depTime,
            duration,
          } = data;
          const {
            arrCity, arrDate, arrTime, flightNumber, oprAirlineCode,
          } = data;
          const departInfo = {
            depCity, depDate, depTime, flightNumber, oprAirlineCode,
          };
          const arrivalInfo = {
            arrCity, arrDate, arrTime, connections: flight.segments.length,
          };
          const rsnCode = flight.reasonCode;
          const checkinAvaiable = flight.isCheckInAvailable;
          const checkoutAvaiable = flight.isCheckOutAvailable;
          return (
            <Fragment>
              <h5>{flight.flightDirection === 1 ? t('CheckIn.lblOutbndflight') : t('CheckIn.lblInbundflight')}</h5>
              <div className={`${styles.boxContent} ${flightsDoBooking.length > 0 && flightsDoBooking.filter(x => x.flightKey === flight.flightKey).length > 0 ? 'active' : ''}`}>
                <Form.Check className={styles.customCheckbox} id={`checkin-${flight.flightKey}`} {...!checkinAvaiable ? { disabled: true } : ''}>
                  <Form.Check.Input name="checkin-checkbox" type="checkbox" {...!checkinAvaiable ? { disabled: true } : ''} onClick={(ev: any) => flightsCheckinAction(flight, ev.target.checked)} />
                  <Form.Check.Label>
                    <FlightDetailInfo
                      duration={duration}
                      arrivalInfo={arrivalInfo}
                      departInfo={departInfo}
                      routes={props.routes}
                    />
                    <div className="checkin_avail">
                      {checkoutAvaiable
                        ? <p>{checkinAvaiable == false && checkoutAvaiable == true ? t('ThanksPage.lblChkinAlready') : null}</p>
                        : <p className={(!checkinAvaiable && rsnCode !== 0) ? 'notAvailChckin' : ''}>{checkinAvaiable ? t('PaymentPage.lblChkinAvlble') : rsnCode !== 0 ? t('CheckIn.lblChkinnotAvlble') : t('ThanksPage.lblChkinUnAvlble')}</p>
                      }
                      {/* <p>{checkinAvaiable ? t('PaymentPage.lblChkinAvlble') : t('CheckIn.lblChkinnotAvlble')}</p> */}
                    </div>
                  </Form.Check.Label>
                </Form.Check>
              </div>
            </Fragment>
          );
        })
      }
      <Button {...flightsDoBooking.length === 0 ? { disabled: true } : ''} type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={() => handlerCheckinFlights(flightsDoBooking)}>{t('CheckIn.lblChkin')}</Button>
      <div className={styles.clearfix} />
      <div className={`${styles.formClm2} ${styles.mt20} d-none`}>
        {/* <Form.Group>
          <Button variant="link">{t('FlightResult.lblFrgtPswrd')}</Button>
        </Form.Group> */}
        <Form.Group className="text-right">
          <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>{t('FlightResult.lblContinue')}</Button>
        </Form.Group>
      </div>
    </div>
  );
}
function ConnectionIcon(length: number) {
  const icon = [];
  for (let i = 1; i <= length; i += 1) {
    icon.push(
      <span>
        <i className={`${styles.foIcon} ${styles.iconFoFlight2Right}`} />
      </span>,
    );
  }
  return icon;
}
function FlightDetailInfo(props: any) {
  const {
    arrivalInfo, departInfo, duration, routes,
  } = props;
  return (
    <ul key={`${departInfo.depCity}_${arrivalInfo.arrCity}`} className={`${styles.routeInfoList} ${styles.resetList}`}>
      <li className={styles.cityInfo}>
        <p>{departInfo ? departInfo.depDate : 'Sat, 25 May 2019'}</p>
        <h2>{departInfo ? departInfo.depTime : '17:20'}</h2>
        <p>
          {departInfo ? getAirportNameByCode(departInfo.depCity, routes) : 'Copenhagen'}
        </p>
      </li>
      <li className={styles.durInfo}>
        <p>{duration}</p>
        <div className={styles.stopRepr}>
          {arrivalInfo.connections > 0 && arrivalInfo.connections !== undefined ? ConnectionIcon(arrivalInfo.connections) : ''}
        </div>
        <p>{departInfo.flightNumber ? `${departInfo.oprAirlineCode} ${departInfo.flightNumber}` : 'FR 2982'}</p>
      </li>
      <li className={styles.cityInfo}>
        <p>
          {
            arrivalInfo ? arrivalInfo.arrDate : 'Sat, 25 May 2019'
          }
        </p>
        <h2>{arrivalInfo ? arrivalInfo.arrTime : '15:20'}</h2>
        <p>
          {
            arrivalInfo ? getAirportNameByCode(arrivalInfo.arrCity, routes) : 'Chisinau'
          }
        </p>
      </li>
    </ul>
  );
}

function CancelFlightInfoModalbody(props: any) {
  const { t } = useTranslation();
  const { setModalTitle, setModalSize } = props;
  setModalTitle(t('FlightResult.lblChoseFlight'));
  setModalSize('extra_large_popup');
  const { flightInfo } = props;
  const { flights } = flightInfo[0];
  const [flightsDoCancel, setFlightsDoCancel] = useState(Array<any>());

  const flightsCancelAction = (item: any, status: any) => {
    if (!status) {
      const flightsList = flightsDoCancel.filter(x => x !== item.flightKey);
      setFlightsDoCancel(flightsList);
    } else {
      const arrayItems = flightsDoCancel;
      arrayItems.push(item.flightKey);
      setFlightsDoCancel(arrayItems);
    }
  };

  return (
    <div className="cancel_choose_flight">
      {
        flights.map((flight: any) => {
          const data = getformInfo(flight);
          const { isExpired, isCancelAllowed } = flight;
          const {
            depCity,
            depDate,
            depTime,
            duration,
          } = data;
          const {
            arrCity, arrDate, arrTime, flightNumber, oprAirlineCode,
          } = data;
          const departInfo = {
            depCity, depDate, depTime, flightNumber, oprAirlineCode,
          };
          const arrivalInfo = {
            arrCity, arrDate, arrTime, connections: flight.segments.length,
          };
          if (isExpired || !isCancelAllowed) return <></>;
          return (
            <Fragment>
              <h5>{flight.flightDirection === 1 ? t('CheckIn.lblOutbndflight') : t('CheckIn.lblInbundflight')}</h5>
              <div className={`${styles.boxContent} ${flightsDoCancel.length > 0 && flightsDoCancel.filter(x => x.flightKey === flight.flightKey).length > 0 ? 'active' : ''}`}>
                <Form.Check className={styles.customCheckbox} id={`cancel-${flight.flightKey}`}>
                  <Form.Check.Input name="checkin-checkbox" type="checkbox" onClick={(ev: any) => flightsCancelAction(flight, ev.target.checked)} />
                  <Form.Check.Label>
                    <FlightDetailInfoForCancel
                      duration={duration}
                      arrivalInfo={arrivalInfo}
                      departInfo={departInfo}
                      routes={props.routes}
                    />
                  </Form.Check.Label>
                </Form.Check>
              </div>
            </Fragment>
          );
        })
      }
      <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={() => props.onContinue(flightsDoCancel)}>{t('FlightResult.lblContinue')}</Button>
      <div className={styles.clearfix} />
      <div className={`${styles.formClm2} ${styles.mt20} d-none`}>
        <Form.Group className="text-right">
          <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>{t('FlightResult.lblContinue')}</Button>
        </Form.Group>
      </div>
    </div>
  );

  function FlightDetailInfoForCancel(props: any) {
    const {
      arrivalInfo, departInfo, duration, routes,
    } = props;
    return (
      <ul key={`${departInfo.depCity}_${arrivalInfo.arrCity}`} className={`${styles.routeInfoList} ${styles.resetList}`}>
        <li className={styles.cityInfo}>
          <p>{departInfo ? departInfo.depDate : 'Sat, 25 May 2019'}</p>
          <h2>{departInfo ? departInfo.depTime : '17:20'}</h2>
          <p>
            {departInfo ? getAirportNameByCode(departInfo.depCity, routes) : 'Copenhagen'}
          </p>
        </li>
        <li className={styles.durInfo}>
          <p>{duration}</p>
          <div className={styles.stopRepr}>
            {arrivalInfo.connections > 0 && arrivalInfo.connections !== undefined ? ConnectionIcon(arrivalInfo.connections) : ''}
          </div>
          <p>{departInfo.flightNumber ? `${departInfo.oprAirlineCode} ${departInfo.flightNumber}` : 'FR 2982'}</p>
        </li>
        <li className={styles.cityInfo}>
          <p>
            {
              arrivalInfo ? arrivalInfo.arrDate : 'Sat, 25 May 2019'
            }
          </p>
          <h2>{arrivalInfo ? arrivalInfo.arrTime : '15:20'}</h2>
          <p>{arrivalInfo ? getAirportNameByCode(arrivalInfo.arrCity, routes) : 'Chisinau'}</p>
        </li>
      </ul>
    );
  }
}

function SessionEndModalbody(props: any) {
  const { returnTo, dispatch, userData } = props;
  const { t } = useTranslation();
  const onReload = () => {
    window.location.href = (
      !isEmpty(returnTo)
      && returnTo
    ) ? returnTo : process.env.PROD_INTERNAL_PATH;
  };

  const handleLogin = () => {
    dispatch(CheckUserlogin(true));
  };
  return (
    <div className="sessionend_modal">
      <p>{t('Services.lblUrSesnIsOvrPlsStrtAgn')}</p>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt20} ${styles.mb30}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} onClick={onReload} block>{t('Services.lblRestrtBkng')}</Button>
      </div>
      {!userData && (
        <div className={`${styles.formClm2} ${styles.dFlex} ${styles.flexAlignCenter} ${styles.mt20}`}>
          <Form.Group className={styles.mb0}>
            <Button variant="link" className={styles.link} onClick={() => handleLogin()}>
              {t('Services.lblAlrdyHveAnAcnt')}
            </Button>
          </Form.Group>
          <Form.Group className={`${'text-right'} ${styles.mb0}`}>
            <Button type="button" className={`${styles.btn} ${styles.loginBtn}`} onClick={() => handleLogin()}>
              {t('FlightResult.lblLogin')}
            </Button>
          </Form.Group>
        </div>
      )}
    </div>
  );
}

function SessionExpiresINModalbody(props: any) {
  const { onHide, returnTo } = props;
  const { t } = useTranslation();
  const onReload = () => {
    window.location.href = (
      !isEmpty(returnTo)
      && returnTo
    ) ? returnTo : process.env.PROD_INTERNAL_PATH;
  };
  return (
    <div className="sessionend_modal">
      <div className={`${styles.dFlex} justify-content-center ${styles.mt20} f_title`}>
        <h4>{t('Services.lblUntlExpireText')}</h4>
      </div>
      <div className={`${styles.formClm2} ${styles.dFlex} ${styles.flexAlignCenter} ${styles.mt20}`}>
        <Form.Group className={styles.mb0}>
          <Button variant="link" className={styles.btnBlock} onClick={onReload}>{t('Services.lbStartAgainCaption')}</Button>
        </Form.Group>
        <Form.Group className={`${'text-right'} ${styles.mb0}`}>
          <Button type="button" className={`${styles.btn} ${styles.btnPrimary} ${styles.btnBlock}`} onClick={onHide}>{t('Services.lbCntnueBookingCaption')}</Button>
        </Form.Group>
      </div>
    </div>
  );
}

function BookingFailureModalbody(props: any) {
  const { onClose, failureReason } = props;
  const { t } = useTranslation();
  return (
    <div className="payment_failure_modal">
      <p className={styles.textBold}>{t('PaymentPage.lblBookPNRFailureText')}</p>
      <ul className={`${styles.infoList} ${styles.resetList}`}>
        {
          map(failureReason, reason => <li>{reason.msgText}</li>)
        }
      </ul>
      <Button onClick={onClose} className={`${styles.btnContinue} ${styles.btnBlock}`}>
        {t('PaymentPage.lblTryagain')}
      </Button>
    </div>
  );
}
function PaymentFailureModalbody(props: any) {
  const { onClose } = props;
  const { t } = useTranslation();
  return (
    <div className="payment_failure_modal">
      <p className={styles.textBold}>{t('PaymentFailure.lblPymetreasonHeader')}</p>
      <ul className={`${styles.infoList} ${styles.resetList}`}>
        <li style={{ color: 'red' }}>{t('PaymentFailure.lblPymetreason4')}</li>
        <li>{t('PaymentFailure.lblPymetreason1')}</li>
        <li>{t('PaymentFailure.lblPymetreason2')}</li>
        <li>{t('PaymentFailure.lblPymetreason3')}</li>
      </ul>
      <Button onClick={onClose} className={`${styles.btnContinue} ${styles.btnBlock}`}>
        {t('PaymentFailure.lblPymetTryAgainBtnLabel')}
      </Button>
      <Row className={`${styles.mt20} ${styles.mb20} d-none`}>
        <Col md={9} sm={12} xs={12}>
          <p className={`${styles.textBold} ${styles.noMar}`}>
            {t('PaymentFailure.lblPymetAlternateTryHeader')}
          </p>
          <p className={styles.noMar}>
            {t('PaymentFailure.lblPymetCurrencyTransfer')}
          </p>
        </Col>
        <Col md={3} sm={12} xs={12} className={styles.textRight}>
          <Dropdown>
            <Dropdown.Toggle id="currency-type" variant="secondary">
              EUR
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>EUR</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </Col>
      </Row>
      <Button className={`${styles.btnGray} ${styles.btnBlock} d-none`}>
        {t('PaymentFailure.lblPymetAlternateBtnLabel')}
      </Button>
    </div>
  );
}

function ChangeFlightModalbody(props: any) {
  const {
    onContinue, priceChange, exchangeRate, selectedCurrencyCode,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="change_flight_fee">
      <h4>{t('ManageBooking.lblSelectedFlightFare')}</h4>
      <div className={`${styles.dFlex} ${styles.payByTransfer} ${styles.flexAlignCenter} ${styles.flexJustifySpacebetween} ${styles.mb10}`}>
        <p className={styles.mb0}>{t('ManageBooking.lblNewIteneryCst')}</p>
        <div className="price_txt">{formatCurrency(priceChange.newItineraryAmount, priceChange.currency, exchangeRate, selectedCurrencyCode)}</div>
      </div>
      <div className={`${styles.dFlex} ${styles.payByTransfer} ${styles.flexAlignCenter} ${styles.flexJustifySpacebetween} ${styles.mb10}`}>
        <p className={styles.mb0}>{t('ManageBooking.lblChangeFlightFee')}</p>
        <div className="price_txt">{formatCurrency(priceChange.changeFee, priceChange.currency, exchangeRate, selectedCurrencyCode)}</div>
      </div>
      <hr />
      <h4>{t('ManageBooking.lblAmntPay')}</h4>
      <div className={`${styles.dFlex} ${styles.payByTransfer} ${styles.flexAlignCenter} ${styles.flexJustifySpacebetween} ${styles.mb10}`}>
        <p className={styles.mb0}>{t('ManageBooking.lblOldItinerary')}</p>
        <div className="price_txt">{formatCurrency(priceChange.oldItineraryAmount, priceChange.currency, exchangeRate, selectedCurrencyCode)}</div>
      </div>
      <div className={`${styles.dFlex} ${styles.payByTransfer} ${styles.flexAlignCenter} ${styles.flexJustifySpacebetween} ${styles.mb10}`}>
        <p className={`${styles.mb0} ${'text-bold'}`}>{t('ManageBooking.lblAmntPayable')}</p>
        <div className="price_txt">{formatCurrency(priceChange.totalAmountToPay, priceChange.currency, exchangeRate, selectedCurrencyCode)}</div>
      </div>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt30}`}>
        <Button onClick={onContinue} type="button" className={`${styles.btn} ${styles.btnContinue}`} block>{t('SeatPage.lblCnfrm')}</Button>
      </div>
    </div>
  );
}

function ChangeNameModalbody(props: any) {
  const {
    onContinue, changePaxPriceInfo,
    exchangeRate, selectedCurrencyCode,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="change_flight_fee">
      <div className={`${styles.dFlex} ${styles.payByTransfer} ${styles.flexAlignCenter} ${styles.flexJustifySpacebetween} ${styles.mb10}`}>
        <p className={styles.mb0}>{t('ManageBooking.lblNamechngFee')}</p>
        <div className="price_txt">{formatCurrency(changePaxPriceInfo.amount, changePaxPriceInfo.currency || DEFAULT_CURRENCY_CODE, exchangeRate, selectedCurrencyCode)}</div>
      </div>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt30}`}>
        <Button onClick={onContinue} type="button" className={`${styles.btn} ${styles.btnContinue}`} block>{t('SeatPage.lblCnfrm')}</Button>
      </div>
    </div>
  );
}


function MakeChangesModalbody(props: any) {
  const { t } = useTranslation();
  const {
    isChangeFlightAllowed, isChangePaxAllowed, isCancelFlightAllowed, multipleFOP,
  } = props;
  const [makeChangeValue, setMakeChangeValue] = useState('');
  const handleSetMakeChangeValue = (obj: string) => {
    if (obj === 'ChangeFlight' && !isChangeFlightAllowed) {
      setMakeChangeValue('');
    } else if (obj === 'CancelFlight' && !isCancelFlightAllowed) {
      setMakeChangeValue('');
    } else if (obj === 'ChangePassenger' && !isChangePaxAllowed) {
      setMakeChangeValue('');
    } else {
      setMakeChangeValue(obj);
    }
  };

  return (
    <div className="make_changes_modal">
      <h5 className={`${styles.mt0}`}>{t('ManageBooking.lblMakeChange')}</h5>
      <Form id="make_changes_modal">
        <div className={`${styles.formClm2} ${styles.labelInline}`}>
          <div className={styles.customRadio2}>
            <Form.Group>
              <Form.Check
                type="radio"
                {...makeChangeValue === 'ChangePassenger' ? { checked: true } : null}
                name="makeChange"
                value="ChangePassenger"
                {...!isChangePaxAllowed ? { readOnly: true } : null}
                {...!isChangePaxAllowed ? { disabled: true } : null}
                label={
                  (
                    <span
                      role="button"
                      tabIndex={0}
                      onClick={() => handleSetMakeChangeValue('ChangePassenger')}
                    >
                      {t('ManageBooking.lblChgpasngrdtls')}
                    </span>
                  )
                }
              />
            </Form.Group>
          </div>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.labelInline}`}>
          <div className={styles.customRadio2}>
            <Form.Group>
              <Form.Check
                type="radio"
                {...makeChangeValue === 'ChangeFlight' ? { checked: true } : null}
                name="makeChange"
                value="ChangeFlight"
                {...!isChangeFlightAllowed ? { readOnly: true } : null}
                {...!isChangeFlightAllowed ? { disabled: true } : null}
                label={
                  (
                    <span
                      role="button"
                      tabIndex={0}
                      onClick={() => handleSetMakeChangeValue('ChangeFlight')}
                    >
                      {t('FlightResult.lblChangeFlight')}
                    </span>
                  )
                }
              />
            </Form.Group>
          </div>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.labelInline}`}>
          <div className={styles.customRadio2}>
            <Form.Group>
              <Form.Check
                type="radio"
                {...makeChangeValue === 'CancelFlight' ? { checked: true } : null}
                {...!isCancelFlightAllowed ? { readOnly: true } : null}
                {...!isCancelFlightAllowed ? { disabled: true } : null}
                name="makeChange"
                value="CancelFlight"
                label={
                  (
                    <span
                      role="button"
                      tabIndex={0}
                      onClick={() => handleSetMakeChangeValue('CancelFlight')}
                    >
                      {t('ManageBooking.lblCnlFlgtrefndFONEact')}
                    </span>
                  )
                }
              />
            </Form.Group>
          </div>
        </div>
        {
          multipleFOP ? (
            <span className="multiplefop msgbox">
              {`${t('FlightResult.lblMultipleFOPMsg')} `}
              <a className="multiplefop" href={t('FlightResult.lblMultipleFOPlink')} target="_blank">{t('FlightResult.lblMultipleFOPMsgHelpdesk')}</a>
              {` ${t('FlightResult.lblMultipleFOPMsgHelpdeskrest')}`}
            </span>
          ) : <Fragment />
        }
        <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt30} ${styles.mb30}`}>
          <Button disabled={!makeChangeValue} type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={() => props.onContinue(makeChangeValue)}>{t('FlightResult.lblContinue')}</Button>
        </div>
      </Form>
    </div>
  );
}
function CancelFlightFailedModal(props: any) {
  const { onHide, result } = props;
  const [errmsg] = useState(result.msgs || {});
  const { t } = useTranslation();
  return (
    <div>
      <Row className={styles.labelInline}>
        <Col>
          <p>
            {
              !isEmpty(errmsg) && errmsg[0].code === CANCEL_ERROR_CODE.CODE_1303
                ? <>{errmsg[0].msgText}</>
                : <>{t('BookingOverview.FailScsfulycncledurbokng')}</>
            }
          </p>
        </Col>
      </Row>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={onHide}>{t('FlightResult.lblOK')}</Button>
      </div>
    </div>
  );
}
function BookingCancelSuccess(props: any) {
  const { onContinue } = props;
  const { t } = useTranslation();
  return (
    <div>
      <Row className={styles.labelInline}>
        <Col>
          <p>
            {t('BookingOverview.UhvScsfulycncledurbokng')}
          </p>
        </Col>
      </Row>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={onContinue}>{t('FlightResult.lblOK')}</Button>
      </div>
    </div>
  );
}
function ModalActionSuccess(props: any) {
  const { onContinue, sucsMsg } = props;
  const { t } = useTranslation();
  return (
    <div>
      <Row className={styles.labelInline}>
        <Col>
          <p>
            {
              t(sucsMsg)
            }
            {/* {t('BookingOverview.UhvScsfulycncledurbokng')} */}
          </p>
        </Col>
      </Row>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block onClick={onContinue}>{t('FlightResult.lblOK')}</Button>
      </div>
    </div>
  );
}
function SubscribeNewsletterModalbody() {
  const [email, setEmail] = useState('');
  const { t } = useTranslation();
  return (
    <div>
      <Row className={styles.labelInline}>
        <Col>
          <p>
            {t('FlightResult.lblSubscrbtoournwltr')}
          </p>
        </Col>
      </Row>
      <Row className={`${styles.labelInline} ${styles.mb10}`}>
        <Col>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control type="email" value={email} onChange={(value: any) => { setEmail(value.target.value); }} className={`${styles.formControl} ${email.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
            </div>
          </Form.Group>
        </Col>
      </Row>
      <Row className={styles.mb25}>
        <Col>
          <Form.Check className={styles.customCheckbox} id="expressbook">
            <Form.Check.Input required type="checkbox" name="check" />
            <Form.Check.Label>
              {t('Settings.lblAcptPrvyNtce')}
              <a rel="noopener noreferrer" target="_blank" href={`https://www.flyone.eu/${typeof Cookies.get(CURRENT_LANG) !== 'undefined' ? Cookies.get(CURRENT_LANG) : 'en' ? Cookies.get(CURRENT_LANG) : 'en'}/Privacy-policy`}>
                {t('PassengersPP.lblPrvcyNote')}
              </a>
            </Form.Check.Label>
          </Form.Check>
        </Col>
      </Row>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`} block>{t('Settings.lblSubscribe')}</Button>
      </div>
    </div>
  );
}
function SocialMediaRegistration(props: any) {
  const { t } = useTranslation();
  const { isPrefill, socialLoginInfo, dispatch } = props;

  const [email, setEmail] = useState('');
  const [fname, setFName] = useState('');
  const [lname, setLName] = useState('');
  const [socialToken, setSocialToken] = useState('');
  const [gender, setGender] = useState('male');
  const [title, setTitle] = useState('mr');
  const [signupvalidated, setSignupValidated] = useState(false);
  const [isloading, setIsloading] = useState(false);
  const [isSuccessMsg, setisSuccessMsg] = useState(false);
  const [isFailed, setisFailed] = useState(false);
  const [emalValid, setemalValid] = useState(true);
  const [signupErr, setSignupErr] = useState('');
  const [isEmailReadOnly, setIsEmailReadOnly] = useState(true);

  useEffect(() => {
    if (isPrefill) {
      const aplhaRegex = /^[a-zA-Z ]+$/;
      const {
        firstName, lastName, userName, socialToken: socialTkn,
      } = socialLoginInfo;
      setEmail(typeof userName !== 'undefined' ? userName : '');
      setFName(typeof firstName !== 'undefined' && aplhaRegex.test(firstName) ? firstName : '');
      setLName(typeof lastName !== 'undefined' && aplhaRegex.test(lastName) ? lastName : '');
      setSocialToken(typeof socialTkn !== 'undefined' ? socialTkn : '');
    }
    if (typeof socialLoginInfo.userName === 'undefined') {
      setIsEmailReadOnly(false);
    }
  }, [socialLoginInfo]);

  const handleValidation = (type: any, value: any) => {
    switch (type) {
      case 'emailValidation': {
        const lastAtPos = value.lastIndexOf('@');
        const lastDotPos = value.lastIndexOf('.');
        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && value.indexOf('@@') === -1 && lastDotPos > 2 && (value.length - lastDotPos) > 2)) {
          setEmail('');
          setemalValid(false);
          return false;
        }
        setemalValid(true);
        setEmail(value);
        return true;
      }
      default: return true;
    }
  };
  const nameHandler = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value, id } = target;
    switch (id) {
      case 'firstName':
        if (!regex.test(value)) {
          setFName(value.slice(0, -1));
        } else {
          setFName(value);
        }
        break;
      case 'lastName':
        if (!regex.test(value)) {
          setLName(value.slice(0, -1));
        } else {
          setLName(value);
        }
        break;
      default: break;
    }
  };
  const handleGender = (e: any) => {
    switch (e.target.id) {
      case 'genderFemale':
        setGender(e.target.value);
        setTitle('mrs');
        break;
      case 'genderMale':
        setGender(e.target.value);
        setTitle('mr');
        break;
      default:
        setTitle('mr');
    }
  };
  const in30Minutes = 1;

  const signupHandler = (event: any) => {
    setisSuccessMsg(false);
    setSignupErr('');
    const form = event.currentTarget;
    const obj: any = serialize(form, { hash: true });
    const redirecrUrl = sessionStorage.getItem(OAUTH_CLIENT_REDIRECT_URI) || '/Profile';
    if (form.checkValidity()) {
      const { profileInfo } = obj;
      setIsloading(true);
      dispatch(socialMediaSignup({ ...profileInfo, socialToken })).then((data: any) => {
        setIsloading(false);
        setisFailed(false);
        setisSuccessMsg(true);
        if (data.result.isSuccess) {
          // Cookies('ISUSER_LOGGED', data.result.isSuccess.toString(), oauthOptions);
          // Cookies('USER_DATA', JSON.stringify(data.paxLoginInfo), oauthOptions);
          Cookies.set(ISUSER_LOGGED, 'true', {
            domain: process.env.AUTH_COOKIE_DOMAIN,
            expires: in30Minutes,
            secure: true,
          });
          Cookies.set(USER_DATA, data.paxLoginInfo, {
            expires: in30Minutes,
            domain: process.env.AUTH_COOKIE_DOMAIN,
            secure: true,
          });
          if (redirecrUrl.includes('flyone-cms') || redirecrUrl.includes('https://flyone.eu')) {
            window.location.href = `${process.env.CURRENT_PATH}/Profile`;
          } else {
            window.location.href = redirecrUrl;
          }
        } else {
          setisSuccessMsg(false);
          setisFailed(true);
          setSignupErr(data.result.msgs[0].msgText);
        }
        sessionStorage.removeItem(SOCIAL_USERINFO);
      });
    }
    setSignupValidated(true);
    event.preventDefault();
    event.stopPropagation();
  };
  return (
    <div className="socialmediaSignup">
      <Form id="signupForm" noValidate validated={signupvalidated} onSubmit={(ev: any) => signupHandler(ev)}>
        {/* {
          isPrefill ? <Alert variant="warning">{t('FlightResult.lblChkNameEntrdPasprt')}</Alert> : <></>
        } */}
        <Alert variant="warning">{t('FlightResult.lblChkNameEntrdPasprt')}</Alert>
        {
          isSuccessMsg
            ? (
              <Alert variant="success">
                {t('Loginmodal.lblPrflRegstrSucs')}
              </Alert>
            )
            : ''
        }
        {
          (isFailed && !isEmpty(signupErr))
            ? <Alert variant="danger">{signupErr}</Alert>
            : ''
        }
        <div className={`${styles.formClm2} ${styles.labelInline}`}>
          <Form.Control type="hidden" value={title} name="profileInfo[title]" />
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="text"
                name="profileInfo[firstName]"
                id="firstName"
                value={fname}
                onChange={(value: any) => {
                  setFName(value.target.value);
                  nameHandler(value);
                }}
                className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('FlightResult.lblFirstName')}</Form.Label>
            </div>
          </Form.Group>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="text"
                name="profileInfo[lastName]"
                id="lastName"
                value={lname}
                onChange={(value: any) => {
                  setLName(value.target.value);
                  nameHandler(value);
                }}
                className={`${styles.formControl} ${lname.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('FlightResult.lblLastName')}</Form.Label>
            </div>
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.labelInline} ${styles.radioWide}`}>
          <Form.Group>
            <span className={styles.customRadio}>
              <Form.Check
                type="radio"
                name="profileInfo[gender]"
                value="female"
                checked={gender === 'female'}
                onChange={handleGender}
                label={<span className={styles.btnGray}>{t('PaymentPage.lblFemale')}</span>}
                id="genderFemale"
              />
            </span>
          </Form.Group>
          <Form.Group>
            <span className={styles.customRadio}>
              <Form.Check
                type="radio"
                name="profileInfo[gender]"
                value="male"
                checked={gender === 'male'}
                onChange={handleGender}
                label={<span className={styles.btnGray}>{t('PaymentPage.lblMale')}</span>}
                id="genderMale"
              />
            </span>
          </Form.Group>
        </div>
        <div className="clearfix" />
        <div className="form-clm1 label-inline">
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                autoComplete="new-emailAddress"
                type="email"
                name="profileInfo[emailAddress]"
                id="emailValidation"
                value={email}
                readOnly={isEmailReadOnly}
                onInput={(ev: any) => { handleValidation('emailValidation', ev.target.value); }}
                onChange={(value: any) => { setEmail(value.target.value); }}
                className={`${styles.formControl} ${email.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
            {(!emalValid)
              ? (
                <div className="invalidchangeemailmsg">{t('PassengersPP.lblPleaseEnterValidEmail')}</div>
              ) : ''
            }
          </Form.Group>
        </div>
        <div className={styles.tabFooter}>
          <Button type="submit" className={`${styles.btn} ${styles.btnContinue} btn-spinner`}>
            {t('SignUpmodal.lblSgnUp')}
            {
              isloading ? <Spinner animation="border" variant="light" /> : ''
            }
          </Button>
        </div>
      </Form>
    </div>
  );
}

function SignUpLgoinModalbody(props: any) {
  const {
    selectedTabL, signupData, isRegd, proceedAsGuest, handleForgotPassword,
    handelSocialSignupGendershow, actionState,
    isLoggedInFailed, loginFailureText, dispatch,
    countryList, onHide, socialInfomation, isSocialLogin,
    isPrefill, socialLoginInfo,
  } = props;
  const { obHasClub, ibHasClub } = proceedAsGuest;
  const guestProceed = obHasClub || ibHasClub;
  let content: any = <br />;
  switch (Number(selectedTabL)) {
    case 1:
      content = (
        <SignUpModalbody
          dispatch={dispatch}
          proceedAsGuest={guestProceed}
          signupData={signupData}
          isRegd={isRegd}
          handelSocialSignupGendershow={handelSocialSignupGendershow}
          countryList={countryList}
          socialInfomation={socialInfomation}
          isSocialLogin={isSocialLogin}
          isPrefill={isPrefill}
          socialLoginInfo={socialLoginInfo}
        />
      );
      break;
    case 2: content = (
      <LoginModalbody
        dispatch={dispatch}
        loginFailureText={loginFailureText}
        isLoggedInFailed={isLoggedInFailed}
        proceedAsGuest={guestProceed}
        onHide={onHide}
        handleForgotPassword={handleForgotPassword}
        socialInfomation={socialInfomation}
        isSocialLogin={isSocialLogin}
        actionState={actionState}
      />
    );
      break;
    default: content = '';
  }
  return content;
}

function LoginModalbody(props: any) {
  const {
    loginFailureText, isLoggedInFailed, onHide,
    handleForgotPassword, dispatch, actionState,
  } = props; // proceedAsGuest,
  // const dispatch = useDispatch();
  const { t } = useTranslation();
  const [email, setEmail] = useState('');
  const [fname, setName] = useState('');
  const [validated, setValidated] = useState(false);
  const [isloading, setIsloading] = useState(false);
  const [errMsg, setErrMsg] = useState(loginFailureText);
  const [loginFailed, setLoginFailed] = useState(isLoggedInFailed);

  const handleForgtPwdshow = () => {
    handleForgotPassword(true, email);
    onHide();
  };
  // const [CloseLoginshow, setCloseLoginshow] = useState(false);
  let appUrl = 'https://bookings.flyone.eu/';
  switch (process.env.API_ENV) {
    case 'staging': appUrl = 'https://flyoneui-b2c-uat.goquo.net/';
      break;
    case 'production': appUrl = 'https://bookings.flyone.eu/';
      break;
    // case 'development': appUrl = 'http://localhost:3000/';
    //   break;
    default:
      appUrl = 'https://bookings.flyone.eu/';
  }
  const loginHandler = (event: any) => {
    const form = event.currentTarget;
    setLoginFailed(false);
    const obj: any = serialize(form, { hash: true });
    if (form.checkValidity()) {
      setIsloading(true);
      dispatch(userLogin(obj.userdata.email, obj.userdata.password)).then((data: any) => {
        const { result } = data;
        if (!result.isSuccess) {
          const [errorMsg] = result.msgs;
          if (errorMsg.code === ERROR_CODE.PASWDEXPRD) {
            const resetUrl = `${appUrl}ResetPassword?ResetURL=${data.resetURL}`;
            const errMsgTxt = `${t('Settings.lblpswdPolicyMsg')} <a href='${resetUrl}'>${t('FlightResult.lblResetPwd')}</a>`;
            setErrMsg(errMsgTxt);
          } else {
            setErrMsg(errorMsg.msgText);
          }
        }
        setLoginFailed(!result.isSuccess);
        setIsloading(false);
      }).catch((err: any) => {
        console.log(err);
        sessionStorage.setItem('user', obj.userdata.email);
        sessionStorage.setItem('pass', obj.userdata.password);
        window.location.reload();
      });
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      event.preventDefault();
      event.stopPropagation();
    }
    setValidated(true);
  };

  // const responseGoogle = (response: any) => {
  //   const { error } = response;
  //   if (isEmpty(error)) {
  //     dispatch(userSocialLogin(response));
  //   }
  //   console.log("Google Response==>>", response, response.getBasicProfile());
  // };

  // const responseFacebook = (response: any) => {
  //   dispatch(userSocialLogin(response));
  //   // console.log('FaceBook Response==>>', response);
  // };

  const handleOauth = (social: string) => {
    Cookies.set(IS_OAUTH_LOGIN, '1', {
      expires: 1,
      domain: process.env.AUTH_COOKIE_DOMAIN,
    });
    let redirectUrl = window.location.href;
    if (actionState === WORKFLOW.PROFILE) {
      redirectUrl = '/Profile';
    }
    sessionStorage.setItem(`${OAUTH_CLIENT_REDIRECT_URI}`, redirectUrl);
    sessionStorage.removeItem(SOCIAL_USERINFO);
    switch (social) {
      case 'google':
        window.location.href = '/OAuth/Google';
        break;
      case 'facebook':
        window.location.href = '/OAuth/Facebook';
        break;
      default: break;
    }
  };

  return (
    <div className="login_modal_body">
      <h5 className={`${styles.mt30} ${styles.mb30} ${'text-center'}`}>
        {t('Loginmodal.lblSclLogin')}
        {' '}
        FLYONE
      </h5>
      <Form id="loginForm" noValidate validated={validated} onSubmit={(ev: any) => loginHandler(ev)}>
        <div className="form-clm1 label-inline">
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control type="email" autoComplete="new-email" name="userdata[email]" required value={email} onChange={(value: any) => { setEmail(value.target.value); }} className={`${styles.formControl} ${email.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
          </Form.Group>
          <Form.Group className="pwd">
            <div className={styles.inlineGroup}>
              <Form.Control type="password" autoComplete="new-password" name="userdata[password]" required value={fname} onChange={(value: any) => { setName(value.target.value); }} className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>
                {t('Loginmodal.lblPassword')}
              </Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
          </Form.Group>
          {
            loginFailed ? (
              <Alert variant="danger" className={`${styles.mb10} alertHasBtn`}>
                <span dangerouslySetInnerHTML={{ __html: errMsg }} />
              </Alert>
            ) : ''
          }
        </div>
        <div className={`${styles.formClm2}`}>
          {/* <Form.Group>
            <Button variant="link" className="forgot_pwd">
              {t('FlightResult.lblFrgtPswrd')}
              ?
            </Button>
          </Form.Group> */}
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.mt0} ${styles.flexJustifySpacebetween}`}>
          <Button variant="link" onClick={handleForgtPwdshow}>
            {t('FlightResult.lblFrgtPswrd')}
            ?
          </Button>
          <Button type="submit" className={`${styles.btn} ${styles.btnContinue} btn-spinner`} disabled={isloading}>
            {t('FlightResult.lblLogin')}
            {
              isloading ? <Spinner animation="border" variant="light" /> : ''
            }
          </Button>
        </div>
      </Form>
      <div className={`${styles.tabFooter}`}>
        <div className={`${styles.dFlex} ${styles.flexAlignCenter}`}>
          <h5>
            {t('Loginmodal.lblSclLogin')}
            &nbsp;
            :
            &nbsp;
          </h5>
          {/* <Button
            type="button"
            className={`${styles.btn} ${styles.btnFacebook} ${styles.btnSocial}`}
          >
            <i className={`${styles.imgIconXs} ${styles.imFacebook}`} />
          </Button> */}
          {/* <Button type="button" onClick={() => Router.push('http://localhost:3000/auth/google')} className={`${styles.btn} ${styles.btnGoogle} ${styles.btnSocial}`}>
            <i className={`${styles.imgIconXs} ${styles.imGoogle}`} />
          </Button> */}
          <div className={styles.ml15}>
            <Button
              className={`${styles.btn} ${styles.btnFacebook} ${styles.btnSocial}`}
              onClick={() => handleOauth('facebook')}
            >
              <i className={`${styles.imgIconXs} ${styles.imFacebook}`} />
            </Button>
          </div>
          <div className={styles.ml15}>
            <Button
              className={`${styles.btn} ${styles.btnGoogle} ${styles.btnSocial}`}
              onClick={() => handleOauth('google')}
            >
              <i className={`${styles.imgIconXs} ${styles.imGoogle}`} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export function SignUpModalbody(props: any) {
  const {
    signupData, isRegd, dispatch, countryList, socialInfomation,
    isSocialLogin, socialLoginInfo, isPrefill,
  } = props; // proceedAsGuest

  const [email, setEmail] = useState('');
  const [fname, setFName] = useState('');
  const [lname, setLName] = useState('');
  const [gender, setGender] = useState('male');
  const [title, setTitle] = useState('mr');
  const [result, setResult] = useState(signupData.result);
  const [emalValid, setemalValid] = useState(true);
  const { t } = useTranslation();
  // const [dob, setDob] = useState('');
  const [countrycde, setCountrycde] = useState('');
  // const [isMobilecodeErr, setisMobilecodeErr] = useState(true);
  const [mobnumber, setMobnumber] = useState('');
  const [password, setPassword] = useState('');
  const [snationality, setsnationality] = useState('');
  const [signupvalidated, setSignupValidated] = useState(false);
  const [socialId, setSocialId] = useState('');
  const [socialType, setSocialType] = useState('');
  useEffect(() => {
    if (isPrefill) {
      const aplhaRegex = /^[a-zA-Z ]+$/;
      const { firstName, lastName, userName } = socialLoginInfo;
      setEmail(typeof userName !== 'undefined' ? userName : '');
      setFName(typeof firstName !== 'undefined' && aplhaRegex.test(firstName) ? firstName : '');
      setLName(typeof lastName !== 'undefined' && aplhaRegex.test(lastName) ? lastName : '');
    }
  }, [socialLoginInfo]);

  useEffect(() => {
    // if (isSocialLogin) {
    setResult(null);
    setSignupValidated(false);
    if (socialInfomation) {
      const {
        givenName,
        familyName,
        gender: gg,
        nationality: Nationality,
        email: Email,
        mobileNumber,
        mobileCode,
        socialType: sType,
        socialId: sid,
      } = socialInfomation;
      setEmail(Email);
      setFName(givenName);
      setLName(familyName);
      setGender(gg === '' ? 'male' : gg);
      setTitle(gg === 'male' || gg === '' ? 'mr' : 'mrs');
      setMobnumber(mobileNumber);
      setCountrycde(mobileCode === '0' ? '' : mobileCode);
      setsnationality(Nationality === '0' ? '' : Nationality);
      setSocialId(sid);
      setSocialType(sType);
    }

    // }
  }, [socialInfomation]);
  const [isValidPassword, setValidPassword] = useState(false);
  const [passWordTouched, setPasswordTouched] = useState(false);
  const [acceptTerms, setAcceptTerms] = useState(true);

  const [isloading, setIsloading] = useState(false);
  const [isSuccessMsg, setisSuccessMsg] = useState(false);

  const settingResult = () => {
    setResult(signupData.result);
    setTimeout(() => {
      setResult(null);
      dispatch(resetSignupDetails());
      resetSignupDetails();
      setEmail('');
      setFName('');
      setLName('');
      setMobnumber('');
      setPassword('');
      setCountrycde('');
      setsnationality('');
      setSignupValidated(false);
    }, 7000);
  };
  useEffect(() => {
    if (!isEmpty(signupData)) {
      settingResult();
    }
  }, [signupData.result]);

  const signupHandler = (event: any) => {
    setisSuccessMsg(false);
    const form = event.currentTarget;
    const obj: any = serialize(form, { hash: true });
    if (form.checkValidity() && isValidPassword
      && (countrycde && countrycde !== '0' && countrycde !== '')
      && (snationality && snationality !== '0' && snationality !== '')) {
      setIsloading(true);
      if (isSocialLogin) {
        const {
          title: tTitle,
          firstName,
          lastName,
          gender: ggg,
          nationality,
          emailAddress,
          mobileNumber,
          mobileCode,
        } = obj.profileInfo;

        dispatch(userSocialRegistration({
          title: tTitle,
          givenName: firstName,
          familyName: lastName,
          gender: ggg,
          nationality,
          email: emailAddress,
          mobileNumber,
          mobileCode,
          socialType,
          socialId,
        })).then((isSuccess: any) => {
          if (isSuccess) {
            setisSuccessMsg(true);
            settingResult();
          }
          setIsloading(false);
        });
      } else {
        dispatch(userRegistration(obj)).then((isSuccess: any) => {
          if (isSuccess) {
            setisSuccessMsg(true);
            settingResult();
            sessionStorage.removeItem(SOCIAL_USERINFO);
          }
          setIsloading(false);
        });
      }

      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      event.preventDefault();
      event.stopPropagation();
    }
    setSignupValidated(true);
  };
  const handleGender = (e: any) => {
    switch (e.target.id) {
      case 'genderFemale':
        setGender(e.target.value);
        setTitle('mrs');
        break;
      case 'genderMale':
        setGender(e.target.value);
        setTitle('mr');
        break;
      default:
        setTitle('mr');
    }
  };

  const nameHandler = (ev: any) => {
    const { target } = ev;
    const regex = /^[a-zA-Z ]+$/;
    const { value, id } = target;
    switch (id) {
      case 'firstName':
        if (!regex.test(value)) {
          setFName(value.slice(0, -1));
        } else {
          setFName(value);
        }
        break;
      case 'lastName':
        if (!regex.test(value)) {
          setLName(value.slice(0, -1));
        } else {
          setLName(value);
        }
        break;
      default: break;
    }
  };
  const handleValidation = (type: any, value: any) => {
    switch (type) {
      case 'emailValidation': {
        const lastAtPos = value.lastIndexOf('@');
        const lastDotPos = value.lastIndexOf('.');
        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && value.indexOf('@@') === -1 && lastDotPos > 2 && (value.length - lastDotPos) > 2)) {
          setEmail('');
          setemalValid(false);
          return false;
        }
        setemalValid(true);
        setEmail(value);
        return true;
      }
      default: return true;
    }
  };

  const checkPassword = (ev: any) => {
    const { target } = ev;
    const { id, value } = target;
    // eslint-disable-next-line default-case
    setPasswordTouched(true);
    if (id === 'password') {
      const regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?!.*[.,~])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,16}$/;
      setValidPassword(regex.test(value));
    }
  };

  const handleNumberValidation = (ev: any) => {
    const { target } = ev;
    const { id, value } = target;
    // eslint-disable-next-line default-case
    switch (id) {
      case 'MobNumbr': {
        const regex = /^[0-9]+$/;
        if (!regex.test(value)) {
          setMobnumber(value.slice(0, -1));
        }
      }
    }
  };

  useEffect(() => {
    dispatch(fetchCountryName());
  }, []);

  const BindCountryList = () => {
    const countryOption: any = [];
    map(countryList, (cList: any) => {
      countryOption.push(<option value={cList.countryCode}>{cList.countryName}</option>);
    });
    return countryOption;
  };

  const BindMobileCodeList = () => {
    const MobileCodeOption: any = [];
    map(mobileCodes, (McList: any) => {
      MobileCodeOption.push(<option value={McList.dial_code}>{`${McList.name} (${McList.dial_code})`}</option>);
    });
    return MobileCodeOption;
  };

  return (
    <div className="signupFormData">
      <h5 className={`${styles.mt30} ${styles.mb30} ${'text-center'}`}>{t('SignUpmodal.lblSgnmyFYONE')}</h5>
      <Form id="signupForm" noValidate validated={signupvalidated} onSubmit={(ev: any) => signupHandler(ev)}>
        {
          (!isRegd && typeof result !== 'undefined' && result)
            ? map(result.msgs, (erList: any) => (
              <Alert key={erList.code} variant="danger">{erList.msgText}</Alert>
            ))
            : ''
        }
        {
          (isRegd && isSuccessMsg)
            ? (
              <Alert key={isRegd} variant="success">
                {t('Loginmodal.lblPrflRegstrSucs')}
              </Alert>
            )
            : ''
        }
        <div className={`${styles.formClm2} ${styles.labelInline}`}>
          <Form.Control type="hidden" value={title} name="profileInfo[title]" />
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control required type="text" name="profileInfo[firstName]" id="firstName" value={fname} maxLength={32} onChange={(value: any) => { setFName(value.target.value); nameHandler(value); }} className={`${styles.formControl} ${fname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblFirstName')}</Form.Label>
            </div>
          </Form.Group>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control required type="text" name="profileInfo[lastName]" id="lastName" value={lname} maxLength={32} onChange={(value: any) => { setLName(value.target.value); nameHandler(value); }} className={`${styles.formControl} ${lname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblLastName')}</Form.Label>
            </div>
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.labelInline} ${styles.radioWide}`}>
          <Form.Group>
            <span className={styles.customRadio}>
              <Form.Check
                type="radio"
                name="profileInfo[gender]"
                value="female"
                checked={gender === 'female'}
                onChange={handleGender}
                label={<span className={styles.btnGray}>{t('PaymentPage.lblFemale')}</span>}
                id="genderFemale"
              />
            </span>
          </Form.Group>
          <Form.Group>
            <span className={styles.customRadio}>
              <Form.Check
                type="radio"
                name="profileInfo[gender]"
                value="male"
                checked={gender === 'male'}
                onChange={handleGender}
                label={<span className={styles.btnGray}>{t('PaymentPage.lblMale')}</span>}
                id="genderMale"
              />
            </span>
          </Form.Group>
        </div>
        <div className="clearfix" />
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group>
            <Form.Control
              defaultValue={countrycde}
              value={countrycde}
              autoComplete="off"
              as="select"
              required
              name="profileInfo[mobileCode]"
              onChange={(ev: any) => {
                setCountrycde(ev.target.value);
              }}
            >
              <option value="">{t('FlightResult.lblCountryCode')}</option>
              {BindMobileCodeList()}
            </Form.Control>
          </Form.Group>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control required autoComplete="new-mobnumber" type="tel" maxLength={10} name="profileInfo[mobileNumber]" id="MobNumbr" value={mobnumber} onChange={(value: any) => { setMobnumber(value.target.value); handleNumberValidation(value); }} className={`${styles.formControl} ${mobnumber.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblLandLnNumber')}</Form.Label>
            </div>
          </Form.Group>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                autoComplete="new-emailAddress"
                type="email"
                name="profileInfo[emailAddress]"
                id="emailValidation"
                value={email}
                // disabled={isPrefill && email.length > 0}
                onInput={(ev: any) => { handleValidation('emailValidation', ev.target.value); }}
                onChange={(value: any) => { setEmail(value.target.value); }}
                className={`${styles.formControl} ${email.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
            {(!emalValid)
              ? (
                <div className="invalidchangeemailmsg">{t('PassengersPP.lblPleaseEnterValidEmail')}</div>
              ) : ''
            }
          </Form.Group>
          <Form.Group className={`${!isValidPassword && passWordTouched ? 'in-valid' : ''} pswdField`}>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                autoComplete="new-password"
                type="password"
                disabled={isSocialLogin}
                name="profileInfo[password]"
                value={password}
                id="password"
                isInvalid={!isValidPassword && passWordTouched}
                onInput={(ev: any) => { checkPassword(ev); }}
                onChange={(value: any) => { setPassword(value.target.value); }}
                className={`${styles.formControl} ${(!isValidPassword && passWordTouched) ? 'has-error' : ''} ${password.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('Loginmodal.lblPassword')}</Form.Label>
            </div>
            {
              (!isValidPassword && passWordTouched) ? (
                <Form.Control.Feedback className={`${isValidPassword ? 'd-none' : 'd-block'}`} type="invalid">
                  {t('Settings.lblpswdValdMsg')}
                </Form.Control.Feedback>
              ) : <></>
            }
          </Form.Group>
          <Form.Group>
            <Form.Control
              defaultValue={snationality}
              value={snationality}
              autoComplete="off"
              as="select"
              required
              name="profileInfo[nationality]"
              onChange={(ev: any) => {
                setsnationality(ev.target.value);
              }}
            >
              <option value="">{t('PassengersPP.lblNationality')}</option>
              {BindCountryList()}
            </Form.Control>

          </Form.Group>
        </div>
        <p className={styles.signingAgreeTxt}>
          {t('SignUpmodal.lblSgnupTerms')}
          &nbsp;
          <a href={`${process.env.PROD_INTERNAL_PATH}/${i18next.language}/Privacy-policy`} target="blank">{t('SignUpmodal.lblPrvcyPlcy')}</a>
          &nbsp;
          {t('SignUpmodal.lblAnd')}
          &nbsp;
          <a href={`${process.env.PROD_INTERNAL_PATH}/${i18next.language}/Terms-and-Conditions`} target="blank">{t('SignUpmodal.lblTrmsCndtns')}</a>
        </p>
        <div className="form-group">
          <div className="custom-checkbox form-check">
            <input required name="profileInfo[acceptTerms]" type="checkbox" checked={acceptTerms} onChange={() => setAcceptTerms(true)} id="acceptTerms" className="form-check-input form-control" />
            <label htmlFor="acceptTerms" className="form-check-label">
              <span className="label-text">
                {t('PassengersPP.lblSubscription')}
              </span>
            </label>
          </div>
        </div>
        <div className={styles.tabFooter}>
          <Button type="submit" className={`${styles.btn} ${styles.btnContinue} btn-spinner`}>
            {t('SignUpmodal.lblSgnUp')}
            {
              isloading ? <Spinner animation="border" variant="light" /> : ''
            }
          </Button>
        </div>
      </Form>
    </div>
  );
}

export function AgentModalbody() {
  return (
    <div>
      <AgentLoginModalbody />
      <AgentSigninModalbody />
    </div>
  );
}

export function AgentLoginModalbody() {
  const [username, setUsername] = useState('');
  const [agentpwd, setAgentpwd] = useState('');
  const { t } = useTranslation();
  return (
    <div className="agency_login">
      <div className={`${styles.formClm1} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={username} onChange={(value: any) => { setUsername(value.target.value); }} className={`${styles.formControl} ${username.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('FlightResult.lblAgentUsername')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentpwd} onChange={(value: any) => { setAgentpwd(value.target.value); }} className={`${styles.formControl} ${agentpwd.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>
              {t('Loginmodal.lblPassword')}
            </Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={styles.clearfix} />
      <div className={`${styles.formClm2} ${styles.mt20}`}>
        {/* <Form.Group>
          <Button variant="link">{t('FlightResult.lblFrgtPswrd')}</Button>
        </Form.Group> */}
        <Form.Group className="text-right">
          <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>{t('FlightResult.lblLogin')}</Button>
        </Form.Group>
      </div>
    </div>
  );
}

export function AgentSigninModalbody() {
  const [agentname, setAgentname] = useState('');
  const [numberstores, setNumberstores] = useState('');
  const { t } = useTranslation();
  return (
    <div className="agency_signin">
      <p><strong>{t('FlightResult.lblCmpnyDtls')}</strong></p>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Agent name</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={numberstores} onChange={(value: any) => { setNumberstores(value.target.value); }} className={`${styles.formControl} ${numberstores.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Number of stores</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Distric/State</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Number of users</Form.Label>
          </div>
        </Form.Group>
      </div>
      <p>
        <Form.Check className={styles.customCheckbox} id="declaretxt">
          <Form.Check.Input type="checkbox" name="check" />
          <Form.Check.Label className={styles.labelText}>VAT enabled</Form.Check.Label>
        </Form.Check>
      </p>
      <div className={`${styles.gap} ${styles.gap10}`} />
      <p><strong>{t('FlightResult.lblTrvlLcseDtls')}</strong></p>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Company type</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>IATA number</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Company number</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Tourism registration number</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.gap} ${styles.gap10}`} />
      <p><strong>Travels details</strong></p>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Managers first name</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Last name</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>Website</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={`${styles.comboControl} ${styles.phoneWithCode}`}>
            <Form.Control as="select">
              <option value="0">00</option>
              <option value="+373" selected>+373</option>
              <option value="+91">+91</option>
              <option value="+971">+971</option>
              <option value="+43">+43</option>
            </Form.Control>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('PassengersPP.lblPhnbr')}</Form.Label>
            </div>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={`${styles.comboControl} ${styles.phoneWithCode}`}>
            <Form.Control as="select">
              <option value="0">00</option>
              <option value="+373" selected>+373</option>
              <option value="+91">+91</option>
              <option value="+971">+971</option>
              <option value="+43">+43</option>
            </Form.Control>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>Fax number</Form.Label>
            </div>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={`${styles.comboControl} ${styles.phoneWithCode}`}>
            <Form.Control as="select">
              <option value="0">00</option>
              <option value="+373" selected>+373</option>
              <option value="+91">+91</option>
              <option value="+971">+971</option>
              <option value="+43">+43</option>
            </Form.Control>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>After hours</Form.Label>
            </div>
          </div>
        </Form.Group>

        <Form.Group>
          <div className={`${styles.comboControl} ${styles.phoneWithCode}`}>
            <Form.Control as="select">
              <option value="0">00</option>
              <option value="+373" selected>+373</option>
              <option value="+91">+91</option>
              <option value="+971">+971</option>
              <option value="+43">+43</option>
            </Form.Control>
            <div className={styles.inlineGroup}>
              <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
              <Form.Label>{t('FlightResult.lblMobilePnNumber')}</Form.Label>
            </div>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.gap} ${styles.gap10}`} />
      <p><strong>Address details</strong></p>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('PaymentPage.lblAddress1')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('PaymentPage.lblAddress2')}</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('PaymentPage.lblTownCity')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>State</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('PaymentPage.lblCountry')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('PaymentPage.lblZipCode')}</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.gap} ${styles.gap10}`} />
      <p><strong>{t('Loginmodal.lblChselgnpwd')}</strong></p>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="text" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('Loginmodal.lblLgnNme')}</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={`${styles.formClm2} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="password" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('Loginmodal.lblLgnPwd')}</Form.Label>
          </div>
        </Form.Group>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="password" value={agentname} onChange={(value: any) => { setAgentname(value.target.value); }} className={`${styles.formControl} ${agentname.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('Loginmodal.lblCnfrmLgnPwd')}</Form.Label>
          </div>
        </Form.Group>
      </div>

      <div className={styles.gap10} />
      <p>
        <Form.Check className={styles.customCheckbox} id="declaretxt">
          <Form.Check.Input type="checkbox" name="check" />
          <Form.Check.Label className={styles.labelText}>
            {t('FlightResult.lblDlrRdActTrsCnds')}
            &nbsp;
            <a target="_blank" rel="noopener noreferrer" href={`https://www.flyone.eu/${typeof Cookies.get(CURRENT_LANG) !== 'undefined' ? Cookies.get(CURRENT_LANG) : 'en' ? Cookies.get(CURRENT_LANG) : 'en'}/Terms-and-Conditions`}>{t('FlightResult.lblWebsiteTerms')}</a>
          </Form.Check.Label>
        </Form.Check>
      </p>
      <div className={`${styles.tabFooter} ${styles.hasSinglebtn}`}>
        <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>{t('FlightResult.lblRegister')}</Button>
      </div>
    </div>
  );
}

export function ForgotPasswordModalBody(props: any) {
  const { handleForgotPwdMsg, modData } = props;
  const [frgtPwdEmail, setfrgtPwdEmail] = useState(modData || '');
  const [forgotPwdEmail, setforgotPwdEmail] = useState(false);
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);
  const [emalValid, setemalValid] = useState(true);
  // const handleForgotPwdMsgshow = () => setForgotPwdMsgshow(!ForgotPwdMsgshow);

  const [isButtonLoading, setIsButtonLoading] = useState(false);

  let obj: any;
  // const dispatch = useDispatch();
  const { dispatch, onHide } = props;
  const { t } = useTranslation();

  const forgtPwdHandler = (event: any) => {
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { fgtPwdEmail } = obj;
    if (form.checkValidity() && fgtPwdEmail !== '') {
      setIsButtonLoading(true);
      // dispatch(changeEmail(newEmail));
      dispatch(forgotPassword(fgtPwdEmail)).then((result: any) => {
        if (result.isSuccess) {
          handleForgotPwdMsg(true);
          // handleForgtPwdshow
          onHide();
          // dispatch(getpaxDetails());
          // setForgotPwdMsgshow(true);
          setTimeout(() => {
            handleForgotPwdMsg(false);
          }, 1000);
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      setIsButtonLoading(false);
      event.preventDefault();
      event.stopPropagation();
    }
    setforgotPwdEmail(true);
  };
  const handleValidation = (type: any, value: any) => {
    switch (type) {
      case 'emailValidation': {
        const lastAtPos = value.lastIndexOf('@');
        const lastDotPos = value.lastIndexOf('.');
        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && value.indexOf('@@') === -1 && lastDotPos > 2 && (value.length - lastDotPos) > 2)) {
          setfrgtPwdEmail('');
          setemalValid(false);
          return false;
        }
        setemalValid(true);
        setfrgtPwdEmail(value);
        return true;
      }
      default: return true;
    }
  };
  return (
    <div className={styles.forgotPassword}>
      <h5>{t('FlightResult.lblFrgtPswrd')}</h5>
      <p>{t('FlightResult.lblEnterUrEmailtoResetPwd')}</p>
      {
        hasError ? errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>) : <></>
      }
      <Form noValidate validated={forgotPwdEmail} id="changePaswdForm" onSubmit={(ev: any) => forgtPwdHandler(ev)}>
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="email"
                name="fgtPwdEmail"
                value={frgtPwdEmail}
                onInput={(ev: any) => { handleValidation('emailValidation', ev.target.value); }}
                onChange={(value: any) => { setfrgtPwdEmail(value.target.value); }}
                className={`${styles.formControl} ${frgtPwdEmail.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('FlightResult.lblEmailID')}</Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
            {(!emalValid)
              ? (
                <div className="invalidchangeemailmsg">
                  {t('PassengersPP.lblPleaseEnterValidEmail')}
                </div>
              ) : ''}
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.mt10}`}>
          {/* <div className={`${styles.formClm1} ${styles.labelInline}`}> */}

          <Form.Group className={`${'text-right'} ${styles.dFlex} ${styles.flexJustifySpacebetween} ${styles.mb0}`}>
            <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>
              {t('Services.lblCancel')}
            </Button>
            <Button
              type="submit"
              disabled={isButtonLoading}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
            >
              {t('FlightResult.lblResetPwd')}
              {
                isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
              }
            </Button>
          </Form.Group>
        </div>
      </Form>
    </div>
  );
}

export function CancelFlightModal(props: any) {
  const {
    PNRData, onContinue, onHide, routes, refundData,
    CancelFlightKeys, currency,
  } = props;
  const { refundAmount, availableRefundTypes, isBonusApply } = refundData;
  const { flightInfo } = PNRData;
  const { flights, fareGroupInfo } = flightInfo[0];
  const { cabin } = fareGroupInfo;
  const { t } = useTranslation();
  const [refundType, setRefundType] = useState(availableRefundTypes[0]);
  const [isWallet, setIsWallet] = useState(availableRefundTypes[0] === REFUND_TYPE.WALLET);
  let amnt15Perc = 0;
  if (refundAmount !== 0) {
    amnt15Perc = (10 / 100) * refundAmount + refundAmount;
  }
  const getRefundText = (rType: any) => {
    let refundText: any = '';
    switch (rType) {
      case REFUND_TYPE.BANK: refundText = t('BookingOverview.lblbankCard');
        break;
      case REFUND_TYPE.WALLET:
        refundText = t('PaymentPP.lblFLYONEAct');
        break;
      default: refundText = t('BookingOverview.lblbankCard');
    }
    if (rType === REFUND_TYPE.WALLET) {
      refundText = `${refundText} ${isBonusApply ? ' (10% more)' : ''}`;
    }
    return refundText;
  };

  return (
    <div className="cancel_flight_section">
      <div className="flight_detail">
        {
          map(CancelFlightKeys, (fKey: any) => {
            const cuusrFlgt = flights.find((x: any) => x.flightKey === fKey);
            const cuusrSegment = cabin.find((
              x: any,
            ) => x.segmentRefKey === cuusrFlgt.segments[0].segmentKey);
            const { cabinClassCode } = cuusrSegment;
            const data = getformInfo(cuusrFlgt);
            const { connectionCities } = data;
            const getCabintxtContent = (getcabin: any) => {
              let cabinHead: any = '';
              let cabinCont: any = '';
              switch (getcabin) {
                case 'ST':
                  cabinHead = t('FlightResult.lblSTANDARD');
                  cabinCont = t('ManageBooking.lblCanclflightCntST');
                  break;
                case 'LO':
                  cabinHead = t('FlightResult.lblLOYAL');
                  cabinCont = t('ManageBooking.lblCanclflightCntLY');
                  break;
                case 'AD':
                  cabinHead = t('FlightResult.lblADVANTAGE');
                  cabinCont = t('ManageBooking.lblCanclflightCntAD');
                  break;
                default:
                  cabinHead = t('FlightResult.lblSTANDARD');
                  cabinCont = t('ManageBooking.lblCanclflightCntST');
              }
              return (
                <>
                  <h4>{cabinHead}</h4>
                  <p>{cabinCont}</p>
                </>
              );
            };
            return (
              <Row className="">
                <Col>
                  <h5 className={styles.mt0}>
                    {t('FlightResult.lblFlightTikt')}
                    :
                  </h5>
                  <div className="flight_segment">
                    <p>
                      {data.depDate}
                      ,
                      &nbsp;
                      <span>
                        {data.depTime}
                        {' '}
                        -
                        {' '}
                        {data.arrTime}
                      </span>
                    </p>
                    <p>
                      <b>
                        {getAirportNameByCode(data.depCity, routes)}
                        {' '}
                        -
                        {' '}
                        {getAirportNameByCode(data.arrCity, routes)}
                      </b>
                    </p>
                    <p>
                      {
                        !isEmpty(connectionCities) && connectionCities.length > 0
                          ? (
                            <span>
                              {
                                map(connectionCities, (conSeg: any) => `${conSeg.oprAirlineCode} ${conSeg.flightNumber}, `)
                              }
                            </span>
                          )
                          : (
                            <span>
                              {data.oprAirlineCode}
                              {' '}
                              {data.flightNumber}
                            </span>
                          )
                      }
                    </p>
                  </div>
                </Col>
                <Col>
                  <div className="cabin_Txt">
                    {
                      getCabintxtContent(cabinClassCode)
                    }
                  </div>
                </Col>
              </Row>
            );
          })
        }
      </div>
      <hr />
      <div className="total_segment">
        <h3>
          {t('BookingOverview.lblRefundPref')}
          {' '}
        </h3>
        <div className={`${styles.formClm3} ${styles.labelInline}`}>
          <Form.Group>
            <Form.Control as="select" defaultValue={refundType} onChange={(ev: any) => { setRefundType(ev.target.value); setIsWallet(Number(ev.target.value) === REFUND_TYPE.WALLET); }}>
              {
                map(availableRefundTypes, (
                  rfItem: any,
                ) => <option value={rfItem}>{getRefundText(rfItem)}</option>)
              }
            </Form.Control>
          </Form.Group>
        </div>
        <h3>
          {t('BookingOverview.lblRefundAmount')}
          {' '}
          <span>
            {
              formatCurrency(
                isWallet && isBonusApply ? amnt15Perc : refundAmount,
                currency,
                1,
                currency,
              )
            }
          </span>
        </h3>
      </div>
      <div className={`${styles.formClm1} ${styles.mt20} ${'cancel_flight_btn'} ${styles.flexAlignFlexEnd}`}>
        <Form.Group className={`${'text-right'} ${styles.mb0}`}>
          <Button type="button" className={`${styles.btn} ${styles.btnGray}`} onClick={onHide}>{t('BookingOverview.lblNotnow')}</Button>
          <Button type="button" className={`${styles.btn} ${styles.ml15} ${styles.btnContinue}`} onClick={() => onContinue(CancelFlightKeys, refundType)}>{t('BookingOverview.lblImsuredoit')}</Button>
        </Form.Group>
      </div>
    </div>
  );
}

export function ResetPasswordModal() {
  const [username, setUsername] = useState('');
  const { t } = useTranslation();
  return (
    <div className={styles.forgotPassword}>
      <h5 className={styles.mb25}>{t('FlightResult.lblResetPwd')}</h5>
      <div className={`${styles.formClm1} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="tel" value={username} onChange={(value: any) => { setUsername(value.target.value); }} className={`${styles.formControl} ${username.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('FlightResult.lblUsernameToReset')}</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={styles.clearfix} />
      <div className={`${styles.formClm1} ${styles.labelInline}`}>
        <Form.Group>
          <div className={styles.inlineGroup}>
            <Form.Control type="tel" value={username} onChange={(value: any) => { setUsername(value.target.value); }} className={`${styles.formControl} ${username.length > 0 ? styles.hasContent : ''}`} />
            <Form.Label>{t('FlightResult.lblRecoveryEmail')}</Form.Label>
          </div>
        </Form.Group>
      </div>
      <div className={styles.clearfix} />
      <div className={`${styles.formClm2} ${styles.mt20}`}>
        <Form.Group>
          <Button variant="link" className={styles.link}>{t('FlightResult.lblFrgtPswrd')}</Button>
        </Form.Group>
        <Form.Group className={`${'text-right'} ${styles.mb0}`}>
          <Button type="button" className={`${styles.btn} ${styles.btnContinue}`}>{t('FlightResult.lblResetPwd')}</Button>
        </Form.Group>
      </div>
    </div>
  );
}

export function ChangeEmailModal(props: any) {
  let obj: any;
  const { dispatch, onHide, isItemDeleted } = props;
  const { t } = useTranslation();
  const [email, setemail] = useState('');
  const [changeEmailvalidated, setchangeEmailvalidated] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [hasError, setError] = useState(false);
  const [emalValid, setemalValid] = useState(true);

  const [isButtonLoading, setIsButtonLoading] = useState(false);

  // const dispatch = useDispatch();
  const changeEmailHandler = (event: any) => {
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { newEmail } = obj;
    if (form.checkValidity() && email !== '') {
      setIsButtonLoading(true);
      setError(false);
      setIsSuccess(false);
      // dispatch(changeEmail(newEmail));
      dispatch(changeEmail(newEmail)).then((result: any) => {
        if (result.isSuccess) {
          setIsSuccess(true);
          isItemDeleted(true);
          dispatch(logout());
          // dispatch(getpaxDetails()).then(() => {
          // });
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
        setTimeout(() => {
          setIsButtonLoading(false);
        }, 1000);
      });
      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      setIsButtonLoading(false);
      event.preventDefault();
      event.stopPropagation();
    }
    setchangeEmailvalidated(true);
  };
  const handleValidation = (type: any, value: any) => {
    switch (type) {
      case 'emailValidation': {
        const lastAtPos = value.lastIndexOf('@');
        const lastDotPos = value.lastIndexOf('.');
        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && value.indexOf('@@') === -1 && lastDotPos > 2 && (value.length - lastDotPos) > 2)) {
          setemail('');
          setemalValid(false);
          return false;
        }
        setemalValid(true);
        setemail(value);
        return true;
      }
      default: return true;
    }
  };
  return (
    <div className={styles.forgotPassword}>
      {
        hasError
          ? (
            <div className={`${styles.formClm2} ${styles.mt10}`}>
              {
                errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>)
              }
            </div>
          )
          : ''
      }
      {
        isSuccess
          ? (
            <div className={`${styles.formClm2} ${styles.mt10}`}>
              <Alert variant="success">{t('Settings.lblEmailChngSucs')}</Alert>
            </div>
          )
          : ''
      }
      <Form noValidate validated={changeEmailvalidated} id="changeEmailForm" onSubmit={(ev: any) => changeEmailHandler(ev)}>
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="email"
                name="newEmail"
                value={email}
                onInput={(ev: any) => { handleValidation('emailValidation', ev.target.value); }}
                onChange={(value: any) => { setemail(value.target.value); }}
                className={`${styles.formControl} ${email.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('Loginmodal.lblNwEmail')}</Form.Label>
            </div>
            <Form.Control.Feedback type="invalid">{t('Loginmodal.lblFldCntEmpty')}</Form.Control.Feedback>
            {
              (!emalValid)
                ? (
                  <div className="invalidchangeemailmsg">
                    {t('PassengersPP.lblPleaseEnterValidEmail')}
                  </div>
                ) : ''
            }
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.mt10}`}>
          {/* <div className={`${styles.formClm1} ${styles.labelInline}`}> */}
          <Form.Group className={`justify-content-end ${styles.mb0} ${styles.dFlex}`}>
            <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>{t('Services.lblCancel')}</Button>
            <Button
              type="submit"
              disabled={isButtonLoading}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
            >
              {t('Settings.lblChgMail')}
              {
                isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
              }
            </Button>
          </Form.Group>
        </div>
      </Form>
    </div>
  );
}

export function SocialLoginModal(props: any) {
  const { handelSocialSignupGendershow } = props;
  const [SocialSignupGender, setSocialSignupGender] = useState('');
  const [SignupGenderSocial, setSignupGenderSocial] = useState(false);
  const [isButtonLoading, setIsButtonLoading] = useState(false);

  let obj: any;

  const { dispatch } = props;
  const { t } = useTranslation();

  const SocialSignupHandler = (event: any) => {
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });
    const { gender } = obj;
    if (form.checkValidity() && gender !== '') {
      dispatch(userSocialRegistration(gender)).then((result: any) => {
        handelSocialSignupGendershow(true);
        console.log('result', result);
      });
      event.preventDefault();
      event.stopPropagation();
    }
    setSignupGenderSocial(true);
    event.preventDefault();
    event.stopPropagation();
  };
  return (
    <div className="socialGenForm">
      <Form noValidate validated={SignupGenderSocial} id="socialGetGender" onSubmit={(ev: any) => SocialSignupHandler(ev)}>
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group>
            {/* <div className={styles.inlineGroup}> */}
            <Form.Group className="floating_label">
              <label>{t('Passengers.lblGndr')}</label>
              <Form.Control required as="select" value={SocialSignupGender} name="gender" onChange={(ev: any) => { setSocialSignupGender(ev.target.value); }}>
                <option value="Male">{t('PaymentPage.lblMale')}</option>
                <option value="Female">{t('PaymentPage.lblFemale')}</option>
              </Form.Control>
            </Form.Group>
            {/* </div> */}
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.mt20}`}>
          {/* <Form.Group>
          <Button variant="link" className={styles.link}>{t('FlightResult.lblFrgtPswrd')}</Button>
        </Form.Group> */}
          <Form.Group className={`${'text-right'} ${styles.mb0} ${styles.dFlex}`}>
            {/* <Button type="button" className={`${styles.btn} ${styles.btnCancel}`}>
              {t('Services.lblCancel')}
            </Button> */}
            <Button
              type="submit"
              onClick={() => {
                setIsButtonLoading(true);
              }}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue}`}
            >
              {isButtonLoading ? (
                <>
                  <img src="/static/images/loader.svg" className="img-responsive" alt="" />
                  {' '}
                </>
              ) : ''}
              {('Save')}
            </Button>
          </Form.Group>
        </div>
      </Form>

    </div>
  );
}

export function ChangePasswordModal(props: any) {
  let obj: any;
  // const dispatch = useDispatch();
  const { dispatch, onHide, alertHide } = props;
  const { t } = useTranslation();

  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [changePswrdvalidated, setchangePswrdvalidated] = useState(false);
  const [isButtonLoading, setIsButtonLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState(Array<any>());
  const [isValidPassword, setValidPassword] = useState(false);
  const [passWordTouched, setPasswordTouched] = useState(false);
  // const [cnfmPswrdTouched, setcnfmPswrdTouched] = useState(false);
  const [hasError, setError] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  useEffect(() => {
    if (alertHide) {
      setError(false);
      setIsSuccess(false);
    }
  }, [alertHide]);
  const checkPassword = (ev: any) => {
    const { target } = ev;
    const { id, value } = target;
    // eslint-disable-next-line default-case
    setPasswordTouched(true);
    if (id === 'newPassword') {
      const regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?!.*[.,~])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,16}$/;
      setValidPassword(regex.test(value));
    }
  };
  const changePswrdHandler = (event: any) => {
    const form = event.currentTarget;
    obj = serialize(form, { hash: true });

    const { oldPassword: oldPswd, newPassword: newPswd } = obj;
    if (form.checkValidity() && isValidPassword) {
      setIsButtonLoading(true);
      setError(false);
      setIsSuccess(false);
      dispatch(changePassword(oldPswd, newPswd)).then((result: any) => {
        if (result.isSuccess) {
          setIsSuccess(true);
          // onHide();
          dispatch(getpaxDetails());
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
        setIsButtonLoading(false);
      });

      event.preventDefault(); // remove for success
      event.stopPropagation(); // remove for success
    } else {
      setIsButtonLoading(false);

      event.preventDefault();
      event.stopPropagation();
    }
    setchangePswrdvalidated(true);
  };
  return (
    <div className={styles.forgotPassword}>
      {
        hasError
          ? (
            <div className={`${styles.mt10}`}>
              {
                errorMsg.map((error: any) => <Alert variant="danger">{error.msgText}</Alert>)
              }
            </div>
          )
          : ''
      }
      {
        isSuccess
          ? <Alert variant="success">{t('Settings.lblpswdChngSucs')}</Alert>
          : ''
      }
      <Form noValidate validated={changePswrdvalidated} id="changePswrdForm" onSubmit={(ev: any) => changePswrdHandler(ev)}>
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="password"
                name="oldPassword"
                value={oldPassword}
                onChange={(value: any) => { setOldPassword(value.target.value); }}
                className={`${styles.formControl} ${oldPassword.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('Loginmodal.lblOldPwd')}</Form.Label>
            </div>
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm1} ${styles.labelInline}`}>
          <Form.Group className={`${!isValidPassword && passWordTouched ? 'in-valid' : ''} pswdField`}>
            <div className={styles.inlineGroup}>
              <Form.Control
                required
                type="password"
                name="newPassword"
                id="newPassword"
                value={newPassword}
                isInvalid={!isValidPassword && passWordTouched}
                onInput={(ev: any) => { checkPassword(ev); }}
                onChange={(value: any) => { setNewPassword(value.target.value); }}
                className={`${styles.formControl} ${(!isValidPassword && passWordTouched) ? 'has-error' : ''} ${newPassword.length > 0 ? styles.hasContent : ''}`}
              />
              <Form.Label>{t('Loginmodal.lblNwPwd')}</Form.Label>
            </div>
            {
              (!isValidPassword && passWordTouched) ? (
                <Form.Control.Feedback className={`${isValidPassword ? 'd-none' : 'd-block'}`} type="invalid">
                  {t('Settings.lblpswdValdMsg')}
                </Form.Control.Feedback>
              ) : <></>
            }
          </Form.Group>
        </div>
        <div className={styles.clearfix} />
        <div className={`${styles.formClm2} ${styles.mt10}`}>
          {/* <Form.Group>
            <Button variant="link" className={styles.link}>{t('FlightResult.lblFrgtPswrd')}</Button>
          </Form.Group> */}
          <Form.Group className={`justify-content-end ${styles.mb0} ${styles.dFlex}`}>
            <Button type="button" onClick={onHide} disabled={isButtonLoading} className={`${styles.btn} ${styles.btnCancel}`}>
              {t('Services.lblCancel')}
            </Button>
            <Button
              type="submit"
              disabled={isButtonLoading}
              className={`${styles.btn} ${styles.ml20} ${styles.btnContinue} btn-spinner`}
            >
              {t('Settings.lblChgPsword')}
              {
                isButtonLoading ? <Spinner animation="border" variant="light" /> : ''
              }
            </Button>
          </Form.Group>
        </div>
      </Form>
    </div>
  );
}

export function WelcomeBackModal(props: any) {
  const { isLoggingIn, profData } = props;
  const { t } = useTranslation();
  return (
    <div className="welcome_popup">
      <i className={`${styles.imgIconXs} ${styles.imWelcomeUserIcon}`} />
      {
        isLoggingIn ? (
          <div>
            <h5>
              {t('FlightResult.lblWlcomeBck')}
              ,
            </h5>
            <h2>
              {
                (profData)
                  ? (
                    <>
                      {profData.firstName}
                      &nbsp;
                      {profData.lastName}
                    </>
                  )
                  : ''
              }
            </h2>
            <p>{t('FlightResult.lblYouHavJustLogIn')}</p>
          </div>
        ) : (
          <div>
            <h5>
              {t('FlightResult.lblSeeYouSoon')}
              ,
            </h5>
            <h2>
              {
                (profData)
                  ? (
                    <>
                      {profData.firstName}
                      &nbsp;
                      {profData.lastName}
                    </>
                  )
                  : ''
              }
            </h2>
            <p>{t('FlightResult.lblUhaveJustLogOut')}</p>
          </div>
        )}
    </div>
  );
}

export function AddSameBaggageModalbody(props: any) {
  const { onHide, onContinue } = props;
  const { t } = useTranslation();
  return (
    <div className="same_baggage_popup">
      <i className={`${styles.imgIconXs} ${styles.imGroupPassengers} ${styles.mb10}`} />
      <h4>{t('Baggage.lblSameFrall')}</h4>
      <div className={`${styles.dFlex} ${styles.flexJustifySpacebetween}`}>
        <Button className={`${styles.btn} ${styles.btnContinue}`} onClick={onContinue}>
          {t('CheckIn.lblYes')}
        </Button>
        <Button variant="link" className={`${styles.btnTransparent}`} onClick={onHide}>
          {t('Baggage.lblNoThanks')}
        </Button>
      </div>
    </div>
  );
}


export function ForgotPassSentEmailModalbody() {
  // const { onHide } = props;
  const { t } = useTranslation();
  return (
    <div className="password_reset_modal">
      <h4>
        {t('PassengersPP.lblPswdResetlink')}
      </h4>
    </div>
  );
}

export function RemoveModalbody(props: any) {
  const {
    removeModalIcon, removeModalTitle, removeModalCnt, removeModalLinkyes, onHide,
    isItemDeleted,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="same_baggage_popup remove_modal">
      {
        !isEmpty(removeModalIcon)
          ? <i className={`${styles.imgIconXs} ${removeModalIcon} ${styles.mb10}`} />
          : <Fragment />
      }
      <h4>{t(removeModalTitle)}</h4>
      <p>{t(removeModalCnt)}</p>
      <div className={`${styles.dFlex} ${styles.flexJustifySpacebetween}`}>
        <Button variant="link" className={`${styles.btnGray} btn-spinner`} disabled={isItemDeleted} onClick={onHide}>
          {t('CheckIn.lblNo')}
        </Button>
        <Button className={`${styles.btn} ${styles.btnContinue} btn-spinner`} disabled={isItemDeleted} onClick={removeModalLinkyes}>
          {t('CheckIn.lblYes')}
          {
            isItemDeleted ? <Spinner animation="border" variant="light" /> : ''
          }
        </Button>
      </div>
    </div>
  );
}
export function ResetPswrdRedirect(props: any) {
  const {
    removeModalIcon, removeModalTitle, removeModalCnt,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="same_baggage_popup remove_modal">
      <i className={`${styles.imgIconXs} ${removeModalIcon} ${styles.mb10}`} />
      <h4>{t(removeModalTitle)}</h4>
      <p>{t(removeModalCnt)}</p>
      <div className={`${styles.dFlex} ${styles.flexJustifySpacebetween}`}>
        <Button className={`${styles.btn} ${styles.btnContinue} btn-block`} onClick={() => Router.push('/Profile')}>
          {t('PassengersPP.lblPrcdLogn')}
        </Button>
      </div>
    </div>
  );
}
export function SeatBaggageSelectionError(props: any) {
  const { SelectionError, onHide, onContinue } = props;
  const { t } = useTranslation();
  return (
    <div className="selection_error_popup">
      {
        SelectionError === 'baggageError'
          ? (
            <div>
              <h5>{t('Passengers.lblBgeSeletin')}</h5>
              <h2>{t('Passengers.lblYoudtbgeincled')}</h2>
              <p>
                {t('Passengers.lblAdbgenwavdadlArptchgs')}
              </p>
              <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnDouble`}>
                <Button className={`${styles.btn} ${styles.btnContinue}`} onClick={onHide}>{t('Passengers.lblAddBge')}</Button>
                <Button variant="link" className={`${styles.ml20} ${styles.link}`} onClick={onContinue}>{t('Passengers.lblNoThanks')}</Button>
              </Row>
            </div>
          )
          : (
            <div>
              <h5>{t('SeatPage.lblSeatslectin')}</h5>
              <h2>{t('SeatPage.lblYoudthvestslctd')}</h2>
              <p>
                {t('SeatPage.lblSltsetnwsityouwant')}
              </p>
              <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnDouble`}>
                <Button className={`${styles.btn} ${styles.btnContinue}`} onClick={onHide}>{t('SeatPage.lblSelectSeat')}</Button>
                <Button className={`${styles.ml20} ${styles.link}`} variant="link" onClick={onContinue}>{t('Passengers.lblNoThanks')}</Button>
              </Row>
            </div>
          )
      }
    </div>
  );
}

export function FlightSelectionError(props: any) {
  const { modData, onHide } = props;
  const { t } = useTranslation();
  const errorCode = !isEmpty(modData) && modData.length > 0 && !isEmpty(modData[0]) ? modData[0].code : 0;
  const handleHide = () => {
    if (modData !== '') {
      window.location.reload();
    } else {
      onHide();
    }
  };
  if (errorCode === ERROR_CODE.FLIGHT_SELECTION_MINIMUM_DURATION) {
    return (
      <div className="selection_error_popup">
        <div>
          {
            <>
              <p>
                {t('FlightResult.lblFlightMinDur')}
              </p>
            </>
          }
          <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnSingle`}>
            <Button
              className={`${styles.btn} ${styles.btnContinue}`}
              onClick={handleHide}
            >
              {modData !== '' ? t('FlightResult.lblRetry') : t('Header.lblSltFlight')}
            </Button>
          </Row>
        </div>
      </div>
    );
  }
  if (errorCode === ERROR_CODE.FLIGHT_SELECTION_IB_MUST_GREATER_OB) {
    return (
      <div className="selection_error_popup">
        <div>
          {
            <>
              <p>
                {t('FlightResult.lblIBFlightErr')}
              </p>
            </>
          }
          <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnSingle`}>
            <Button
              className={`${styles.btn} ${styles.btnContinue}`}
              onClick={handleHide}
            >
              {modData !== '' ? t('FlightResult.lblRetry') : t('Header.lblSltFlight')}
            </Button>
          </Row>
        </div>
      </div>
    );
  }
  return (
    <div className="selection_error_popup">
      <div>
        {
          modData !== '' ? (
            <>
              <p>
                {t('FlightResult.lblFareChanged')}
              </p>
            </>
          ) : (
            <>
              <h2>{t('Header.lblPlsSltFlight')}</h2>
              <h3>{t('Header.lblDntSlctFlght')}</h3>
              <p>
                {t('Header.lblSlctFlghttoCnte')}
                <br />
              </p>
            </>
          )
        }
        <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnSingle`}>
          <Button
            className={`${styles.btn} ${styles.btnContinue}`}
            onClick={handleHide}
          >
            {modData !== '' ? t('FlightResult.lblRetry') : t('Header.lblSltFlight')}
          </Button>
        </Row>
      </div>
    </div>
  );
}

export function AddonSelectionError(props: any) {
  const {
    onHide, errorMsgs, modalBody, onClose,
  } = props;
  const { t } = useTranslation();

  return (
    <div className="selection_error_popup">
      <div>
        {
          modalBody === 'AddonAvailabilityError' || modalBody === 'CheckinAddonAvailabilityError'
            ? '' : <h2>Addon Selection Error</h2>
        }
        {
          modalBody === 'AddonAvailabilityError' || modalBody === 'CheckinAddonAvailabilityError'
            ? (
              <>
                <h3>
                  {t('Ancillaries.lblAddonUnavailErr')}
                </h3>
                <br />
              </>
            )
            : (
              <div>
                {
                  errorMsgs ? map(errorMsgs.msgs, message => (
                    <>
                      <h3>{message.msgText}</h3>
                      <br />
                    </>
                  )) : <></>
                }
              </div>
            )
        }
        <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnDouble`}>
          <Button
            className={`${styles.btn} ${styles.btnContinue}`}
            onClick={
              () => {
                if (modalBody === 'AddonAvailabilityError' || modalBody === 'CheckinAddonAvailabilityError') {
                  onClose();
                } else {
                  onHide();
                }
              }}
          >
            {
              (modalBody === 'AddonAvailabilityError' || modalBody === 'CheckinAddonAvailabilityError')
                ? t('Ancillaries.lblProceedAnyway') : t('FlightResult.lblOK')
            }
          </Button>
          {
            modalBody === 'AddonAvailabilityError' && modalBody !== 'CheckinAddonAvailabilityError' ? (
              <Button
                className={`${styles.btn} ${styles.btnContinue} ${styles.ml20}`}
                onClick={() => window.location.reload()}
              >
                {t('FlightResult.lblChangeFlight')}
              </Button>
            )
              : <></>
          }
        </Row>
      </div>
    </div>
  );
}

export function PaymentValidation(props: any) {
  const { onHide } = props;
  return (
    <div className="selection_error_popup">
      <div>
        <h2>Please select your Payment</h2>
        <h3>Oops, you forgot something!</h3>
        <p>
          {'You need to select all flights to continue!'}
          <br />
        </p>
        <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnSingle`}>
          <Button className={`${styles.btn} ${styles.btnContinue}`} onClick={onHide}>Select Payment</Button>
        </Row>
      </div>
    </div>
  );
}

export function SearchFormInvalid(props: any) {
  const { onHide } = props;
  const { t } = useTranslation();
  return (
    <div className="selection_error_popup">
      <div>
        <h2>{t('Header.lblPlsSltFlight')}</h2>
        <h3>{t('Header.lblDntSlctFlght')}</h3>
        <p>
          {t('Header.lblSlctFlghttoCnte')}
          <br />
        </p>
        <Row className={`${styles.dFlex} ${styles.mt30} ${styles.flexAlignCenter} btnSingle`}>
          <Button className={`${styles.btn} ${styles.btnContinue}`} onClick={onHide}>{t('Header.lblSltFlight')}</Button>
        </Row>
      </div>
    </div>
  );
}


export function ErrorMessage(props: any) {
  const {
    onHide, errorMsgs,
  } = props;
  const { t } = useTranslation();
  return (
    <div className="selection_error_popup">
      <div>
        <h2>
          {
            'Error'
          }
        </h2>
        <h4>{errorMsgs}</h4>
        <Row className={`${styles.dFlex} ${styles.mt20} ${styles.flexAlignCenter} btnSingle`}>
          <Button
            className={`${styles.btn} ${styles.btnContinue}`}
            onClick={
              () => {
                onHide();
              }}
          >
            {
              t('FlightResult.lblOK')
            }
          </Button>
        </Row>
      </div>
    </div>
  );
}

function ModalComponent(props: any) {
  let lModalSize: any = '';
  let ModalHeaderType: any = '';
  let modalCloseProps = {};
  const {
    isError, show, onHide, modalSize, modalBody, alertHide,
    isLoggingIn, SelectionError, selectedTab, ModalType,
    modData, signupDetails, isUserRegd, proceedAsGuest, returnTo,
    isLoggedInFailed, flowType, ipAddress, isChangePaxAllowed,
    loginFailureText, dispatch, onContinue, routes, isItemDeleted,
    flightsCheckin, checkinFlowProps, fromCMS, removeModalIcon,
    removeModalTitle, removeModalCnt, removeModalLinkyes, onClose, countryList,
    priceChange, refundData, currency, changePaxPriceInfo, isChangeFlightAllowed,
    cancelFlightKeys, handleForgotPassword, handleForgotPwdMsg, isOtherAgentPNR,
    exchangeRate, selectedCurrencyCode, hideCloseButton, loaderAction,
    handelSocialSignupGendershow, isSocialLogin, socialInfomation,
    actionState, isCancelFlightAllowed, userAgent, setselectdVoucher,
    userData, isPrefill, socialLoginInfo, setLoginSelTabId, setIsPrefill, multipleFOP,
    passenger, flight, handlePriceSlct, onSelectStep, handlePriceSelection,
    setIsCallApi, hndlPrcslctmodal,
    handleCheckinSaveModelShow,
    travelDocDetail, setSelectedFare,
  } = props;
  switch (modalSize) {
    case 'smallSize': lModalSize = 'small_popup';
      break;
    case 'MedSize': lModalSize = 'med_popup';
      break;
    case 'LargeSize': lModalSize = 'large_popup';
      break;
    case 'ExLargeSize': lModalSize = 'extra_large_popup';
      break;
    default: lModalSize = '';
  }
  const { t } = useTranslation();
  // const [selectedLTab, setSelectedLTab] = useState(selectedTab);
  const [modalTitle, setModalTitle] = useState(props.modalTitle);
  const [configModalSize, setModalSize] = useState(lModalSize);
  // useEffect(() => {
  //   setLoginSelTabId(selectedTab);
  // }, [selectedTab]);

  const modalProps = {
    dispatch,
    modalBody,
    selectedTab,
    isLoggingIn,
    SelectionError,
    modData,
    signupDetails,
    isUserRegd,
    onHide,
    proceedAsGuest,
    returnTo,
    isLoggedInFailed,
    loginFailureText,
    onContinue,
    flightsCheckin,
    checkinFlowProps,
    fromCMS,
    routes,
    removeModalIcon,
    removeModalTitle,
    removeModalCnt,
    removeModalLinkyes,
    modalTitle,
    onClose,
    countryList,
    priceChange,
    refundData,
    currency,
    changePaxPriceInfo,
    flowType,
    isChangeFlightAllowed,
    isChangePaxAllowed,
    isCancelFlightAllowed,
    isOtherAgentPNR,
    cancelFlightKeys,
    handleForgotPassword,
    handleForgotPwdMsg,
    handelSocialSignupGendershow,
    isSocialLogin,
    socialInfomation,
    ipAddress,
    exchangeRate,
    selectedCurrencyCode,
    isItemDeleted,
    alertHide,
    hideCloseButton,
    loaderAction,
    actionState,
    setselectdVoucher,
    userAgent,
    userData,
    isPrefill,
    socialLoginInfo,
    setLoginSelTabId,
    setIsPrefill,
    multipleFOP,
    passenger,
    flight,
    handlePriceSlct,
    handlePriceSelection,
    hndlPrcslctmodal,
    onSelectStep,
    setIsCallApi,
    handleCheckinSaveModelShow,
    travelDocDetail,
    setSelectedFare,
  };
  switch (ModalType) {
    case 'SeatSelection':
      ModalHeaderType = (
        <div className="autoseatassign">
          <Modal.Header>

            <Modal.Title>
              <div className="seat-selection-title">
                <h4>
                  {t('SeatPage.lblAutoSeatAssignment')}
                </h4>
              </div>
            </Modal.Title>
          </Modal.Header>
        </div>
      );
      break;

    case 'modalSpecialheader':
      ModalHeaderType = (
        <Modal.Header closeButton>
          <Modal.Title>
            <div className={`${styles.dFlex} justify-content-center f_title timer`}>
              <div className="timerTime">
                <h4>
                  {modData}
                </h4>
                <p>
                  <small>min</small>
                  <small>sec</small>
                </p>
              </div>
              <div className="clock" />
            </div>
          </Modal.Title>
        </Modal.Header>
      );
      break;
    case 'modalWithheader':
      ModalHeaderType = (
        <Modal.Header closeButton>
          <Modal.Title>{t(modalTitle)}</Modal.Title>
        </Modal.Header>
      );
      break;
    case 'modalWithheadercaption':
      ModalHeaderType = (
        <Modal.Header closeButton className="payment_failure_header">
          <Modal.Title>
            <h5>{t(props.modalTitle)}</h5>
            <p>{t(props.modalCaption)}</p>
          </Modal.Title>
        </Modal.Header>
      );
      break;
    case 'modalTabHeader':
      modalCloseProps = {
        keyboard: false,
        backdrop: !(modalBody === 'SignIn' || modalBody === 'SignUp'),
      };
      ModalHeaderType = (
        <Modal.Header closeButton={!hideCloseButton} className="modalTabHeader">
          <div className="signin_login_popup">
            <div className="custom-tab2">
              <Nav variant="tabs" className={styles.navTabs} activeKey={selectedTab} onSelect={(eventKey: any) => setLoginSelTabId(eventKey)}>
                <Nav.Item className={styles.navItem}>
                  <Nav.Link eventKey="1" onSelect={() => setLoginSelTabId(1)}>{t('SignUpmodal.lblSgnUp')}</Nav.Link>
                </Nav.Item>
                <Nav.Item className={styles.navItem}>
                  <Nav.Link
                    eventKey="2"
                    onSelect={() => {
                      setLoginSelTabId(2);
                      sessionStorage.removeItem(SOCIAL_USERINFO);
                    }}
                  >
                    {t('FlightResult.lblLogin')}
                  </Nav.Link>
                </Nav.Item>
              </Nav>
            </div>
          </div>
        </Modal.Header>
      );
      break;
    default: {
      ModalHeaderType = '';
    }
  }
  if (modalBody === 'FindMybookingCheckin' || modalBody === 'SocialMediaRegistration') {
    modalCloseProps = {
      keyboard: false,
      backdrop: false,
    };
  }
  if (modalBody === 'ShowCompanion' || modalBody === 'addTravelDoc' || modalBody === 'addCompanion' || modalBody === 'yourProfile'
    || modalBody === 'EditCmp' || modalBody === 'RemoveModal' || modalBody === 'UpgradeFare' || modalBody === 'freeBg' || modalBody === '10Kg'
    || modalBody === '20Kg' || modalBody === '30Kg' || modalBody === 'priorBg') {
    modalCloseProps = {
      keyboard: true,
      backdrop: true,
    };
  }
  const overrideProfileDetailPopupStyle = (modalBody === 'SessionExpiresIN') ? styles.sessionExpiresIn : styles.profileDetailPopup;
  const socialMedSignupClass = (modalBody === 'SocialMediaRegistration') ? 'socialMediaSignup' : '';
  return (
    <Modal
      {...modalCloseProps}
      className={`${overrideProfileDetailPopupStyle} ${socialMedSignupClass} ${configModalSize} ${isError ? 'blue_bg' : ''} ${modalBody === 'freeBg' || modalBody === '10Kg'
        || modalBody === '20Kg' || modalBody === '30Kg' || modalBody === 'priorBg' ? styles.shiftModal : ''
        }`}
      show={show}
      onHide={onHide}
    >
      {ModalHeaderType}
      <Modal.Body style={{ padding: ModalType === 'BrndUp' ? '10px' : '40px' }}>
        <ModalContent {...modalProps} setModalTitle={setModalTitle} setModalSize={setModalSize} />
      </Modal.Body>
    </Modal>
  );
}
const mapStateToProps = (state: IAppState) => ({
  signupDetails: state.auth.signupDetails,
  isUserRegd: state.auth.isUserRegd,
  userData: state.auth.userData,
  isLoggedInFailed: state.auth.isLoggedInFailed,
  loginFailureText: state.auth.loginFailureText,
  flightsCheckin: state.checkin.flightsCheckin,
  routes: state.routes,
  countryList: state.routes.countryList,
  cancelFlightKeys: state.mmb.cancelFlights,
  refundAmount: state.mmb.refundAmount,
  socialInfomation: state.auth.socialInfomation,
  isSocialLogin: state.auth.isSocialLogin,
  ipAddress: state.workflow.ipAddress,
  userAgent: state.workflow.userAgent,
  exchangeRate: state.totalAmount.exchangeRate,
  selectedCurrencyCode: state.totalAmount.selectedCurrencyCode,
  actionState: state.workflow.actionState,
});

export default connect(mapStateToProps)(ModalComponent);
