/* eslint-disable linebreak-style */
import * as Scroll from 'react-scroll';
import { connect } from 'react-redux';
import { Alert } from 'react-bootstrap';
import React, { useEffect, useState, Fragment } from 'react';
import { map } from 'lodash';
import { useTranslation } from 'react-i18next';
import { saveCheckin, updateCheckoutPax, confirmCheckin } from '../../redux/checkIn.redux';
import { IAppState } from '../../redux/initialState';
import { WORK_STEP, WORKFLOW } from '../../constants/common';
import { getLanguageCode } from '../../helpers/utilities';
import styles from './styles.scss';
const { Router } = require('../../next/router');

function CheckinSaveData(props: any) {
  const scroll = Scroll.animateScroll;
  const [errorMsg, setErrorMsg] = useState<Array<any>>([]);
  const [hasError, setError] = useState(false);
  const {
    travelDocDetail = {}, // Default to an empty object if not provided
    actionState,
    passengerSelected,
    query,
    isLoggedIn,
    userData,
  } = props;

  useEffect(() => {
    document.body.classList.add('seat-view');
    scroll.scrollToTop();
  }, []);

  const save = () => {
    props.handleCheckinSaveModelShow(false);
    props.setIsCallApi(true);

    if (actionState === WORKFLOW.CHECK_OUT) {
      const { flightKey } = travelDocDetail;
      if (!flightKey) {
        console.error('Flight key is missing');
        return;
      }

      props.dispatch(updateCheckoutPax({
        flightKey,
        passengersInfo: map(passengerSelected, (pax: any) => ({
          passengerKey: pax.passengerKey,
        })),
      })).then((result: any) => {
        props.setIsCallApi(false);
        if (result.isSuccess) {
          const checkOutAPIData = {
            languageCode: getLanguageCode(),
            liftStatus: 2,
          };
          props.setIsCallApi(true);
          props.dispatch(saveCheckin(checkOutAPIData)).then((saveCheckinResult: any) => {
            const { reservationID, result: saveCheckinResponse } = saveCheckinResult;
            props.setIsCallApi(false);
            if (saveCheckinResponse.isSuccess) {
              props.setIsCallApi(true);
              props.dispatch(confirmCheckin({ ...checkOutAPIData, reservationID })).then((confirmCheckinResponse: any) => {
                props.setIsCallApi(false);
                const { result: cnfrmCheckinResponse } = confirmCheckinResponse;
                if (cnfrmCheckinResponse.isSuccess) {
                  Router.pushRoute('/CheckoutConfirm', query);
                } else {
                  const { msgs } = result;
                  setErrorMsg(msgs);
                  setError(true);
                }
              });
            } else {
              const { msgs } = result;
              setErrorMsg(msgs);
              setError(true);
            }
          });
        } else {
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
      });
    } else {
      props.dispatch(saveCheckin({
        languageCode: getLanguageCode(),
        paxInfoId: isLoggedIn ? userData.paxInfoID : 0,
        reservationType: 3,
      })).then((saveCheckinResponse: any) => {
        const { result } = saveCheckinResponse;
        props.setIsCallApi(false);
        if (result.isSuccess) {
          props.onSelectStep(WORK_STEP.CONFIRM_CHECKIN);
        } else {
          props.onSelectStep(WORK_STEP.UPDATE_TRAVEL_DOC);
          const { msgs } = result;
          setErrorMsg(msgs);
          setError(true);
        }
      });
    }
  };

  function checkinConfirmData(documents: any) {
    const { t } = useTranslation();
    return (
      <div className={`${styles.sidePanelContent} ${styles.noPadBot}`}>
        <div className="checkin_confirm_data">
          <h3>{t('CheckIn.lblCnfrmdata')}</h3>
          {hasError && errorMsg.map((error: any, index: number) => (
            <Alert key={index} variant="danger">{error.msgText}</Alert>
          ))}
          <div className={`${styles.boxContent} ${styles.mb40}`}>
            <div className={styles.boxBody}>
              <p className={styles.mb20}>{t('CheckIn.lblPlsMkeinfmtonblwCoret')}</p>
              <div className={`${'d-flex'} ${'flex-wrap'} ${'confirm_data_panel'}`}>
                {map(documents, (item: any, index: number) => (
                  <div key={index} className={`${styles.boxContent}`}>
                    <div className={styles.boxBody}>
                      <h5 className={styles.userWithIcon}>
                        <i className={`${styles.foIcon} ${styles.iconFoUser2} ${styles.roundIcon}`} />
                        {item.customerName}
                      </h5>
                      <ul className="user_confirm_detail">
                        <li><span>{t('PassengersPP.lblNationality')}</span>{item.nationalityCode}</li>
                        <li><span>{t('CheckIn.lblDOB')}</span>{item.dateOfBirth}</li>
                        <li><span>{t('FlightResult.lblMobilePnNumber')}</span>{item.mobileNo}</li>
                      </ul>
                      <ul className="user_confirm_detail">
                        <li><span>{t('PaymentPage.lblDcumetIDnum')}</span>{item.idNumber}</li>
                        <li><span>{t('CheckIn.lblDocmtisedby')}</span>{item.issuedBy}</li>
                      </ul>
                      <ul className="user_confirm_detail">
                        <li><span>{t('CheckIn.lblDteofise')}</span>{item.issuedDate}</li>
                        <li><span>{t('CheckIn.lblExydate')}</span>{item.expiryDate}</li>
                      </ul>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className={`${styles.boxContent} ${styles.termsCnt}`}>
            <div className={styles.boxBody}>
              <h4>{t('CheckIn.lblCndtios')}</h4>
              <p className={styles.mb20}>
                {t('CheckIn.lblFlyoneAcptCbnbag8kg')}
                &nbsp;
                <a href={t('CheckIn.lblBaggageLink')} target="_blank" rel="noopener noreferrer">
                  ({t('CheckIn.lblBaggageLink')})
                </a>
              </p>
              <p>{t('CheckIn.lblWedrwatenonpssprtA4Shet')}</p>
              <p>{t('CheckIn.lblPlsmkesurchkBardngFltChg')}</p>
              <p>{t('CheckIn.lblIfTrvlChkdBageRgterArpt60Minbfr')}</p>
              <p>{t('CheckIn.lblBrdnggte15minbfrDptTimeArliebardng')}</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const { t } = useTranslation();
  const documents = actionState === WORKFLOW.CHECK_OUT
    ? (travelDocDetail.customers || [])
    : (travelDocDetail.passengersInfo || []);

  return (
    <Fragment>
      <div>
        {checkinConfirmData(documents)}
      </div>
      <div className={`${styles.dFlex} ${styles.flexJustifyEnd} ${styles.mt40}`}>
        <button className={`${styles.btn} ${styles.btnContinue} ${styles.mr20} ${styles.ml20}`} type="button" onClick={save}>
          {t('CheckIn.lblAcept')}
        </button>
      </div>
    </Fragment>
  );
}

const mapStateToProps = (state: IAppState) => ({
  actionState: state.workflow.actionState,
  passengerSelected: state.checkin.passengerSelected,
  isLoggedIn: state.auth.isLoggedIn,
  userData: state.auth.userData,
  travelDocDetail: state.checkin.travelDocDetail,
});

export default connect(mapStateToProps)(CheckinSaveData);
