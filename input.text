"use client";
import React, { useEffect, useState } from "react";
import "./Input.css";
import AiportList from "@/components/Common/AirportList/AiportList";
import { getCountryNameByDepCode } from "@/utils/utilsFunction";
import { redirect } from "next/navigation";
import { useAppDispatch, useAppSelector } from "@/lib/store";
import { updateFlightSearchQuery } from "@/lib/componentSlice";
import { getNearbyCity, setNearbyCity } from "@/lib/authSlice";

const Inputfield = () => {
  const dispatch = useAppDispatch();
  const [showOffcanvas, setShowOffcanvas] = useState(false);
  const [selectedFrom, setSelectedFrom] = useState("");
  const [selectedTo, setSelectedTo] = useState("");
  const [activeField, setActiveField] = useState<"From" | "To" | null>(null);

  useEffect(() => {
      const getUserLocation = () => {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              console.log('first', position);
              const { latitude, longitude } = position.coords;
              dispatch(getNearbyCity({ latitude, longitude }));
            },
            (error) => {
              dispatch(setNearbyCity(error));
            }
          );
        } else {
          console.error("Geolocation is not supported by this browser.");
        }
      };
      getUserLocation();
    }, []);

  // Get nearby city/airport data from Redux store
  const nearbyCity = useAppSelector((state: any) => state?.auth?.NearbyCity);

  // Automatically set the nearest airport as the "From" field default value
  useEffect(() => {
    if (nearbyCity?.airportCode) {
      setSelectedFrom(nearbyCity.airportCode);
    }
  }, [nearbyCity]);

  const handleFromInputClick = () => {
    setActiveField("From");
    setShowOffcanvas(true);
  };

  const handleToInputClick = () => {
    setActiveField("To");
    setShowOffcanvas(true);
  };

  const handleSelectItem = (item: string) => {
    const flightInfo: any = { inBound: "", outBond: "" };
    if (activeField === "From") {
      flightInfo.inBound = selectedTo;
      flightInfo.outBond = item;
      setSelectedFrom(item);
    } else if (activeField === "To") {
      setSelectedTo(item);
      flightInfo.inBound = item;
      flightInfo.outBond = selectedFrom;
    }
    setShowOffcanvas(false);
  };

  useEffect(() => {
    if (selectedFrom && selectedTo) {
      dispatch(updateFlightSearchQuery({ depCity: selectedFrom }));
      dispatch(updateFlightSearchQuery({ arrCity: selectedTo }));
      redirect("/Booking");
    }
  }, [selectedFrom, selectedTo]);

  const swapFlights = () => {
    setSelectedFrom(selectedTo);
    setSelectedTo(selectedFrom);
  };

  return (
    <section className="mobile-header !bg-primary !mt-[0.03rem]">
      <form className="row p-4">
        <div className="search-flight-input col-6 col-xs-6 col-sm-6 p-0">
          <input
            type="text"
            className="form-control border-r-25"
            placeholder="From"
            readOnly
            value={
              selectedFrom === ""
                ? ""
                : `${getCountryNameByDepCode(selectedFrom)}  (${selectedFrom})`
            }
            onClick={handleFromInputClick}
          />
          <button
            className="swaplocations"
            type="button"
            aria-label="Swap origin and destination"
          >
            <div className="wayIco" onClick={swapFlights}>
              â‡†
            </div>
          </button>
        </div>
        <div className="search-flight-input col-6 col-xs-6 col-sm-6 p-0">
          <input
            type="text"
            className="border-r-25 form-control"
            placeholder="To"
            readOnly
            value={
              selectedTo === ""
                ? ""
                : `${getCountryNameByDepCode(selectedTo)}  (${selectedTo})`
            }
            onClick={handleToInputClick}
          />
        </div>
      </form>

      {showOffcanvas && (
        <AiportList
          placement="right"
          name="Select Item"
          activeField={activeField}
          show={showOffcanvas}
          onHide={() => setShowOffcanvas(false)}
          onSelectItem={handleSelectItem}
          selectedFrom={selectedFrom}
        />
      )}
    </section>
  );
};

export default Inputfield;


================================================================================================================================================================================================

import { useEffect, useRef, useState } from "react";
import Offcanvas from "react-bootstrap/Offcanvas";
import "./AirportList.scss";
import { Col, Form } from "react-bootstrap";
import { RouteAPI } from "./Routes";
import { filter, includes } from "lodash";
import { useAppDispatch, useAppSelector } from "@/lib/store";
import { getNearbyCity } from "@/lib/authSlice";

interface AirportRoute {
  depCode: string;
  depAirportName: string;
  countryCode: string;
  countryName: string;
  isNew: boolean;
  arrCodes: string[];
}

interface AirportListProps {
  name: string;
  show: boolean;
  onHide: () => void;
  onSelectItem: (itemCode: string) => void;
  activeField: string;
  selectedFrom: string;
  [key: string]: any;
}

function AiportList({
  name,
  show,
  onHide,
  onSelectItem,
  activeField,
  selectedFrom,
  ...props
}: AirportListProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [route, setRoutes] = useState<AirportRoute[]>(RouteAPI.routes);
  const [searchText, setSearchText] = useState("");
  const [selectedValue, setSelectedValue] = useState<string | undefined>();

  const dispatch = useAppDispatch();

  // Get nearby city/airport data from the Redux store
  const nearbyCity = useAppSelector((state: any) => state?.auth?.NearbyCity);

  // Effect to get the user's current location and dispatch getNearbyCity
  useEffect(() => {
    const getUserLocation = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            dispatch(getNearbyCity({ latitude, longitude }));
          },
          (error) => {
            console.error("Error getting location:", error);
          }
        );
      } else {
        console.error("Geolocation is not supported by this browser.");
      }
    };
    getUserLocation();
  }, []);

  // Search text filter logic
  useEffect(() => {
    if (searchText.length > 0) {
      setRoutes(
        RouteAPI.routes.filter((route) => {
          const lowerSearchText = searchText.toLowerCase();
          return (
            route.depAirportName.toLowerCase().includes(lowerSearchText) ||
            route.countryName.toLowerCase().includes(lowerSearchText) ||
            route.depCode.toLowerCase().includes(lowerSearchText)
          );
        })
      );
    } else {
      setRoutes(RouteAPI.routes);
    }
  }, [searchText]);

  // Group airports by country
  const airportsByCountry: Record<string, AirportRoute[]> = {};

  // Filter airports if a `From` airport is selected and we are filling the `To` field
  if (selectedFrom && activeField === "To") {
    const selectArrCode = filter(route, (r) => r.depCode === selectedFrom)?.[0]?.arrCodes;

    if (selectArrCode) {
      const filteredRoutes = filter(route, (r) =>
        includes(selectArrCode, r.depCode)
      );
      filteredRoutes.forEach((r) => setRoutes(filteredRoutes));
    } else {
      console.log("No arrCodes found for selectedFrom:", selectedFrom);
    }
  }

  route.forEach((route) => {
    if (!airportsByCountry[route.countryName]) {
      airportsByCountry[route.countryName] = [];
    }
    airportsByCountry[route.countryName].push(route);
  });

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
    setSearchText(event.target.value);
  };

  const handleItemClick = (item: AirportRoute) => {
    onSelectItem(item.depCode);
    onHide();
  };

  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    const focusTimeout = setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    }, 100);
    return () => clearTimeout(focusTimeout);
  }, []);

  return (
    <Offcanvas
      show={show}
      onHide={onHide}
      {...props}
      className="main-Offcanvas h-100 w-100 overflow-hidden"
    >
      <Offcanvas.Header className="justify-content-between align-items-center">
        <button onClick={onHide} className="btncroxxclose">X</button>
        <Offcanvas.Title className="fromtxt">{activeField}</Offcanvas.Title>
        <Offcanvas.Title className="Clear" onClick={onHide}>
          Clear
        </Offcanvas.Title>
      </Offcanvas.Header>
      <div className="offc-ctm-body">
        <Col sm="12" style={{ padding: "0px 15px" }}>
          <Form.Control
            type="text"
            placeholder="Search..."
            value={searchQuery}
            onChange={handleSearch}
            className="mb-3"
            ref={inputRef}
            autoFocus
          />
        </Col>
        <div className="scroll-bar">
          <div>
            {/* Show Nearest Airports only if nearbyCity.airportCode exists */}
            {nearbyCity?.airportCode && activeField === "From" && (
              <>
                <div>
                  <span>Nearest Airport</span>
                </div>
                {/* Match nearbyCity.airportCode with depCode from RouteAPI.routes */}
                {RouteAPI.routes.map((airport) => {
                  if (airport.depCode === nearbyCity.airportCode) {
                    return (
                      <div key={airport.depCode} className="show-itemmd">
                        <div
                          onClick={() => handleItemClick(airport)}
                          className="show-item"
                        >
                          <input
                            type="radio"
                            value={airport.depAirportName}
                            checked={selectedValue === airport.depAirportName}
                            onChange={() =>
                              setSelectedValue(airport.depAirportName)
                            }
                          />
                          {`${airport.depAirportName} (${airport.depCode})`}
                        </div>
                      </div>
                    );
                  }
                  return null;
                })}
              </>
            )}

            {/* Loop through the airports by country and display them */}
            {Object.keys(airportsByCountry).map((countryName) => (
              <div key={countryName}>
                <div>
                  <span>{countryName}</span>
                </div>
                {airportsByCountry[countryName].map((airport, index) => (
                  <div key={airport.depCode} className="show-itemmd">
                    <div
                      className={`airport-list-item show-item ${
                        index ===
                        Object.values(airportsByCountry[countryName]).length - 1
                          ? "last-item"
                          : ""
                      }`}
                      onClick={() => handleItemClick(airport)}
                    >
                      <input
                        type="radio"
                        value={airport.depAirportName}
                        checked={selectedValue === airport.depAirportName}
                        onChange={() =>
                          setSelectedValue(airport.depAirportName)
                        }
                      />
                      {`${airport.depAirportName} (${airport.depCode})`}
                    </div>
                  </div>
                ))}
              </div>
            ))}
          </div>
        </div>
      </div>
    </Offcanvas>
  );
}

export default AiportList;
